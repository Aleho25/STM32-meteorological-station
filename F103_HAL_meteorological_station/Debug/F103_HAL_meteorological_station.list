
F103_HAL_meteorological_station.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008240  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000368  08008350  08008350  00018350  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080086b8  080086b8  000201e4  2**0
                  CONTENTS
  4 .ARM          00000000  080086b8  080086b8  000201e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  080086b8  080086b8  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080086b8  080086b8  000186b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080086bc  080086bc  000186bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  080086c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000154  200001e4  080088a4  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000338  080088a4  00020338  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d1e6  00000000  00000000  0002020d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001feb  00000000  00000000  0002d3f3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000b30  00000000  00000000  0002f3e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a48  00000000  00000000  0002ff10  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000158e7  00000000  00000000  00030958  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00009e13  00000000  00000000  0004623f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00072d3d  00000000  00000000  00050052  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c2d8f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003aac  00000000  00000000  000c2e0c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e4 	.word	0x200001e4
 800012c:	00000000 	.word	0x00000000
 8000130:	08008338 	.word	0x08008338

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e8 	.word	0x200001e8
 800014c:	08008338 	.word	0x08008338

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	; 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000be4:	f1a2 0201 	sub.w	r2, r2, #1
 8000be8:	d1ed      	bne.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <__aeabi_fmul>:
 8000d44:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d48:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d4c:	bf1e      	ittt	ne
 8000d4e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d52:	ea92 0f0c 	teqne	r2, ip
 8000d56:	ea93 0f0c 	teqne	r3, ip
 8000d5a:	d06f      	beq.n	8000e3c <__aeabi_fmul+0xf8>
 8000d5c:	441a      	add	r2, r3
 8000d5e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d62:	0240      	lsls	r0, r0, #9
 8000d64:	bf18      	it	ne
 8000d66:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d6a:	d01e      	beq.n	8000daa <__aeabi_fmul+0x66>
 8000d6c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d70:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d74:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d78:	fba0 3101 	umull	r3, r1, r0, r1
 8000d7c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d80:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d84:	bf3e      	ittt	cc
 8000d86:	0049      	lslcc	r1, r1, #1
 8000d88:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d8c:	005b      	lslcc	r3, r3, #1
 8000d8e:	ea40 0001 	orr.w	r0, r0, r1
 8000d92:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d96:	2afd      	cmp	r2, #253	; 0xfd
 8000d98:	d81d      	bhi.n	8000dd6 <__aeabi_fmul+0x92>
 8000d9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da2:	bf08      	it	eq
 8000da4:	f020 0001 	biceq.w	r0, r0, #1
 8000da8:	4770      	bx	lr
 8000daa:	f090 0f00 	teq	r0, #0
 8000dae:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000db2:	bf08      	it	eq
 8000db4:	0249      	lsleq	r1, r1, #9
 8000db6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dba:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dbe:	3a7f      	subs	r2, #127	; 0x7f
 8000dc0:	bfc2      	ittt	gt
 8000dc2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dc6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dca:	4770      	bxgt	lr
 8000dcc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dd0:	f04f 0300 	mov.w	r3, #0
 8000dd4:	3a01      	subs	r2, #1
 8000dd6:	dc5d      	bgt.n	8000e94 <__aeabi_fmul+0x150>
 8000dd8:	f112 0f19 	cmn.w	r2, #25
 8000ddc:	bfdc      	itt	le
 8000dde:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000de2:	4770      	bxle	lr
 8000de4:	f1c2 0200 	rsb	r2, r2, #0
 8000de8:	0041      	lsls	r1, r0, #1
 8000dea:	fa21 f102 	lsr.w	r1, r1, r2
 8000dee:	f1c2 0220 	rsb	r2, r2, #32
 8000df2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000df6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dfa:	f140 0000 	adc.w	r0, r0, #0
 8000dfe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e02:	bf08      	it	eq
 8000e04:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e08:	4770      	bx	lr
 8000e0a:	f092 0f00 	teq	r2, #0
 8000e0e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e12:	bf02      	ittt	eq
 8000e14:	0040      	lsleq	r0, r0, #1
 8000e16:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e1a:	3a01      	subeq	r2, #1
 8000e1c:	d0f9      	beq.n	8000e12 <__aeabi_fmul+0xce>
 8000e1e:	ea40 000c 	orr.w	r0, r0, ip
 8000e22:	f093 0f00 	teq	r3, #0
 8000e26:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e2a:	bf02      	ittt	eq
 8000e2c:	0049      	lsleq	r1, r1, #1
 8000e2e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e32:	3b01      	subeq	r3, #1
 8000e34:	d0f9      	beq.n	8000e2a <__aeabi_fmul+0xe6>
 8000e36:	ea41 010c 	orr.w	r1, r1, ip
 8000e3a:	e78f      	b.n	8000d5c <__aeabi_fmul+0x18>
 8000e3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e40:	ea92 0f0c 	teq	r2, ip
 8000e44:	bf18      	it	ne
 8000e46:	ea93 0f0c 	teqne	r3, ip
 8000e4a:	d00a      	beq.n	8000e62 <__aeabi_fmul+0x11e>
 8000e4c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e50:	bf18      	it	ne
 8000e52:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e56:	d1d8      	bne.n	8000e0a <__aeabi_fmul+0xc6>
 8000e58:	ea80 0001 	eor.w	r0, r0, r1
 8000e5c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e60:	4770      	bx	lr
 8000e62:	f090 0f00 	teq	r0, #0
 8000e66:	bf17      	itett	ne
 8000e68:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e6c:	4608      	moveq	r0, r1
 8000e6e:	f091 0f00 	teqne	r1, #0
 8000e72:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e76:	d014      	beq.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e78:	ea92 0f0c 	teq	r2, ip
 8000e7c:	d101      	bne.n	8000e82 <__aeabi_fmul+0x13e>
 8000e7e:	0242      	lsls	r2, r0, #9
 8000e80:	d10f      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e82:	ea93 0f0c 	teq	r3, ip
 8000e86:	d103      	bne.n	8000e90 <__aeabi_fmul+0x14c>
 8000e88:	024b      	lsls	r3, r1, #9
 8000e8a:	bf18      	it	ne
 8000e8c:	4608      	movne	r0, r1
 8000e8e:	d108      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e90:	ea80 0001 	eor.w	r0, r0, r1
 8000e94:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e98:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e9c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ea0:	4770      	bx	lr
 8000ea2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ea6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eaa:	4770      	bx	lr

08000eac <__aeabi_fdiv>:
 8000eac:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000eb0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eb4:	bf1e      	ittt	ne
 8000eb6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eba:	ea92 0f0c 	teqne	r2, ip
 8000ebe:	ea93 0f0c 	teqne	r3, ip
 8000ec2:	d069      	beq.n	8000f98 <__aeabi_fdiv+0xec>
 8000ec4:	eba2 0203 	sub.w	r2, r2, r3
 8000ec8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ecc:	0249      	lsls	r1, r1, #9
 8000ece:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ed2:	d037      	beq.n	8000f44 <__aeabi_fdiv+0x98>
 8000ed4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ed8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000edc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ee0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	bf38      	it	cc
 8000ee8:	005b      	lslcc	r3, r3, #1
 8000eea:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000eee:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	bf24      	itt	cs
 8000ef6:	1a5b      	subcs	r3, r3, r1
 8000ef8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000efc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f00:	bf24      	itt	cs
 8000f02:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f06:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f0a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f0e:	bf24      	itt	cs
 8000f10:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f18:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f1c:	bf24      	itt	cs
 8000f1e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f22:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f26:	011b      	lsls	r3, r3, #4
 8000f28:	bf18      	it	ne
 8000f2a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f2e:	d1e0      	bne.n	8000ef2 <__aeabi_fdiv+0x46>
 8000f30:	2afd      	cmp	r2, #253	; 0xfd
 8000f32:	f63f af50 	bhi.w	8000dd6 <__aeabi_fmul+0x92>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f3c:	bf08      	it	eq
 8000f3e:	f020 0001 	biceq.w	r0, r0, #1
 8000f42:	4770      	bx	lr
 8000f44:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f48:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f4c:	327f      	adds	r2, #127	; 0x7f
 8000f4e:	bfc2      	ittt	gt
 8000f50:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f54:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f58:	4770      	bxgt	lr
 8000f5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f5e:	f04f 0300 	mov.w	r3, #0
 8000f62:	3a01      	subs	r2, #1
 8000f64:	e737      	b.n	8000dd6 <__aeabi_fmul+0x92>
 8000f66:	f092 0f00 	teq	r2, #0
 8000f6a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f6e:	bf02      	ittt	eq
 8000f70:	0040      	lsleq	r0, r0, #1
 8000f72:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f76:	3a01      	subeq	r2, #1
 8000f78:	d0f9      	beq.n	8000f6e <__aeabi_fdiv+0xc2>
 8000f7a:	ea40 000c 	orr.w	r0, r0, ip
 8000f7e:	f093 0f00 	teq	r3, #0
 8000f82:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f86:	bf02      	ittt	eq
 8000f88:	0049      	lsleq	r1, r1, #1
 8000f8a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f8e:	3b01      	subeq	r3, #1
 8000f90:	d0f9      	beq.n	8000f86 <__aeabi_fdiv+0xda>
 8000f92:	ea41 010c 	orr.w	r1, r1, ip
 8000f96:	e795      	b.n	8000ec4 <__aeabi_fdiv+0x18>
 8000f98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f9c:	ea92 0f0c 	teq	r2, ip
 8000fa0:	d108      	bne.n	8000fb4 <__aeabi_fdiv+0x108>
 8000fa2:	0242      	lsls	r2, r0, #9
 8000fa4:	f47f af7d 	bne.w	8000ea2 <__aeabi_fmul+0x15e>
 8000fa8:	ea93 0f0c 	teq	r3, ip
 8000fac:	f47f af70 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e776      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fb4:	ea93 0f0c 	teq	r3, ip
 8000fb8:	d104      	bne.n	8000fc4 <__aeabi_fdiv+0x118>
 8000fba:	024b      	lsls	r3, r1, #9
 8000fbc:	f43f af4c 	beq.w	8000e58 <__aeabi_fmul+0x114>
 8000fc0:	4608      	mov	r0, r1
 8000fc2:	e76e      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fc4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fc8:	bf18      	it	ne
 8000fca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fce:	d1ca      	bne.n	8000f66 <__aeabi_fdiv+0xba>
 8000fd0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fd4:	f47f af5c 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fd8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fdc:	f47f af3c 	bne.w	8000e58 <__aeabi_fmul+0x114>
 8000fe0:	e75f      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fe2:	bf00      	nop

08000fe4 <__gesf2>:
 8000fe4:	f04f 3cff 	mov.w	ip, #4294967295
 8000fe8:	e006      	b.n	8000ff8 <__cmpsf2+0x4>
 8000fea:	bf00      	nop

08000fec <__lesf2>:
 8000fec:	f04f 0c01 	mov.w	ip, #1
 8000ff0:	e002      	b.n	8000ff8 <__cmpsf2+0x4>
 8000ff2:	bf00      	nop

08000ff4 <__cmpsf2>:
 8000ff4:	f04f 0c01 	mov.w	ip, #1
 8000ff8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ffc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001000:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001004:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001008:	bf18      	it	ne
 800100a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800100e:	d011      	beq.n	8001034 <__cmpsf2+0x40>
 8001010:	b001      	add	sp, #4
 8001012:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001016:	bf18      	it	ne
 8001018:	ea90 0f01 	teqne	r0, r1
 800101c:	bf58      	it	pl
 800101e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001022:	bf88      	it	hi
 8001024:	17c8      	asrhi	r0, r1, #31
 8001026:	bf38      	it	cc
 8001028:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800102c:	bf18      	it	ne
 800102e:	f040 0001 	orrne.w	r0, r0, #1
 8001032:	4770      	bx	lr
 8001034:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001038:	d102      	bne.n	8001040 <__cmpsf2+0x4c>
 800103a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800103e:	d105      	bne.n	800104c <__cmpsf2+0x58>
 8001040:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001044:	d1e4      	bne.n	8001010 <__cmpsf2+0x1c>
 8001046:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800104a:	d0e1      	beq.n	8001010 <__cmpsf2+0x1c>
 800104c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop

08001054 <__aeabi_cfrcmple>:
 8001054:	4684      	mov	ip, r0
 8001056:	4608      	mov	r0, r1
 8001058:	4661      	mov	r1, ip
 800105a:	e7ff      	b.n	800105c <__aeabi_cfcmpeq>

0800105c <__aeabi_cfcmpeq>:
 800105c:	b50f      	push	{r0, r1, r2, r3, lr}
 800105e:	f7ff ffc9 	bl	8000ff4 <__cmpsf2>
 8001062:	2800      	cmp	r0, #0
 8001064:	bf48      	it	mi
 8001066:	f110 0f00 	cmnmi.w	r0, #0
 800106a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800106c <__aeabi_fcmpeq>:
 800106c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001070:	f7ff fff4 	bl	800105c <__aeabi_cfcmpeq>
 8001074:	bf0c      	ite	eq
 8001076:	2001      	moveq	r0, #1
 8001078:	2000      	movne	r0, #0
 800107a:	f85d fb08 	ldr.w	pc, [sp], #8
 800107e:	bf00      	nop

08001080 <__aeabi_fcmplt>:
 8001080:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001084:	f7ff ffea 	bl	800105c <__aeabi_cfcmpeq>
 8001088:	bf34      	ite	cc
 800108a:	2001      	movcc	r0, #1
 800108c:	2000      	movcs	r0, #0
 800108e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001092:	bf00      	nop

08001094 <__aeabi_fcmple>:
 8001094:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001098:	f7ff ffe0 	bl	800105c <__aeabi_cfcmpeq>
 800109c:	bf94      	ite	ls
 800109e:	2001      	movls	r0, #1
 80010a0:	2000      	movhi	r0, #0
 80010a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010a6:	bf00      	nop

080010a8 <__aeabi_fcmpge>:
 80010a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ac:	f7ff ffd2 	bl	8001054 <__aeabi_cfrcmple>
 80010b0:	bf94      	ite	ls
 80010b2:	2001      	movls	r0, #1
 80010b4:	2000      	movhi	r0, #0
 80010b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ba:	bf00      	nop

080010bc <__aeabi_fcmpgt>:
 80010bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c0:	f7ff ffc8 	bl	8001054 <__aeabi_cfrcmple>
 80010c4:	bf34      	ite	cc
 80010c6:	2001      	movcc	r0, #1
 80010c8:	2000      	movcs	r0, #0
 80010ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ce:	bf00      	nop

080010d0 <BMP180_initialize>:

/**
 * Prepare device for normal usage.
 */
void BMP180_initialize()
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	af00      	add	r7, sp, #0
    if (devAddr==0) devAddr = BMP180_DEFAULT_ADDRESS;
 80010d4:	4b05      	ldr	r3, [pc, #20]	; (80010ec <BMP180_initialize+0x1c>)
 80010d6:	781b      	ldrb	r3, [r3, #0]
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d102      	bne.n	80010e2 <BMP180_initialize+0x12>
 80010dc:	4b03      	ldr	r3, [pc, #12]	; (80010ec <BMP180_initialize+0x1c>)
 80010de:	2277      	movs	r2, #119	; 0x77
 80010e0:	701a      	strb	r2, [r3, #0]
    // load sensor's calibration constants
    BMP180_loadCalibration();
 80010e2:	f000 f81b 	bl	800111c <BMP180_loadCalibration>
}
 80010e6:	bf00      	nop
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	20000000 	.word	0x20000000

080010f0 <BMP180_testConnection>:

/**
 * Verify the device is connected and available.
 */
bool BMP180_testConnection()
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	af00      	add	r7, sp, #0
    // test for a response, though this is very basic
    return I2Cdev_readByte(devAddr, BMP180_RA_AC1_H, buffer, 100) == 1;
 80010f4:	4b07      	ldr	r3, [pc, #28]	; (8001114 <BMP180_testConnection+0x24>)
 80010f6:	7818      	ldrb	r0, [r3, #0]
 80010f8:	2364      	movs	r3, #100	; 0x64
 80010fa:	4a07      	ldr	r2, [pc, #28]	; (8001118 <BMP180_testConnection+0x28>)
 80010fc:	21aa      	movs	r1, #170	; 0xaa
 80010fe:	f000 faa9 	bl	8001654 <I2Cdev_readByte>
 8001102:	4603      	mov	r3, r0
 8001104:	2b01      	cmp	r3, #1
 8001106:	bf0c      	ite	eq
 8001108:	2301      	moveq	r3, #1
 800110a:	2300      	movne	r3, #0
 800110c:	b2db      	uxtb	r3, r3
}
 800110e:	4618      	mov	r0, r3
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	20000000 	.word	0x20000000
 8001118:	20000200 	.word	0x20000200

0800111c <BMP180_loadCalibration>:

/* calibration register methods */

void BMP180_loadCalibration()
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b088      	sub	sp, #32
 8001120:	af02      	add	r7, sp, #8
    uint8_t buf2[22];
    I2Cdev_readBytes(devAddr, BMP180_RA_AC1_H, 22, buf2, 1000);
 8001122:	4b44      	ldr	r3, [pc, #272]	; (8001234 <BMP180_loadCalibration+0x118>)
 8001124:	7818      	ldrb	r0, [r3, #0]
 8001126:	463a      	mov	r2, r7
 8001128:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800112c:	9300      	str	r3, [sp, #0]
 800112e:	4613      	mov	r3, r2
 8001130:	2216      	movs	r2, #22
 8001132:	21aa      	movs	r1, #170	; 0xaa
 8001134:	f000 faa6 	bl	8001684 <I2Cdev_readBytes>
    ac1 = ((int16_t)buf2[0] << 8) + buf2[1];
 8001138:	783b      	ldrb	r3, [r7, #0]
 800113a:	b29b      	uxth	r3, r3
 800113c:	021b      	lsls	r3, r3, #8
 800113e:	b29a      	uxth	r2, r3
 8001140:	787b      	ldrb	r3, [r7, #1]
 8001142:	b29b      	uxth	r3, r3
 8001144:	4413      	add	r3, r2
 8001146:	b29b      	uxth	r3, r3
 8001148:	b21a      	sxth	r2, r3
 800114a:	4b3b      	ldr	r3, [pc, #236]	; (8001238 <BMP180_loadCalibration+0x11c>)
 800114c:	801a      	strh	r2, [r3, #0]
    ac2 = ((int16_t)buf2[2] << 8) + buf2[3];
 800114e:	78bb      	ldrb	r3, [r7, #2]
 8001150:	b29b      	uxth	r3, r3
 8001152:	021b      	lsls	r3, r3, #8
 8001154:	b29a      	uxth	r2, r3
 8001156:	78fb      	ldrb	r3, [r7, #3]
 8001158:	b29b      	uxth	r3, r3
 800115a:	4413      	add	r3, r2
 800115c:	b29b      	uxth	r3, r3
 800115e:	b21a      	sxth	r2, r3
 8001160:	4b36      	ldr	r3, [pc, #216]	; (800123c <BMP180_loadCalibration+0x120>)
 8001162:	801a      	strh	r2, [r3, #0]
    ac3 = ((int16_t)buf2[4] << 8) + buf2[5];
 8001164:	793b      	ldrb	r3, [r7, #4]
 8001166:	b29b      	uxth	r3, r3
 8001168:	021b      	lsls	r3, r3, #8
 800116a:	b29a      	uxth	r2, r3
 800116c:	797b      	ldrb	r3, [r7, #5]
 800116e:	b29b      	uxth	r3, r3
 8001170:	4413      	add	r3, r2
 8001172:	b29b      	uxth	r3, r3
 8001174:	b21a      	sxth	r2, r3
 8001176:	4b32      	ldr	r3, [pc, #200]	; (8001240 <BMP180_loadCalibration+0x124>)
 8001178:	801a      	strh	r2, [r3, #0]
    ac4 = ((uint16_t)buf2[6] << 8) + buf2[7];
 800117a:	79bb      	ldrb	r3, [r7, #6]
 800117c:	b29b      	uxth	r3, r3
 800117e:	021b      	lsls	r3, r3, #8
 8001180:	b29a      	uxth	r2, r3
 8001182:	79fb      	ldrb	r3, [r7, #7]
 8001184:	b29b      	uxth	r3, r3
 8001186:	4413      	add	r3, r2
 8001188:	b29a      	uxth	r2, r3
 800118a:	4b2e      	ldr	r3, [pc, #184]	; (8001244 <BMP180_loadCalibration+0x128>)
 800118c:	801a      	strh	r2, [r3, #0]
    ac5 = ((uint16_t)buf2[8] << 8) + buf2[9];
 800118e:	7a3b      	ldrb	r3, [r7, #8]
 8001190:	b29b      	uxth	r3, r3
 8001192:	021b      	lsls	r3, r3, #8
 8001194:	b29a      	uxth	r2, r3
 8001196:	7a7b      	ldrb	r3, [r7, #9]
 8001198:	b29b      	uxth	r3, r3
 800119a:	4413      	add	r3, r2
 800119c:	b29a      	uxth	r2, r3
 800119e:	4b2a      	ldr	r3, [pc, #168]	; (8001248 <BMP180_loadCalibration+0x12c>)
 80011a0:	801a      	strh	r2, [r3, #0]
    ac6 = ((uint16_t)buf2[10] << 8) + buf2[11];
 80011a2:	7abb      	ldrb	r3, [r7, #10]
 80011a4:	b29b      	uxth	r3, r3
 80011a6:	021b      	lsls	r3, r3, #8
 80011a8:	b29a      	uxth	r2, r3
 80011aa:	7afb      	ldrb	r3, [r7, #11]
 80011ac:	b29b      	uxth	r3, r3
 80011ae:	4413      	add	r3, r2
 80011b0:	b29a      	uxth	r2, r3
 80011b2:	4b26      	ldr	r3, [pc, #152]	; (800124c <BMP180_loadCalibration+0x130>)
 80011b4:	801a      	strh	r2, [r3, #0]
    b1 = ((int16_t)buf2[12] << 8) + buf2[13];
 80011b6:	7b3b      	ldrb	r3, [r7, #12]
 80011b8:	b29b      	uxth	r3, r3
 80011ba:	021b      	lsls	r3, r3, #8
 80011bc:	b29a      	uxth	r2, r3
 80011be:	7b7b      	ldrb	r3, [r7, #13]
 80011c0:	b29b      	uxth	r3, r3
 80011c2:	4413      	add	r3, r2
 80011c4:	b29b      	uxth	r3, r3
 80011c6:	b21a      	sxth	r2, r3
 80011c8:	4b21      	ldr	r3, [pc, #132]	; (8001250 <BMP180_loadCalibration+0x134>)
 80011ca:	801a      	strh	r2, [r3, #0]
    b2 = ((int16_t)buf2[14] << 8) + buf2[15];
 80011cc:	7bbb      	ldrb	r3, [r7, #14]
 80011ce:	b29b      	uxth	r3, r3
 80011d0:	021b      	lsls	r3, r3, #8
 80011d2:	b29a      	uxth	r2, r3
 80011d4:	7bfb      	ldrb	r3, [r7, #15]
 80011d6:	b29b      	uxth	r3, r3
 80011d8:	4413      	add	r3, r2
 80011da:	b29b      	uxth	r3, r3
 80011dc:	b21a      	sxth	r2, r3
 80011de:	4b1d      	ldr	r3, [pc, #116]	; (8001254 <BMP180_loadCalibration+0x138>)
 80011e0:	801a      	strh	r2, [r3, #0]
    mb = ((int16_t)buf2[16] << 8) + buf2[17];
 80011e2:	7c3b      	ldrb	r3, [r7, #16]
 80011e4:	b29b      	uxth	r3, r3
 80011e6:	021b      	lsls	r3, r3, #8
 80011e8:	b29a      	uxth	r2, r3
 80011ea:	7c7b      	ldrb	r3, [r7, #17]
 80011ec:	b29b      	uxth	r3, r3
 80011ee:	4413      	add	r3, r2
 80011f0:	b29b      	uxth	r3, r3
 80011f2:	b21a      	sxth	r2, r3
 80011f4:	4b18      	ldr	r3, [pc, #96]	; (8001258 <BMP180_loadCalibration+0x13c>)
 80011f6:	801a      	strh	r2, [r3, #0]
    mc = ((int16_t)buf2[18] << 8) + buf2[19];
 80011f8:	7cbb      	ldrb	r3, [r7, #18]
 80011fa:	b29b      	uxth	r3, r3
 80011fc:	021b      	lsls	r3, r3, #8
 80011fe:	b29a      	uxth	r2, r3
 8001200:	7cfb      	ldrb	r3, [r7, #19]
 8001202:	b29b      	uxth	r3, r3
 8001204:	4413      	add	r3, r2
 8001206:	b29b      	uxth	r3, r3
 8001208:	b21a      	sxth	r2, r3
 800120a:	4b14      	ldr	r3, [pc, #80]	; (800125c <BMP180_loadCalibration+0x140>)
 800120c:	801a      	strh	r2, [r3, #0]
    md = ((int16_t)buf2[20] << 8) + buf2[21];
 800120e:	7d3b      	ldrb	r3, [r7, #20]
 8001210:	b29b      	uxth	r3, r3
 8001212:	021b      	lsls	r3, r3, #8
 8001214:	b29a      	uxth	r2, r3
 8001216:	7d7b      	ldrb	r3, [r7, #21]
 8001218:	b29b      	uxth	r3, r3
 800121a:	4413      	add	r3, r2
 800121c:	b29b      	uxth	r3, r3
 800121e:	b21a      	sxth	r2, r3
 8001220:	4b0f      	ldr	r3, [pc, #60]	; (8001260 <BMP180_loadCalibration+0x144>)
 8001222:	801a      	strh	r2, [r3, #0]
    calibrationLoaded = true;
 8001224:	4b0f      	ldr	r3, [pc, #60]	; (8001264 <BMP180_loadCalibration+0x148>)
 8001226:	2201      	movs	r2, #1
 8001228:	601a      	str	r2, [r3, #0]
}
 800122a:	bf00      	nop
 800122c:	3718      	adds	r7, #24
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	20000000 	.word	0x20000000
 8001238:	20000208 	.word	0x20000208
 800123c:	2000020a 	.word	0x2000020a
 8001240:	2000020c 	.word	0x2000020c
 8001244:	20000218 	.word	0x20000218
 8001248:	2000021a 	.word	0x2000021a
 800124c:	2000021c 	.word	0x2000021c
 8001250:	2000020e 	.word	0x2000020e
 8001254:	20000210 	.word	0x20000210
 8001258:	20000212 	.word	0x20000212
 800125c:	20000214 	.word	0x20000214
 8001260:	20000216 	.word	0x20000216
 8001264:	20000204 	.word	0x20000204

08001268 <BMP180_setControl>:
{
    I2Cdev_readByte(devAddr, BMP180_RA_CONTROL, buffer, 1000);
    return buffer[0];
}
void BMP180_setControl(uint8_t value)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b082      	sub	sp, #8
 800126c:	af00      	add	r7, sp, #0
 800126e:	4603      	mov	r3, r0
 8001270:	71fb      	strb	r3, [r7, #7]
    I2Cdev_writeByte(devAddr, BMP180_RA_CONTROL, value);
 8001272:	4b07      	ldr	r3, [pc, #28]	; (8001290 <BMP180_setControl+0x28>)
 8001274:	781b      	ldrb	r3, [r3, #0]
 8001276:	79fa      	ldrb	r2, [r7, #7]
 8001278:	21f4      	movs	r1, #244	; 0xf4
 800127a:	4618      	mov	r0, r3
 800127c:	f000 fa3a 	bl	80016f4 <I2Cdev_writeByte>
    measureMode = value;
 8001280:	4a04      	ldr	r2, [pc, #16]	; (8001294 <BMP180_setControl+0x2c>)
 8001282:	79fb      	ldrb	r3, [r7, #7]
 8001284:	7013      	strb	r3, [r2, #0]
}
 8001286:	bf00      	nop
 8001288:	3708      	adds	r7, #8
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	20000000 	.word	0x20000000
 8001294:	20000224 	.word	0x20000224

08001298 <BMP180_getMeasurement2>:

/* measurement register methods */

uint16_t BMP180_getMeasurement2()
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b082      	sub	sp, #8
 800129c:	af02      	add	r7, sp, #8
    I2Cdev_readBytes(devAddr, BMP180_RA_MSB, 2, buffer, 1000);
 800129e:	4b0b      	ldr	r3, [pc, #44]	; (80012cc <BMP180_getMeasurement2+0x34>)
 80012a0:	7818      	ldrb	r0, [r3, #0]
 80012a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012a6:	9300      	str	r3, [sp, #0]
 80012a8:	4b09      	ldr	r3, [pc, #36]	; (80012d0 <BMP180_getMeasurement2+0x38>)
 80012aa:	2202      	movs	r2, #2
 80012ac:	21f6      	movs	r1, #246	; 0xf6
 80012ae:	f000 f9e9 	bl	8001684 <I2Cdev_readBytes>
    return ((uint16_t) buffer[0] << 8) + buffer[1];
 80012b2:	4b07      	ldr	r3, [pc, #28]	; (80012d0 <BMP180_getMeasurement2+0x38>)
 80012b4:	781b      	ldrb	r3, [r3, #0]
 80012b6:	b29b      	uxth	r3, r3
 80012b8:	021b      	lsls	r3, r3, #8
 80012ba:	b29a      	uxth	r2, r3
 80012bc:	4b04      	ldr	r3, [pc, #16]	; (80012d0 <BMP180_getMeasurement2+0x38>)
 80012be:	785b      	ldrb	r3, [r3, #1]
 80012c0:	b29b      	uxth	r3, r3
 80012c2:	4413      	add	r3, r2
 80012c4:	b29b      	uxth	r3, r3
}
 80012c6:	4618      	mov	r0, r3
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	20000000 	.word	0x20000000
 80012d0:	20000200 	.word	0x20000200

080012d4 <BMP180_getMeasurement3>:
uint32_t BMP180_getMeasurement3()
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b082      	sub	sp, #8
 80012d8:	af02      	add	r7, sp, #8
    I2Cdev_readBytes(devAddr, BMP180_RA_MSB, 3, buffer, 1000);
 80012da:	4b0b      	ldr	r3, [pc, #44]	; (8001308 <BMP180_getMeasurement3+0x34>)
 80012dc:	7818      	ldrb	r0, [r3, #0]
 80012de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012e2:	9300      	str	r3, [sp, #0]
 80012e4:	4b09      	ldr	r3, [pc, #36]	; (800130c <BMP180_getMeasurement3+0x38>)
 80012e6:	2203      	movs	r2, #3
 80012e8:	21f6      	movs	r1, #246	; 0xf6
 80012ea:	f000 f9cb 	bl	8001684 <I2Cdev_readBytes>
    return ((uint32_t)buffer[0] << 16) + ((uint16_t)buffer[1] << 8) + buffer[2];
 80012ee:	4b07      	ldr	r3, [pc, #28]	; (800130c <BMP180_getMeasurement3+0x38>)
 80012f0:	781b      	ldrb	r3, [r3, #0]
 80012f2:	041b      	lsls	r3, r3, #16
 80012f4:	4a05      	ldr	r2, [pc, #20]	; (800130c <BMP180_getMeasurement3+0x38>)
 80012f6:	7852      	ldrb	r2, [r2, #1]
 80012f8:	0212      	lsls	r2, r2, #8
 80012fa:	4413      	add	r3, r2
 80012fc:	4a03      	ldr	r2, [pc, #12]	; (800130c <BMP180_getMeasurement3+0x38>)
 80012fe:	7892      	ldrb	r2, [r2, #2]
 8001300:	4413      	add	r3, r2
}
 8001302:	4618      	mov	r0, r3
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}
 8001308:	20000000 	.word	0x20000000
 800130c:	20000200 	.word	0x20000200

08001310 <BMP180_getMeasureDelayMilliseconds>:
uint8_t BMP180_getMeasureDelayMilliseconds(uint8_t mode)
{
 8001310:	b480      	push	{r7}
 8001312:	b083      	sub	sp, #12
 8001314:	af00      	add	r7, sp, #0
 8001316:	4603      	mov	r3, r0
 8001318:	71fb      	strb	r3, [r7, #7]
    if (mode == 0) mode = measureMode;
 800131a:	79fb      	ldrb	r3, [r7, #7]
 800131c:	2b00      	cmp	r3, #0
 800131e:	d102      	bne.n	8001326 <BMP180_getMeasureDelayMilliseconds+0x16>
 8001320:	4b13      	ldr	r3, [pc, #76]	; (8001370 <BMP180_getMeasureDelayMilliseconds+0x60>)
 8001322:	781b      	ldrb	r3, [r3, #0]
 8001324:	71fb      	strb	r3, [r7, #7]
    if (measureMode == 0x2E) return 5;
 8001326:	4b12      	ldr	r3, [pc, #72]	; (8001370 <BMP180_getMeasureDelayMilliseconds+0x60>)
 8001328:	781b      	ldrb	r3, [r3, #0]
 800132a:	2b2e      	cmp	r3, #46	; 0x2e
 800132c:	d101      	bne.n	8001332 <BMP180_getMeasureDelayMilliseconds+0x22>
 800132e:	2305      	movs	r3, #5
 8001330:	e018      	b.n	8001364 <BMP180_getMeasureDelayMilliseconds+0x54>
    else if (measureMode == 0x34) return 5;
 8001332:	4b0f      	ldr	r3, [pc, #60]	; (8001370 <BMP180_getMeasureDelayMilliseconds+0x60>)
 8001334:	781b      	ldrb	r3, [r3, #0]
 8001336:	2b34      	cmp	r3, #52	; 0x34
 8001338:	d101      	bne.n	800133e <BMP180_getMeasureDelayMilliseconds+0x2e>
 800133a:	2305      	movs	r3, #5
 800133c:	e012      	b.n	8001364 <BMP180_getMeasureDelayMilliseconds+0x54>
    else if (measureMode == 0x74) return 8;
 800133e:	4b0c      	ldr	r3, [pc, #48]	; (8001370 <BMP180_getMeasureDelayMilliseconds+0x60>)
 8001340:	781b      	ldrb	r3, [r3, #0]
 8001342:	2b74      	cmp	r3, #116	; 0x74
 8001344:	d101      	bne.n	800134a <BMP180_getMeasureDelayMilliseconds+0x3a>
 8001346:	2308      	movs	r3, #8
 8001348:	e00c      	b.n	8001364 <BMP180_getMeasureDelayMilliseconds+0x54>
    else if (measureMode == 0xB4) return 14;
 800134a:	4b09      	ldr	r3, [pc, #36]	; (8001370 <BMP180_getMeasureDelayMilliseconds+0x60>)
 800134c:	781b      	ldrb	r3, [r3, #0]
 800134e:	2bb4      	cmp	r3, #180	; 0xb4
 8001350:	d101      	bne.n	8001356 <BMP180_getMeasureDelayMilliseconds+0x46>
 8001352:	230e      	movs	r3, #14
 8001354:	e006      	b.n	8001364 <BMP180_getMeasureDelayMilliseconds+0x54>
    else if (measureMode == 0xF4) return 26;
 8001356:	4b06      	ldr	r3, [pc, #24]	; (8001370 <BMP180_getMeasureDelayMilliseconds+0x60>)
 8001358:	781b      	ldrb	r3, [r3, #0]
 800135a:	2bf4      	cmp	r3, #244	; 0xf4
 800135c:	d101      	bne.n	8001362 <BMP180_getMeasureDelayMilliseconds+0x52>
 800135e:	231a      	movs	r3, #26
 8001360:	e000      	b.n	8001364 <BMP180_getMeasureDelayMilliseconds+0x54>
    return 0; // invalid mode
 8001362:	2300      	movs	r3, #0
}
 8001364:	4618      	mov	r0, r3
 8001366:	370c      	adds	r7, #12
 8001368:	46bd      	mov	sp, r7
 800136a:	bc80      	pop	{r7}
 800136c:	4770      	bx	lr
 800136e:	bf00      	nop
 8001370:	20000224 	.word	0x20000224

08001374 <BMP180_getRawTemperature>:
    else if (measureMode == 0xF4) return 25500;
    return 0; // invalid mode
}

uint16_t BMP180_getRawTemperature()
{
 8001374:	b580      	push	{r7, lr}
 8001376:	af00      	add	r7, sp, #0
    if (measureMode == 0x2E) return BMP180_getMeasurement2();
 8001378:	4b05      	ldr	r3, [pc, #20]	; (8001390 <BMP180_getRawTemperature+0x1c>)
 800137a:	781b      	ldrb	r3, [r3, #0]
 800137c:	2b2e      	cmp	r3, #46	; 0x2e
 800137e:	d103      	bne.n	8001388 <BMP180_getRawTemperature+0x14>
 8001380:	f7ff ff8a 	bl	8001298 <BMP180_getMeasurement2>
 8001384:	4603      	mov	r3, r0
 8001386:	e000      	b.n	800138a <BMP180_getRawTemperature+0x16>
    return 0; // wrong measurement mode for temperature request
 8001388:	2300      	movs	r3, #0
}
 800138a:	4618      	mov	r0, r3
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	20000224 	.word	0x20000224

08001394 <BMP180_getTemperatureC>:

float BMP180_getTemperatureC()
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b084      	sub	sp, #16
 8001398:	af00      	add	r7, sp, #0
        X1 = (UT - AC6) * AC5 / 2^15
        X2 = MC * 2^11 / (X1 + MD)
        B5 = X1 + X2
        T = (B5 + 8) / 2^4
    */
    int32_t ut = BMP180_getRawTemperature();
 800139a:	f7ff ffeb 	bl	8001374 <BMP180_getRawTemperature>
 800139e:	4603      	mov	r3, r0
 80013a0:	60fb      	str	r3, [r7, #12]
    int32_t x1 = ((ut - (int32_t)ac6) * (int32_t)ac5) >> 15;
 80013a2:	4b17      	ldr	r3, [pc, #92]	; (8001400 <BMP180_getTemperatureC+0x6c>)
 80013a4:	881b      	ldrh	r3, [r3, #0]
 80013a6:	461a      	mov	r2, r3
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	1a9b      	subs	r3, r3, r2
 80013ac:	4a15      	ldr	r2, [pc, #84]	; (8001404 <BMP180_getTemperatureC+0x70>)
 80013ae:	8812      	ldrh	r2, [r2, #0]
 80013b0:	fb02 f303 	mul.w	r3, r2, r3
 80013b4:	13db      	asrs	r3, r3, #15
 80013b6:	60bb      	str	r3, [r7, #8]
    int32_t x2 = ((int32_t)mc << 11) / (x1 + md);
 80013b8:	4b13      	ldr	r3, [pc, #76]	; (8001408 <BMP180_getTemperatureC+0x74>)
 80013ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013be:	02da      	lsls	r2, r3, #11
 80013c0:	4b12      	ldr	r3, [pc, #72]	; (800140c <BMP180_getTemperatureC+0x78>)
 80013c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013c6:	4619      	mov	r1, r3
 80013c8:	68bb      	ldr	r3, [r7, #8]
 80013ca:	440b      	add	r3, r1
 80013cc:	fb92 f3f3 	sdiv	r3, r2, r3
 80013d0:	607b      	str	r3, [r7, #4]
    b5 = x1 + x2;
 80013d2:	68ba      	ldr	r2, [r7, #8]
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	4413      	add	r3, r2
 80013d8:	4a0d      	ldr	r2, [pc, #52]	; (8001410 <BMP180_getTemperatureC+0x7c>)
 80013da:	6013      	str	r3, [r2, #0]
    return (float)((b5 + 8) >> 4) / 10.0f;
 80013dc:	4b0c      	ldr	r3, [pc, #48]	; (8001410 <BMP180_getTemperatureC+0x7c>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	3308      	adds	r3, #8
 80013e2:	111b      	asrs	r3, r3, #4
 80013e4:	4618      	mov	r0, r3
 80013e6:	f7ff fc59 	bl	8000c9c <__aeabi_i2f>
 80013ea:	4603      	mov	r3, r0
 80013ec:	4909      	ldr	r1, [pc, #36]	; (8001414 <BMP180_getTemperatureC+0x80>)
 80013ee:	4618      	mov	r0, r3
 80013f0:	f7ff fd5c 	bl	8000eac <__aeabi_fdiv>
 80013f4:	4603      	mov	r3, r0
}
 80013f6:	4618      	mov	r0, r3
 80013f8:	3710      	adds	r7, #16
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	2000021c 	.word	0x2000021c
 8001404:	2000021a 	.word	0x2000021a
 8001408:	20000214 	.word	0x20000214
 800140c:	20000216 	.word	0x20000216
 8001410:	20000220 	.word	0x20000220
 8001414:	41200000 	.word	0x41200000

08001418 <BMP180_getRawPressure>:
{
    return BMP180_getTemperatureC() * 9.0f / 5.0f + 32;
}

uint32_t BMP180_getRawPressure()
{
 8001418:	b580      	push	{r7, lr}
 800141a:	af00      	add	r7, sp, #0
    if (measureMode & 0x34) return BMP180_getMeasurement3() >> (8 - ((measureMode & 0xC0) >> 6));
 800141c:	4b0a      	ldr	r3, [pc, #40]	; (8001448 <BMP180_getRawPressure+0x30>)
 800141e:	781b      	ldrb	r3, [r3, #0]
 8001420:	f003 0334 	and.w	r3, r3, #52	; 0x34
 8001424:	2b00      	cmp	r3, #0
 8001426:	d00b      	beq.n	8001440 <BMP180_getRawPressure+0x28>
 8001428:	f7ff ff54 	bl	80012d4 <BMP180_getMeasurement3>
 800142c:	4602      	mov	r2, r0
 800142e:	4b06      	ldr	r3, [pc, #24]	; (8001448 <BMP180_getRawPressure+0x30>)
 8001430:	781b      	ldrb	r3, [r3, #0]
 8001432:	099b      	lsrs	r3, r3, #6
 8001434:	b2db      	uxtb	r3, r3
 8001436:	f1c3 0308 	rsb	r3, r3, #8
 800143a:	fa22 f303 	lsr.w	r3, r2, r3
 800143e:	e000      	b.n	8001442 <BMP180_getRawPressure+0x2a>
    return 0; // wrong measurement mode for pressure request
 8001440:	2300      	movs	r3, #0
}
 8001442:	4618      	mov	r0, r3
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	20000224 	.word	0x20000224

0800144c <BMP180_getPressure>:

float BMP180_getPressure()
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b08a      	sub	sp, #40	; 0x28
 8001450:	af00      	add	r7, sp, #0
        X1 = (p / 2^8) * (p / 2^8)
        X1 = (X1 * 3038) / 2^16
        X2 = (-7357 * p) / 2^16
        p = p + (X1 + X2 + 3791) / 2^4
    */
    uint32_t up = BMP180_getRawPressure();
 8001452:	f7ff ffe1 	bl	8001418 <BMP180_getRawPressure>
 8001456:	6238      	str	r0, [r7, #32]
    uint8_t oss = (measureMode & 0xC0) >> 6;
 8001458:	4b49      	ldr	r3, [pc, #292]	; (8001580 <BMP180_getPressure+0x134>)
 800145a:	781b      	ldrb	r3, [r3, #0]
 800145c:	099b      	lsrs	r3, r3, #6
 800145e:	77fb      	strb	r3, [r7, #31]
    int32_t p;
    int32_t b6 = b5 - 4000;
 8001460:	4b48      	ldr	r3, [pc, #288]	; (8001584 <BMP180_getPressure+0x138>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f5a3 637a 	sub.w	r3, r3, #4000	; 0xfa0
 8001468:	61bb      	str	r3, [r7, #24]
    int32_t x1 = ((int32_t)b2 * ((b6 * b6) >> 12)) >> 11;
 800146a:	4b47      	ldr	r3, [pc, #284]	; (8001588 <BMP180_getPressure+0x13c>)
 800146c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001470:	4619      	mov	r1, r3
 8001472:	69bb      	ldr	r3, [r7, #24]
 8001474:	69ba      	ldr	r2, [r7, #24]
 8001476:	fb02 f303 	mul.w	r3, r2, r3
 800147a:	131b      	asrs	r3, r3, #12
 800147c:	fb03 f301 	mul.w	r3, r3, r1
 8001480:	12db      	asrs	r3, r3, #11
 8001482:	617b      	str	r3, [r7, #20]
    int32_t x2 = ((int32_t)ac2 * b6) >> 11;
 8001484:	4b41      	ldr	r3, [pc, #260]	; (800158c <BMP180_getPressure+0x140>)
 8001486:	f9b3 3000 	ldrsh.w	r3, [r3]
 800148a:	461a      	mov	r2, r3
 800148c:	69bb      	ldr	r3, [r7, #24]
 800148e:	fb03 f302 	mul.w	r3, r3, r2
 8001492:	12db      	asrs	r3, r3, #11
 8001494:	613b      	str	r3, [r7, #16]
    int32_t x3 = x1 + x2;
 8001496:	697a      	ldr	r2, [r7, #20]
 8001498:	693b      	ldr	r3, [r7, #16]
 800149a:	4413      	add	r3, r2
 800149c:	60fb      	str	r3, [r7, #12]
    int32_t b3 = ((((int32_t)ac1 * 4 + x3) << oss) + 2) >> 2;
 800149e:	4b3c      	ldr	r3, [pc, #240]	; (8001590 <BMP180_getPressure+0x144>)
 80014a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014a4:	009a      	lsls	r2, r3, #2
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	441a      	add	r2, r3
 80014aa:	7ffb      	ldrb	r3, [r7, #31]
 80014ac:	fa02 f303 	lsl.w	r3, r2, r3
 80014b0:	3302      	adds	r3, #2
 80014b2:	109b      	asrs	r3, r3, #2
 80014b4:	60bb      	str	r3, [r7, #8]
    x1 = ((int32_t)ac3 * b6) >> 13;
 80014b6:	4b37      	ldr	r3, [pc, #220]	; (8001594 <BMP180_getPressure+0x148>)
 80014b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014bc:	461a      	mov	r2, r3
 80014be:	69bb      	ldr	r3, [r7, #24]
 80014c0:	fb03 f302 	mul.w	r3, r3, r2
 80014c4:	135b      	asrs	r3, r3, #13
 80014c6:	617b      	str	r3, [r7, #20]
    x2 = ((int32_t)b1 * ((b6 * b6) >> 12)) >> 16;
 80014c8:	4b33      	ldr	r3, [pc, #204]	; (8001598 <BMP180_getPressure+0x14c>)
 80014ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014ce:	4619      	mov	r1, r3
 80014d0:	69bb      	ldr	r3, [r7, #24]
 80014d2:	69ba      	ldr	r2, [r7, #24]
 80014d4:	fb02 f303 	mul.w	r3, r2, r3
 80014d8:	131b      	asrs	r3, r3, #12
 80014da:	fb03 f301 	mul.w	r3, r3, r1
 80014de:	141b      	asrs	r3, r3, #16
 80014e0:	613b      	str	r3, [r7, #16]
    x3 = ((x1 + x2) + 2) >> 2;
 80014e2:	697a      	ldr	r2, [r7, #20]
 80014e4:	693b      	ldr	r3, [r7, #16]
 80014e6:	4413      	add	r3, r2
 80014e8:	3302      	adds	r3, #2
 80014ea:	109b      	asrs	r3, r3, #2
 80014ec:	60fb      	str	r3, [r7, #12]
    uint32_t b4 = ((uint32_t)ac4 * (uint32_t)(x3 + 32768)) >> 15;
 80014ee:	4b2b      	ldr	r3, [pc, #172]	; (800159c <BMP180_getPressure+0x150>)
 80014f0:	881b      	ldrh	r3, [r3, #0]
 80014f2:	461a      	mov	r2, r3
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80014fa:	fb03 f302 	mul.w	r3, r3, r2
 80014fe:	0bdb      	lsrs	r3, r3, #15
 8001500:	607b      	str	r3, [r7, #4]
    uint32_t b7 = ((uint32_t)up - b3) * (uint32_t)(50000UL >> oss);
 8001502:	68bb      	ldr	r3, [r7, #8]
 8001504:	6a3a      	ldr	r2, [r7, #32]
 8001506:	1ad3      	subs	r3, r2, r3
 8001508:	7ffa      	ldrb	r2, [r7, #31]
 800150a:	f24c 3150 	movw	r1, #50000	; 0xc350
 800150e:	fa21 f202 	lsr.w	r2, r1, r2
 8001512:	fb02 f303 	mul.w	r3, r2, r3
 8001516:	603b      	str	r3, [r7, #0]
    if (b7 < 0x80000000)
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	2b00      	cmp	r3, #0
 800151c:	db06      	blt.n	800152c <BMP180_getPressure+0xe0>
    {
        p = (b7 << 1) / b4;
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	005a      	lsls	r2, r3, #1
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	fbb2 f3f3 	udiv	r3, r2, r3
 8001528:	627b      	str	r3, [r7, #36]	; 0x24
 800152a:	e005      	b.n	8001538 <BMP180_getPressure+0xec>
    }
    else
    {
        p = (b7 / b4) << 1;
 800152c:	683a      	ldr	r2, [r7, #0]
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	fbb2 f3f3 	udiv	r3, r2, r3
 8001534:	005b      	lsls	r3, r3, #1
 8001536:	627b      	str	r3, [r7, #36]	; 0x24
    }
    x1 = (p >> 8) * (p >> 8);
 8001538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800153a:	121b      	asrs	r3, r3, #8
 800153c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800153e:	1212      	asrs	r2, r2, #8
 8001540:	fb02 f303 	mul.w	r3, r2, r3
 8001544:	617b      	str	r3, [r7, #20]
    x1 = (x1 * 3038) >> 16;
 8001546:	697b      	ldr	r3, [r7, #20]
 8001548:	f640 32de 	movw	r2, #3038	; 0xbde
 800154c:	fb02 f303 	mul.w	r3, r2, r3
 8001550:	141b      	asrs	r3, r3, #16
 8001552:	617b      	str	r3, [r7, #20]
    x2 = (-7357 * p) >> 16;
 8001554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001556:	4a12      	ldr	r2, [pc, #72]	; (80015a0 <BMP180_getPressure+0x154>)
 8001558:	fb02 f303 	mul.w	r3, r2, r3
 800155c:	141b      	asrs	r3, r3, #16
 800155e:	613b      	str	r3, [r7, #16]
    return p + ((x1 + x2 + (int32_t)3791) >> 4);
 8001560:	697a      	ldr	r2, [r7, #20]
 8001562:	693b      	ldr	r3, [r7, #16]
 8001564:	4413      	add	r3, r2
 8001566:	f603 63cf 	addw	r3, r3, #3791	; 0xecf
 800156a:	111a      	asrs	r2, r3, #4
 800156c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800156e:	4413      	add	r3, r2
 8001570:	4618      	mov	r0, r3
 8001572:	f7ff fb93 	bl	8000c9c <__aeabi_i2f>
 8001576:	4603      	mov	r3, r0
}
 8001578:	4618      	mov	r0, r3
 800157a:	3728      	adds	r7, #40	; 0x28
 800157c:	46bd      	mov	sp, r7
 800157e:	bd80      	pop	{r7, pc}
 8001580:	20000224 	.word	0x20000224
 8001584:	20000220 	.word	0x20000220
 8001588:	20000210 	.word	0x20000210
 800158c:	2000020a 	.word	0x2000020a
 8001590:	20000208 	.word	0x20000208
 8001594:	2000020c 	.word	0x2000020c
 8001598:	2000020e 	.word	0x2000020e
 800159c:	20000218 	.word	0x20000218
 80015a0:	ffffe343 	.word	0xffffe343
 80015a4:	00000000 	.word	0x00000000

080015a8 <BMP180_getAltitude>:

float BMP180_getAltitude(float pressure, float seaLevelPressure)
{
 80015a8:	b590      	push	{r4, r7, lr}
 80015aa:	b083      	sub	sp, #12
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
 80015b0:	6039      	str	r1, [r7, #0]
    if (seaLevelPressure == 0) seaLevelPressure = 101325;
 80015b2:	f04f 0100 	mov.w	r1, #0
 80015b6:	6838      	ldr	r0, [r7, #0]
 80015b8:	f7ff fd58 	bl	800106c <__aeabi_fcmpeq>
 80015bc:	4603      	mov	r3, r0
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d001      	beq.n	80015c6 <BMP180_getAltitude+0x1e>
 80015c2:	4b1b      	ldr	r3, [pc, #108]	; (8001630 <BMP180_getAltitude+0x88>)
 80015c4:	603b      	str	r3, [r7, #0]
    return 44330 * (1.0 - pow(pressure / seaLevelPressure, 0.1903));
 80015c6:	6839      	ldr	r1, [r7, #0]
 80015c8:	6878      	ldr	r0, [r7, #4]
 80015ca:	f7ff fc6f 	bl	8000eac <__aeabi_fdiv>
 80015ce:	4603      	mov	r3, r0
 80015d0:	4618      	mov	r0, r3
 80015d2:	f7fe ff29 	bl	8000428 <__aeabi_f2d>
 80015d6:	a312      	add	r3, pc, #72	; (adr r3, 8001620 <BMP180_getAltitude+0x78>)
 80015d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015dc:	f005 fe82 	bl	80072e4 <pow>
 80015e0:	4603      	mov	r3, r0
 80015e2:	460c      	mov	r4, r1
 80015e4:	461a      	mov	r2, r3
 80015e6:	4623      	mov	r3, r4
 80015e8:	f04f 0000 	mov.w	r0, #0
 80015ec:	4911      	ldr	r1, [pc, #68]	; (8001634 <BMP180_getAltitude+0x8c>)
 80015ee:	f7fe fdbb 	bl	8000168 <__aeabi_dsub>
 80015f2:	4603      	mov	r3, r0
 80015f4:	460c      	mov	r4, r1
 80015f6:	4618      	mov	r0, r3
 80015f8:	4621      	mov	r1, r4
 80015fa:	a30b      	add	r3, pc, #44	; (adr r3, 8001628 <BMP180_getAltitude+0x80>)
 80015fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001600:	f7fe ff6a 	bl	80004d8 <__aeabi_dmul>
 8001604:	4603      	mov	r3, r0
 8001606:	460c      	mov	r4, r1
 8001608:	4618      	mov	r0, r3
 800160a:	4621      	mov	r1, r4
 800160c:	f7ff fa3c 	bl	8000a88 <__aeabi_d2f>
 8001610:	4603      	mov	r3, r0
}
 8001612:	4618      	mov	r0, r3
 8001614:	370c      	adds	r7, #12
 8001616:	46bd      	mov	sp, r7
 8001618:	bd90      	pop	{r4, r7, pc}
 800161a:	bf00      	nop
 800161c:	f3af 8000 	nop.w
 8001620:	1a36e2eb 	.word	0x1a36e2eb
 8001624:	3fc85bc0 	.word	0x3fc85bc0
 8001628:	00000000 	.word	0x00000000
 800162c:	40e5a540 	.word	0x40e5a540
 8001630:	47c5e680 	.word	0x47c5e680
 8001634:	3ff00000 	.word	0x3ff00000

08001638 <I2Cdev_init>:


// Hold pointer to inited HAL I2C device
static I2C_HandleTypeDef * I2Cdev_hi2c;
void I2Cdev_init(I2C_HandleTypeDef * hi2c)
{
 8001638:	b480      	push	{r7}
 800163a:	b083      	sub	sp, #12
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
	I2Cdev_hi2c = hi2c;
 8001640:	4a03      	ldr	r2, [pc, #12]	; (8001650 <I2Cdev_init+0x18>)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	6013      	str	r3, [r2, #0]
}
 8001646:	bf00      	nop
 8001648:	370c      	adds	r7, #12
 800164a:	46bd      	mov	sp, r7
 800164c:	bc80      	pop	{r7}
 800164e:	4770      	bx	lr
 8001650:	20000228 	.word	0x20000228

08001654 <I2Cdev_readByte>:
 * @param data Container for byte value read from device
 * @param timeout Optional read timeout in milliseconds (0 to disable, leave off to use default class value in I2Cdev_readTimeout)
 * @return Status of read operation (true = success)
 */
uint8_t I2Cdev_readByte(uint8_t devAddr, uint8_t regAddr, uint8_t *data, uint16_t timeout)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b084      	sub	sp, #16
 8001658:	af02      	add	r7, sp, #8
 800165a:	603a      	str	r2, [r7, #0]
 800165c:	461a      	mov	r2, r3
 800165e:	4603      	mov	r3, r0
 8001660:	71fb      	strb	r3, [r7, #7]
 8001662:	460b      	mov	r3, r1
 8001664:	71bb      	strb	r3, [r7, #6]
 8001666:	4613      	mov	r3, r2
 8001668:	80bb      	strh	r3, [r7, #4]
    return I2Cdev_readBytes(devAddr, regAddr, 1, data, timeout);
 800166a:	79b9      	ldrb	r1, [r7, #6]
 800166c:	79f8      	ldrb	r0, [r7, #7]
 800166e:	88bb      	ldrh	r3, [r7, #4]
 8001670:	9300      	str	r3, [sp, #0]
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	2201      	movs	r2, #1
 8001676:	f000 f805 	bl	8001684 <I2Cdev_readBytes>
 800167a:	4603      	mov	r3, r0
}
 800167c:	4618      	mov	r0, r3
 800167e:	3708      	adds	r7, #8
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}

08001684 <I2Cdev_readBytes>:
 * @param data Buffer to store read data in
 * @param timeout Optional read timeout in milliseconds (0 to disable, leave off to use default class value in I2Cdev_readTimeout)
 * @return Number of bytes read (-1 indicates failure)
 */
uint8_t I2Cdev_readBytes(uint8_t devAddr, uint8_t regAddr, uint8_t length, uint8_t *data, uint16_t timeout)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b086      	sub	sp, #24
 8001688:	af02      	add	r7, sp, #8
 800168a:	603b      	str	r3, [r7, #0]
 800168c:	4603      	mov	r3, r0
 800168e:	71fb      	strb	r3, [r7, #7]
 8001690:	460b      	mov	r3, r1
 8001692:	71bb      	strb	r3, [r7, #6]
 8001694:	4613      	mov	r3, r2
 8001696:	717b      	strb	r3, [r7, #5]
    // Тернарная условная операция
	uint16_t tout = timeout > 0 ? timeout : I2CDEV_DEFAULT_READ_TIMEOUT;
 8001698:	8b3b      	ldrh	r3, [r7, #24]
 800169a:	2b00      	cmp	r3, #0
 800169c:	d001      	beq.n	80016a2 <I2Cdev_readBytes+0x1e>
 800169e:	8b3b      	ldrh	r3, [r7, #24]
 80016a0:	e001      	b.n	80016a6 <I2Cdev_readBytes+0x22>
 80016a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016a6:	81fb      	strh	r3, [r7, #14]

    HAL_I2C_Master_Transmit(I2Cdev_hi2c, devAddr << 1, &regAddr, 1, tout);
 80016a8:	4b11      	ldr	r3, [pc, #68]	; (80016f0 <I2Cdev_readBytes+0x6c>)
 80016aa:	6818      	ldr	r0, [r3, #0]
 80016ac:	79fb      	ldrb	r3, [r7, #7]
 80016ae:	b29b      	uxth	r3, r3
 80016b0:	005b      	lsls	r3, r3, #1
 80016b2:	b299      	uxth	r1, r3
 80016b4:	89fb      	ldrh	r3, [r7, #14]
 80016b6:	1dba      	adds	r2, r7, #6
 80016b8:	9300      	str	r3, [sp, #0]
 80016ba:	2301      	movs	r3, #1
 80016bc:	f001 fe00 	bl	80032c0 <HAL_I2C_Master_Transmit>
    if (HAL_I2C_Master_Receive(I2Cdev_hi2c, devAddr << 1, data, length, tout) == HAL_OK) return length;
 80016c0:	4b0b      	ldr	r3, [pc, #44]	; (80016f0 <I2Cdev_readBytes+0x6c>)
 80016c2:	6818      	ldr	r0, [r3, #0]
 80016c4:	79fb      	ldrb	r3, [r7, #7]
 80016c6:	b29b      	uxth	r3, r3
 80016c8:	005b      	lsls	r3, r3, #1
 80016ca:	b299      	uxth	r1, r3
 80016cc:	797b      	ldrb	r3, [r7, #5]
 80016ce:	b29a      	uxth	r2, r3
 80016d0:	89fb      	ldrh	r3, [r7, #14]
 80016d2:	9300      	str	r3, [sp, #0]
 80016d4:	4613      	mov	r3, r2
 80016d6:	683a      	ldr	r2, [r7, #0]
 80016d8:	f001 fef0 	bl	80034bc <HAL_I2C_Master_Receive>
 80016dc:	4603      	mov	r3, r0
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d101      	bne.n	80016e6 <I2Cdev_readBytes+0x62>
 80016e2:	797b      	ldrb	r3, [r7, #5]
 80016e4:	e000      	b.n	80016e8 <I2Cdev_readBytes+0x64>
    return -1;
 80016e6:	23ff      	movs	r3, #255	; 0xff
}
 80016e8:	4618      	mov	r0, r3
 80016ea:	3710      	adds	r7, #16
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}
 80016f0:	20000228 	.word	0x20000228

080016f4 <I2Cdev_writeByte>:
 * @param regAddr Register address to write to
 * @param data New byte value to write
 * @return Status of operation (true = success)
 */
uint16_t I2Cdev_writeByte(uint8_t devAddr, uint8_t regAddr, uint8_t data)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b082      	sub	sp, #8
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	4603      	mov	r3, r0
 80016fc:	71fb      	strb	r3, [r7, #7]
 80016fe:	460b      	mov	r3, r1
 8001700:	71bb      	strb	r3, [r7, #6]
 8001702:	4613      	mov	r3, r2
 8001704:	717b      	strb	r3, [r7, #5]
    return I2Cdev_writeBytes(devAddr, regAddr, 1, &data);
 8001706:	1d7b      	adds	r3, r7, #5
 8001708:	79b9      	ldrb	r1, [r7, #6]
 800170a:	79f8      	ldrb	r0, [r7, #7]
 800170c:	2201      	movs	r2, #1
 800170e:	f000 f805 	bl	800171c <I2Cdev_writeBytes>
 8001712:	4603      	mov	r3, r0
}
 8001714:	4618      	mov	r0, r3
 8001716:	3708      	adds	r7, #8
 8001718:	46bd      	mov	sp, r7
 800171a:	bd80      	pop	{r7, pc}

0800171c <I2Cdev_writeBytes>:
 * @param length Number of bytes to write
 * @param data Buffer to copy new data from
 * @return Status of operation (true = success)
 */
uint16_t I2Cdev_writeBytes(uint8_t devAddr, uint8_t regAddr, uint8_t length, uint8_t* pData)
{
 800171c:	b590      	push	{r4, r7, lr}
 800171e:	b089      	sub	sp, #36	; 0x24
 8001720:	af04      	add	r7, sp, #16
 8001722:	603b      	str	r3, [r7, #0]
 8001724:	4603      	mov	r3, r0
 8001726:	71fb      	strb	r3, [r7, #7]
 8001728:	460b      	mov	r3, r1
 800172a:	71bb      	strb	r3, [r7, #6]
 800172c:	4613      	mov	r3, r2
 800172e:	717b      	strb	r3, [r7, #5]
    HAL_StatusTypeDef status = HAL_I2C_Mem_Write(I2Cdev_hi2c, devAddr << 1, regAddr, I2C_MEMADD_SIZE_8BIT, pData, length, 1000);
 8001730:	4b10      	ldr	r3, [pc, #64]	; (8001774 <I2Cdev_writeBytes+0x58>)
 8001732:	6818      	ldr	r0, [r3, #0]
 8001734:	79fb      	ldrb	r3, [r7, #7]
 8001736:	b29b      	uxth	r3, r3
 8001738:	005b      	lsls	r3, r3, #1
 800173a:	b299      	uxth	r1, r3
 800173c:	79bb      	ldrb	r3, [r7, #6]
 800173e:	b29c      	uxth	r4, r3
 8001740:	797b      	ldrb	r3, [r7, #5]
 8001742:	b29b      	uxth	r3, r3
 8001744:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001748:	9202      	str	r2, [sp, #8]
 800174a:	9301      	str	r3, [sp, #4]
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	9300      	str	r3, [sp, #0]
 8001750:	2301      	movs	r3, #1
 8001752:	4622      	mov	r2, r4
 8001754:	f002 f8e0 	bl	8003918 <HAL_I2C_Mem_Write>
 8001758:	4603      	mov	r3, r0
 800175a:	73fb      	strb	r3, [r7, #15]
    return status == HAL_OK;
 800175c:	7bfb      	ldrb	r3, [r7, #15]
 800175e:	2b00      	cmp	r3, #0
 8001760:	bf0c      	ite	eq
 8001762:	2301      	moveq	r3, #1
 8001764:	2300      	movne	r3, #0
 8001766:	b2db      	uxtb	r3, r3
 8001768:	b29b      	uxth	r3, r3
}
 800176a:	4618      	mov	r0, r3
 800176c:	3714      	adds	r7, #20
 800176e:	46bd      	mov	sp, r7
 8001770:	bd90      	pop	{r4, r7, pc}
 8001772:	bf00      	nop
 8001774:	20000228 	.word	0x20000228

08001778 <UARTdev_init>:
#include "display2004.h"
#include <string.h>

static UART_HandleTypeDef * UARTdev_huart;
void UARTdev_init(UART_HandleTypeDef * huart)
{
 8001778:	b480      	push	{r7}
 800177a:	b083      	sub	sp, #12
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
	UARTdev_huart = huart;
 8001780:	4a03      	ldr	r2, [pc, #12]	; (8001790 <UARTdev_init+0x18>)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	6013      	str	r3, [r2, #0]
}
 8001786:	bf00      	nop
 8001788:	370c      	adds	r7, #12
 800178a:	46bd      	mov	sp, r7
 800178c:	bc80      	pop	{r7}
 800178e:	4770      	bx	lr
 8001790:	2000022c 	.word	0x2000022c

08001794 <I2C_send>:
	}
	HAL_UART_Transmit(UARTdev_huart, (uint8_t*)"\r\n", 2, HAL_MAX_DELAY);
} */

void I2C_send(uint8_t data, uint8_t flags)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b086      	sub	sp, #24
 8001798:	af02      	add	r7, sp, #8
 800179a:	4603      	mov	r3, r0
 800179c:	460a      	mov	r2, r1
 800179e:	71fb      	strb	r3, [r7, #7]
 80017a0:	4613      	mov	r3, r2
 80017a2:	71bb      	strb	r3, [r7, #6]
	HAL_StatusTypeDef res;
	    for(;;) {                                                                     // бесконечный цикл
	        res = HAL_I2C_IsDeviceReady(&hi2c1, LCD_ADDR, 1, HAL_MAX_DELAY);          // проверяем, готово ли устройство по адресу lcd_addr для связи
 80017a4:	f04f 33ff 	mov.w	r3, #4294967295
 80017a8:	2201      	movs	r2, #1
 80017aa:	214e      	movs	r1, #78	; 0x4e
 80017ac:	4820      	ldr	r0, [pc, #128]	; (8001830 <I2C_send+0x9c>)
 80017ae:	f002 f9ad 	bl	8003b0c <HAL_I2C_IsDeviceReady>
 80017b2:	4603      	mov	r3, r0
 80017b4:	73fb      	strb	r3, [r7, #15]
	        if(res == HAL_OK) break;                                                  // если да, то выходим из бесконечного цикла
 80017b6:	7bfb      	ldrb	r3, [r7, #15]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d000      	beq.n	80017be <I2C_send+0x2a>
	        res = HAL_I2C_IsDeviceReady(&hi2c1, LCD_ADDR, 1, HAL_MAX_DELAY);          // проверяем, готово ли устройство по адресу lcd_addr для связи
 80017bc:	e7f2      	b.n	80017a4 <I2C_send+0x10>
	        if(res == HAL_OK) break;                                                  // если да, то выходим из бесконечного цикла
 80017be:	bf00      	nop
	    }

	uint8_t up = data & 0xF0;                 // операция И с 1111 0000, приводит к обнулению последних бит с 0 по 3, остаются биты с 4 по 7
 80017c0:	79fb      	ldrb	r3, [r7, #7]
 80017c2:	f023 030f 	bic.w	r3, r3, #15
 80017c6:	73bb      	strb	r3, [r7, #14]
	uint8_t lo = (data << 4) & 0xF0;          // тоже самое, но data сдвигается на 4 бита влево, т.е. в этой
 80017c8:	79fb      	ldrb	r3, [r7, #7]
 80017ca:	011b      	lsls	r3, r3, #4
 80017cc:	737b      	strb	r3, [r7, #13]
	                                           // переменной остаются  биты с 0 по 3
	uint8_t data_arr[4];
	data_arr[0] = up|flags|BACKLIGHT|PIN_EN;  // 4-7 биты содержат информацию, биты 0-3 конфигурируют работу
 80017ce:	7bba      	ldrb	r2, [r7, #14]
 80017d0:	79bb      	ldrb	r3, [r7, #6]
 80017d2:	4313      	orrs	r3, r2
 80017d4:	b2db      	uxtb	r3, r3
 80017d6:	f043 030c 	orr.w	r3, r3, #12
 80017da:	b2db      	uxtb	r3, r3
 80017dc:	723b      	strb	r3, [r7, #8]
	data_arr[1] = up|flags|BACKLIGHT;         // ублирование сигнала, на выводе Е в этот раз 0
 80017de:	7bba      	ldrb	r2, [r7, #14]
 80017e0:	79bb      	ldrb	r3, [r7, #6]
 80017e2:	4313      	orrs	r3, r2
 80017e4:	b2db      	uxtb	r3, r3
 80017e6:	f043 0308 	orr.w	r3, r3, #8
 80017ea:	b2db      	uxtb	r3, r3
 80017ec:	727b      	strb	r3, [r7, #9]
	data_arr[2] = lo|flags|BACKLIGHT|PIN_EN;
 80017ee:	7b7a      	ldrb	r2, [r7, #13]
 80017f0:	79bb      	ldrb	r3, [r7, #6]
 80017f2:	4313      	orrs	r3, r2
 80017f4:	b2db      	uxtb	r3, r3
 80017f6:	f043 030c 	orr.w	r3, r3, #12
 80017fa:	b2db      	uxtb	r3, r3
 80017fc:	72bb      	strb	r3, [r7, #10]
	data_arr[3] = lo|flags|BACKLIGHT;
 80017fe:	7b7a      	ldrb	r2, [r7, #13]
 8001800:	79bb      	ldrb	r3, [r7, #6]
 8001802:	4313      	orrs	r3, r2
 8001804:	b2db      	uxtb	r3, r3
 8001806:	f043 0308 	orr.w	r3, r3, #8
 800180a:	b2db      	uxtb	r3, r3
 800180c:	72fb      	strb	r3, [r7, #11]

	HAL_I2C_Master_Transmit(&hi2c1, LCD_ADDR, data_arr, sizeof(data_arr), HAL_MAX_DELAY);
 800180e:	f107 0208 	add.w	r2, r7, #8
 8001812:	f04f 33ff 	mov.w	r3, #4294967295
 8001816:	9300      	str	r3, [sp, #0]
 8001818:	2304      	movs	r3, #4
 800181a:	214e      	movs	r1, #78	; 0x4e
 800181c:	4804      	ldr	r0, [pc, #16]	; (8001830 <I2C_send+0x9c>)
 800181e:	f001 fd4f 	bl	80032c0 <HAL_I2C_Master_Transmit>
	HAL_Delay(LCD_DELAY_MS);
 8001822:	2005      	movs	r0, #5
 8001824:	f000 fd70 	bl	8002308 <HAL_Delay>
}
 8001828:	bf00      	nop
 800182a:	3710      	adds	r7, #16
 800182c:	46bd      	mov	sp, r7
 800182e:	bd80      	pop	{r7, pc}
 8001830:	2000026c 	.word	0x2000026c

08001834 <LCD_SendString>:


void LCD_SendString(char *str)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b082      	sub	sp, #8
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
    // *char по сути является строкой
	while(*str) {                                   // пока строчка не закончится
 800183c:	e008      	b.n	8001850 <LCD_SendString+0x1c>
		I2C_send((uint8_t)(*str), 1);               // передача первого символа строки
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	781b      	ldrb	r3, [r3, #0]
 8001842:	2101      	movs	r1, #1
 8001844:	4618      	mov	r0, r3
 8001846:	f7ff ffa5 	bl	8001794 <I2C_send>
        str++;                                      // сдвиг строки налево на 1 символ
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	3301      	adds	r3, #1
 800184e:	607b      	str	r3, [r7, #4]
	while(*str) {                                   // пока строчка не закончится
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	781b      	ldrb	r3, [r3, #0]
 8001854:	2b00      	cmp	r3, #0
 8001856:	d1f2      	bne.n	800183e <LCD_SendString+0xa>
    }
}
 8001858:	bf00      	nop
 800185a:	3708      	adds	r7, #8
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}

08001860 <LCD_Setup>:


void LCD_Setup()
{
 8001860:	b580      	push	{r7, lr}
 8001862:	af00      	add	r7, sp, #0
	I2C_send(0b00110000,0);   // 8ми битный интерфейс
 8001864:	2100      	movs	r1, #0
 8001866:	2030      	movs	r0, #48	; 0x30
 8001868:	f7ff ff94 	bl	8001794 <I2C_send>
	I2C_send(0b00000010,0);   // установка курсора в начале строки
 800186c:	2100      	movs	r1, #0
 800186e:	2002      	movs	r0, #2
 8001870:	f7ff ff90 	bl	8001794 <I2C_send>
	I2C_send(0b00001100,0);   // нормальный режим работы
 8001874:	2100      	movs	r1, #0
 8001876:	200c      	movs	r0, #12
 8001878:	f7ff ff8c 	bl	8001794 <I2C_send>
	I2C_send(0b00000001,0);   // очистка дисплея
 800187c:	2100      	movs	r1, #0
 800187e:	2001      	movs	r0, #1
 8001880:	f7ff ff88 	bl	8001794 <I2C_send>
}
 8001884:	bf00      	nop
 8001886:	bd80      	pop	{r7, pc}

08001888 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001888:	b590      	push	{r4, r7, lr}
 800188a:	b0e3      	sub	sp, #396	; 0x18c
 800188c:	af02      	add	r7, sp, #8

	float t,p,a,temp,hum;
	char msg[100];                 // массив для хранения строки для дисплея
	uint16_t ADC_temp;
	uint16_t ADC_hum;
	int out_temp[21] ={1911, 1958,	2011, 2064, 2113, 2168, 2221, 2273, 2327, 2380, 2433, 2485, 2538, 2590, 2641, 2694, 2749, 2792, 2851, 2897, 2949};
 800188e:	4ab2      	ldr	r2, [pc, #712]	; (8001b58 <main+0x2d0>)
 8001890:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001894:	4611      	mov	r1, r2
 8001896:	2254      	movs	r2, #84	; 0x54
 8001898:	4618      	mov	r0, r3
 800189a:	f003 fccb 	bl	8005234 <memcpy>


  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800189e:	f000 fcd1 	bl	8002244 <HAL_Init>

  /* USER CODE BEGIN Init */
  I2Cdev_init(&hi2c1);
 80018a2:	48ae      	ldr	r0, [pc, #696]	; (8001b5c <main+0x2d4>)
 80018a4:	f7ff fec8 	bl	8001638 <I2Cdev_init>
  UARTdev_init(&huart1);
 80018a8:	48ad      	ldr	r0, [pc, #692]	; (8001b60 <main+0x2d8>)
 80018aa:	f7ff ff65 	bl	8001778 <UARTdev_init>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80018ae:	f000 f969 	bl	8001b84 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80018b2:	f000 fa97 	bl	8001de4 <MX_GPIO_Init>
  MX_ADC1_Init();
 80018b6:	f000 f9c1 	bl	8001c3c <MX_ADC1_Init>
  MX_ADC2_Init();
 80018ba:	f000 f9fd 	bl	8001cb8 <MX_ADC2_Init>
  MX_I2C1_Init();
 80018be:	f000 fa39 	bl	8001d34 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 80018c2:	f000 fa65 	bl	8001d90 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  while(!BMP180_testConnection()) ;
 80018c6:	bf00      	nop
 80018c8:	f7ff fc12 	bl	80010f0 <BMP180_testConnection>
 80018cc:	4603      	mov	r3, r0
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d0fa      	beq.n	80018c8 <main+0x40>
  BMP180_initialize();
 80018d2:	f7ff fbfd 	bl	80010d0 <BMP180_initialize>
  LCD_Setup();
 80018d6:	f7ff ffc3 	bl	8001860 <LCD_Setup>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_ADC_Start(&hadc1);                              // запуск АЦП
 80018da:	48a2      	ldr	r0, [pc, #648]	; (8001b64 <main+0x2dc>)
 80018dc:	f000 fe0e 	bl	80024fc <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1,100);              // ожидание вычисления
 80018e0:	2164      	movs	r1, #100	; 0x64
 80018e2:	48a0      	ldr	r0, [pc, #640]	; (8001b64 <main+0x2dc>)
 80018e4:	f000 fee4 	bl	80026b0 <HAL_ADC_PollForConversion>
	  ADC_hum = HAL_ADC_GetValue(&hadc1);                 // запись результата в переменную
 80018e8:	489e      	ldr	r0, [pc, #632]	; (8001b64 <main+0x2dc>)
 80018ea:	f000 ffdb 	bl	80028a4 <HAL_ADC_GetValue>
 80018ee:	4603      	mov	r3, r0
 80018f0:	f8a7 3176 	strh.w	r3, [r7, #374]	; 0x176
	  HAL_ADC_Stop(&hadc1);                               // остановка АЦП
 80018f4:	489b      	ldr	r0, [pc, #620]	; (8001b64 <main+0x2dc>)
 80018f6:	f000 feaf 	bl	8002658 <HAL_ADC_Stop>

	  hum = ADC_hum;
 80018fa:	f8b7 3176 	ldrh.w	r3, [r7, #374]	; 0x176
 80018fe:	4618      	mov	r0, r3
 8001900:	f7ff f9c8 	bl	8000c94 <__aeabi_ui2f>
 8001904:	4603      	mov	r3, r0
 8001906:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
	  hum *= 0.027;
 800190a:	f8d7 0170 	ldr.w	r0, [r7, #368]	; 0x170
 800190e:	f7fe fd8b 	bl	8000428 <__aeabi_f2d>
 8001912:	a38f      	add	r3, pc, #572	; (adr r3, 8001b50 <main+0x2c8>)
 8001914:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001918:	f7fe fdde 	bl	80004d8 <__aeabi_dmul>
 800191c:	4603      	mov	r3, r0
 800191e:	460c      	mov	r4, r1
 8001920:	4618      	mov	r0, r3
 8001922:	4621      	mov	r1, r4
 8001924:	f7ff f8b0 	bl	8000a88 <__aeabi_d2f>
 8001928:	4603      	mov	r3, r0
 800192a:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170

	  HAL_ADC_Start(&hadc2);                              // запуск АЦП 2
 800192e:	488e      	ldr	r0, [pc, #568]	; (8001b68 <main+0x2e0>)
 8001930:	f000 fde4 	bl	80024fc <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc2,100);              // ожидание вычисления
 8001934:	2164      	movs	r1, #100	; 0x64
 8001936:	488c      	ldr	r0, [pc, #560]	; (8001b68 <main+0x2e0>)
 8001938:	f000 feba 	bl	80026b0 <HAL_ADC_PollForConversion>
	  ADC_temp = HAL_ADC_GetValue(&hadc2);                // запись результата в переменную
 800193c:	488a      	ldr	r0, [pc, #552]	; (8001b68 <main+0x2e0>)
 800193e:	f000 ffb1 	bl	80028a4 <HAL_ADC_GetValue>
 8001942:	4603      	mov	r3, r0
 8001944:	f8a7 316e 	strh.w	r3, [r7, #366]	; 0x16e
	  HAL_ADC_Stop(&hadc1);                               // остановка АЦП
 8001948:	4886      	ldr	r0, [pc, #536]	; (8001b64 <main+0x2dc>)
 800194a:	f000 fe85 	bl	8002658 <HAL_ADC_Stop>

	  if (ADC_temp < out_temp[0] || ADC_temp > out_temp[20] ) error = 1;
 800194e:	f8b7 216e 	ldrh.w	r2, [r7, #366]	; 0x16e
 8001952:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001956:	429a      	cmp	r2, r3
 8001958:	db05      	blt.n	8001966 <main+0xde>
 800195a:	f8b7 216e 	ldrh.w	r2, [r7, #366]	; 0x16e
 800195e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8001962:	429a      	cmp	r2, r3
 8001964:	dd03      	ble.n	800196e <main+0xe6>
 8001966:	2301      	movs	r3, #1
 8001968:	f887 316d 	strb.w	r3, [r7, #365]	; 0x16d
 800196c:	e002      	b.n	8001974 <main+0xec>
	  else error = 0;
 800196e:	2300      	movs	r3, #0
 8001970:	f887 316d 	strb.w	r3, [r7, #365]	; 0x16d

	  for (int i=0; i<21; i++)
 8001974:	2300      	movs	r3, #0
 8001976:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
 800197a:	e062      	b.n	8001a42 <main+0x1ba>
	  {
		  if (ADC_temp <out_temp[i+1] && ADC_temp > out_temp[i] )
 800197c:	f8b7 216e 	ldrh.w	r2, [r7, #366]	; 0x16e
 8001980:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8001984:	3301      	adds	r3, #1
 8001986:	009b      	lsls	r3, r3, #2
 8001988:	f507 71c0 	add.w	r1, r7, #384	; 0x180
 800198c:	440b      	add	r3, r1
 800198e:	f853 3ce0 	ldr.w	r3, [r3, #-224]
 8001992:	429a      	cmp	r2, r3
 8001994:	da50      	bge.n	8001a38 <main+0x1b0>
 8001996:	f8b7 216e 	ldrh.w	r2, [r7, #366]	; 0x16e
 800199a:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 800199e:	009b      	lsls	r3, r3, #2
 80019a0:	f507 71c0 	add.w	r1, r7, #384	; 0x180
 80019a4:	440b      	add	r3, r1
 80019a6:	f853 3ce0 	ldr.w	r3, [r3, #-224]
 80019aa:	429a      	cmp	r2, r3
 80019ac:	dd44      	ble.n	8001a38 <main+0x1b0>
		  {
			  int x = ADC_temp - out_temp[i];
 80019ae:	f8b7 216e 	ldrh.w	r2, [r7, #366]	; 0x16e
 80019b2:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 80019b6:	009b      	lsls	r3, r3, #2
 80019b8:	f507 71c0 	add.w	r1, r7, #384	; 0x180
 80019bc:	440b      	add	r3, r1
 80019be:	f853 3ce0 	ldr.w	r3, [r3, #-224]
 80019c2:	1ad3      	subs	r3, r2, r3
 80019c4:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
			  int xx = out_temp[i+1] - out_temp[i];
 80019c8:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 80019cc:	3301      	adds	r3, #1
 80019ce:	009b      	lsls	r3, r3, #2
 80019d0:	f507 72c0 	add.w	r2, r7, #384	; 0x180
 80019d4:	4413      	add	r3, r2
 80019d6:	f853 2ce0 	ldr.w	r2, [r3, #-224]
 80019da:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 80019de:	009b      	lsls	r3, r3, #2
 80019e0:	f507 71c0 	add.w	r1, r7, #384	; 0x180
 80019e4:	440b      	add	r3, r1
 80019e6:	f853 3ce0 	ldr.w	r3, [r3, #-224]
 80019ea:	1ad3      	subs	r3, r2, r3
 80019ec:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
			  temp = x;
 80019f0:	f8d7 015c 	ldr.w	r0, [r7, #348]	; 0x15c
 80019f4:	f7ff f952 	bl	8000c9c <__aeabi_i2f>
 80019f8:	4603      	mov	r3, r0
 80019fa:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
			  temp = temp/xx+i+10;
 80019fe:	f8d7 0158 	ldr.w	r0, [r7, #344]	; 0x158
 8001a02:	f7ff f94b 	bl	8000c9c <__aeabi_i2f>
 8001a06:	4603      	mov	r3, r0
 8001a08:	4619      	mov	r1, r3
 8001a0a:	f8d7 017c 	ldr.w	r0, [r7, #380]	; 0x17c
 8001a0e:	f7ff fa4d 	bl	8000eac <__aeabi_fdiv>
 8001a12:	4603      	mov	r3, r0
 8001a14:	461c      	mov	r4, r3
 8001a16:	f8d7 0178 	ldr.w	r0, [r7, #376]	; 0x178
 8001a1a:	f7ff f93f 	bl	8000c9c <__aeabi_i2f>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	4619      	mov	r1, r3
 8001a22:	4620      	mov	r0, r4
 8001a24:	f7ff f886 	bl	8000b34 <__addsf3>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	4950      	ldr	r1, [pc, #320]	; (8001b6c <main+0x2e4>)
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f7ff f881 	bl	8000b34 <__addsf3>
 8001a32:	4603      	mov	r3, r0
 8001a34:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
	  for (int i=0; i<21; i++)
 8001a38:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8001a3c:	3301      	adds	r3, #1
 8001a3e:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
 8001a42:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8001a46:	2b14      	cmp	r3, #20
 8001a48:	dd98      	ble.n	800197c <main+0xf4>
		  }
	  }

	  BMP180_setControl(BMP180_MODE_TEMPERATURE);
 8001a4a:	202e      	movs	r0, #46	; 0x2e
 8001a4c:	f7ff fc0c 	bl	8001268 <BMP180_setControl>
	  HAL_Delay(BMP180_getMeasureDelayMilliseconds(BMP180_MODE_TEMPERATURE));
 8001a50:	202e      	movs	r0, #46	; 0x2e
 8001a52:	f7ff fc5d 	bl	8001310 <BMP180_getMeasureDelayMilliseconds>
 8001a56:	4603      	mov	r3, r0
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f000 fc55 	bl	8002308 <HAL_Delay>
	  float t = BMP180_getTemperatureC();
 8001a5e:	f7ff fc99 	bl	8001394 <BMP180_getTemperatureC>
 8001a62:	f8c7 0168 	str.w	r0, [r7, #360]	; 0x168

	  BMP180_setControl(BMP180_MODE_PRESSURE_3);
 8001a66:	20f4      	movs	r0, #244	; 0xf4
 8001a68:	f7ff fbfe 	bl	8001268 <BMP180_setControl>
	  HAL_Delay(BMP180_getMeasureDelayMilliseconds(BMP180_MODE_PRESSURE_3));
 8001a6c:	20f4      	movs	r0, #244	; 0xf4
 8001a6e:	f7ff fc4f 	bl	8001310 <BMP180_getMeasureDelayMilliseconds>
 8001a72:	4603      	mov	r3, r0
 8001a74:	4618      	mov	r0, r3
 8001a76:	f000 fc47 	bl	8002308 <HAL_Delay>
	  float p = BMP180_getPressure();
 8001a7a:	f7ff fce7 	bl	800144c <BMP180_getPressure>
 8001a7e:	f8c7 0164 	str.w	r0, [r7, #356]	; 0x164

	  float a = BMP180_getAltitude(p, 101325);
 8001a82:	493b      	ldr	r1, [pc, #236]	; (8001b70 <main+0x2e8>)
 8001a84:	f8d7 0164 	ldr.w	r0, [r7, #356]	; 0x164
 8001a88:	f7ff fd8e 	bl	80015a8 <BMP180_getAltitude>
 8001a8c:	f8c7 0160 	str.w	r0, [r7, #352]	; 0x160

	  I2C_send(0b10000000,0);   // переход на 1 строку
 8001a90:	2100      	movs	r1, #0
 8001a92:	2080      	movs	r0, #128	; 0x80
 8001a94:	f7ff fe7e 	bl	8001794 <I2C_send>
	  snprintf(msg, sizeof(msg), "t = %2.1f", t);
 8001a98:	f8d7 0168 	ldr.w	r0, [r7, #360]	; 0x168
 8001a9c:	f7fe fcc4 	bl	8000428 <__aeabi_f2d>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	460c      	mov	r4, r1
 8001aa4:	f107 00f4 	add.w	r0, r7, #244	; 0xf4
 8001aa8:	e9cd 3400 	strd	r3, r4, [sp]
 8001aac:	4a31      	ldr	r2, [pc, #196]	; (8001b74 <main+0x2ec>)
 8001aae:	2164      	movs	r1, #100	; 0x64
 8001ab0:	f004 f822 	bl	8005af8 <sniprintf>
	  LCD_SendString(msg);
 8001ab4:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001ab8:	4618      	mov	r0, r3
 8001aba:	f7ff febb 	bl	8001834 <LCD_SendString>
	  I2C_send(0b11000000,0);   // переход на 2 строку
 8001abe:	2100      	movs	r1, #0
 8001ac0:	20c0      	movs	r0, #192	; 0xc0
 8001ac2:	f7ff fe67 	bl	8001794 <I2C_send>
	  snprintf(msg, sizeof(msg), "t2 = %2.1f", temp);
 8001ac6:	f8d7 017c 	ldr.w	r0, [r7, #380]	; 0x17c
 8001aca:	f7fe fcad 	bl	8000428 <__aeabi_f2d>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	460c      	mov	r4, r1
 8001ad2:	f107 00f4 	add.w	r0, r7, #244	; 0xf4
 8001ad6:	e9cd 3400 	strd	r3, r4, [sp]
 8001ada:	4a27      	ldr	r2, [pc, #156]	; (8001b78 <main+0x2f0>)
 8001adc:	2164      	movs	r1, #100	; 0x64
 8001ade:	f004 f80b 	bl	8005af8 <sniprintf>
	  LCD_SendString(msg);
 8001ae2:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f7ff fea4 	bl	8001834 <LCD_SendString>
	  I2C_send(0b10010100,0);   // переход на 3 строку
 8001aec:	2100      	movs	r1, #0
 8001aee:	2094      	movs	r0, #148	; 0x94
 8001af0:	f7ff fe50 	bl	8001794 <I2C_send>
	  snprintf(msg, sizeof(msg), "p = %2.1f", p);
 8001af4:	f8d7 0164 	ldr.w	r0, [r7, #356]	; 0x164
 8001af8:	f7fe fc96 	bl	8000428 <__aeabi_f2d>
 8001afc:	4603      	mov	r3, r0
 8001afe:	460c      	mov	r4, r1
 8001b00:	f107 00f4 	add.w	r0, r7, #244	; 0xf4
 8001b04:	e9cd 3400 	strd	r3, r4, [sp]
 8001b08:	4a1c      	ldr	r2, [pc, #112]	; (8001b7c <main+0x2f4>)
 8001b0a:	2164      	movs	r1, #100	; 0x64
 8001b0c:	f003 fff4 	bl	8005af8 <sniprintf>
	  LCD_SendString(msg);
 8001b10:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001b14:	4618      	mov	r0, r3
 8001b16:	f7ff fe8d 	bl	8001834 <LCD_SendString>
	  I2C_send(0b11010100,0);   // переход на 4 строку
 8001b1a:	2100      	movs	r1, #0
 8001b1c:	20d4      	movs	r0, #212	; 0xd4
 8001b1e:	f7ff fe39 	bl	8001794 <I2C_send>
	  snprintf(msg, sizeof(msg), "hum = %2.1f", hum);
 8001b22:	f8d7 0170 	ldr.w	r0, [r7, #368]	; 0x170
 8001b26:	f7fe fc7f 	bl	8000428 <__aeabi_f2d>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	460c      	mov	r4, r1
 8001b2e:	f107 00f4 	add.w	r0, r7, #244	; 0xf4
 8001b32:	e9cd 3400 	strd	r3, r4, [sp]
 8001b36:	4a12      	ldr	r2, [pc, #72]	; (8001b80 <main+0x2f8>)
 8001b38:	2164      	movs	r1, #100	; 0x64
 8001b3a:	f003 ffdd 	bl	8005af8 <sniprintf>
	  LCD_SendString(msg);
 8001b3e:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001b42:	4618      	mov	r0, r3
 8001b44:	f7ff fe76 	bl	8001834 <LCD_SendString>
  {
 8001b48:	e6c7      	b.n	80018da <main+0x52>
 8001b4a:	bf00      	nop
 8001b4c:	f3af 8000 	nop.w
 8001b50:	53f7ced9 	.word	0x53f7ced9
 8001b54:	3f9ba5e3 	.word	0x3f9ba5e3
 8001b58:	08008380 	.word	0x08008380
 8001b5c:	2000026c 	.word	0x2000026c
 8001b60:	200002f0 	.word	0x200002f0
 8001b64:	200002c0 	.word	0x200002c0
 8001b68:	2000023c 	.word	0x2000023c
 8001b6c:	41200000 	.word	0x41200000
 8001b70:	47c5e680 	.word	0x47c5e680
 8001b74:	08008350 	.word	0x08008350
 8001b78:	0800835c 	.word	0x0800835c
 8001b7c:	08008368 	.word	0x08008368
 8001b80:	08008374 	.word	0x08008374

08001b84 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b094      	sub	sp, #80	; 0x50
 8001b88:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b8a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001b8e:	2228      	movs	r2, #40	; 0x28
 8001b90:	2100      	movs	r1, #0
 8001b92:	4618      	mov	r0, r3
 8001b94:	f003 fb59 	bl	800524a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b98:	f107 0314 	add.w	r3, r7, #20
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	601a      	str	r2, [r3, #0]
 8001ba0:	605a      	str	r2, [r3, #4]
 8001ba2:	609a      	str	r2, [r3, #8]
 8001ba4:	60da      	str	r2, [r3, #12]
 8001ba6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001ba8:	1d3b      	adds	r3, r7, #4
 8001baa:	2200      	movs	r2, #0
 8001bac:	601a      	str	r2, [r3, #0]
 8001bae:	605a      	str	r2, [r3, #4]
 8001bb0:	609a      	str	r2, [r3, #8]
 8001bb2:	60da      	str	r2, [r3, #12]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001bb4:	2301      	movs	r3, #1
 8001bb6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001bb8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001bbc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001bc6:	2302      	movs	r3, #2
 8001bc8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001bca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001bce:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001bd0:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001bd4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001bd6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f002 fc4a 	bl	8004474 <HAL_RCC_OscConfig>
 8001be0:	4603      	mov	r3, r0
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d001      	beq.n	8001bea <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001be6:	f000 f955 	bl	8001e94 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001bea:	230f      	movs	r3, #15
 8001bec:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001bee:	2302      	movs	r3, #2
 8001bf0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001bf6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001bfa:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001c00:	f107 0314 	add.w	r3, r7, #20
 8001c04:	2102      	movs	r1, #2
 8001c06:	4618      	mov	r0, r3
 8001c08:	f002 feb4 	bl	8004974 <HAL_RCC_ClockConfig>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d001      	beq.n	8001c16 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8001c12:	f000 f93f 	bl	8001e94 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001c16:	2302      	movs	r3, #2
 8001c18:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 8001c1a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001c1e:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c20:	1d3b      	adds	r3, r7, #4
 8001c22:	4618      	mov	r0, r3
 8001c24:	f003 f842 	bl	8004cac <HAL_RCCEx_PeriphCLKConfig>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d001      	beq.n	8001c32 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001c2e:	f000 f931 	bl	8001e94 <Error_Handler>
  }
}
 8001c32:	bf00      	nop
 8001c34:	3750      	adds	r7, #80	; 0x50
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bd80      	pop	{r7, pc}
	...

08001c3c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b084      	sub	sp, #16
 8001c40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001c42:	1d3b      	adds	r3, r7, #4
 8001c44:	2200      	movs	r2, #0
 8001c46:	601a      	str	r2, [r3, #0]
 8001c48:	605a      	str	r2, [r3, #4]
 8001c4a:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config 
  */
  hadc1.Instance = ADC1;
 8001c4c:	4b18      	ldr	r3, [pc, #96]	; (8001cb0 <MX_ADC1_Init+0x74>)
 8001c4e:	4a19      	ldr	r2, [pc, #100]	; (8001cb4 <MX_ADC1_Init+0x78>)
 8001c50:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001c52:	4b17      	ldr	r3, [pc, #92]	; (8001cb0 <MX_ADC1_Init+0x74>)
 8001c54:	2200      	movs	r2, #0
 8001c56:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001c58:	4b15      	ldr	r3, [pc, #84]	; (8001cb0 <MX_ADC1_Init+0x74>)
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001c5e:	4b14      	ldr	r3, [pc, #80]	; (8001cb0 <MX_ADC1_Init+0x74>)
 8001c60:	2200      	movs	r2, #0
 8001c62:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001c64:	4b12      	ldr	r3, [pc, #72]	; (8001cb0 <MX_ADC1_Init+0x74>)
 8001c66:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001c6a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001c6c:	4b10      	ldr	r3, [pc, #64]	; (8001cb0 <MX_ADC1_Init+0x74>)
 8001c6e:	2200      	movs	r2, #0
 8001c70:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8001c72:	4b0f      	ldr	r3, [pc, #60]	; (8001cb0 <MX_ADC1_Init+0x74>)
 8001c74:	2201      	movs	r2, #1
 8001c76:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001c78:	480d      	ldr	r0, [pc, #52]	; (8001cb0 <MX_ADC1_Init+0x74>)
 8001c7a:	f000 fb67 	bl	800234c <HAL_ADC_Init>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d001      	beq.n	8001c88 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8001c84:	f000 f906 	bl	8001e94 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001c88:	2304      	movs	r3, #4
 8001c8a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001c90:	2300      	movs	r3, #0
 8001c92:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001c94:	1d3b      	adds	r3, r7, #4
 8001c96:	4619      	mov	r1, r3
 8001c98:	4805      	ldr	r0, [pc, #20]	; (8001cb0 <MX_ADC1_Init+0x74>)
 8001c9a:	f000 fe0f 	bl	80028bc <HAL_ADC_ConfigChannel>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d001      	beq.n	8001ca8 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8001ca4:	f000 f8f6 	bl	8001e94 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001ca8:	bf00      	nop
 8001caa:	3710      	adds	r7, #16
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd80      	pop	{r7, pc}
 8001cb0:	200002c0 	.word	0x200002c0
 8001cb4:	40012400 	.word	0x40012400

08001cb8 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b084      	sub	sp, #16
 8001cbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001cbe:	1d3b      	adds	r3, r7, #4
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	601a      	str	r2, [r3, #0]
 8001cc4:	605a      	str	r2, [r3, #4]
 8001cc6:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config 
  */
  hadc2.Instance = ADC2;
 8001cc8:	4b18      	ldr	r3, [pc, #96]	; (8001d2c <MX_ADC2_Init+0x74>)
 8001cca:	4a19      	ldr	r2, [pc, #100]	; (8001d30 <MX_ADC2_Init+0x78>)
 8001ccc:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001cce:	4b17      	ldr	r3, [pc, #92]	; (8001d2c <MX_ADC2_Init+0x74>)
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001cd4:	4b15      	ldr	r3, [pc, #84]	; (8001d2c <MX_ADC2_Init+0x74>)
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001cda:	4b14      	ldr	r3, [pc, #80]	; (8001d2c <MX_ADC2_Init+0x74>)
 8001cdc:	2200      	movs	r2, #0
 8001cde:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001ce0:	4b12      	ldr	r3, [pc, #72]	; (8001d2c <MX_ADC2_Init+0x74>)
 8001ce2:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001ce6:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001ce8:	4b10      	ldr	r3, [pc, #64]	; (8001d2c <MX_ADC2_Init+0x74>)
 8001cea:	2200      	movs	r2, #0
 8001cec:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 8001cee:	4b0f      	ldr	r3, [pc, #60]	; (8001d2c <MX_ADC2_Init+0x74>)
 8001cf0:	2201      	movs	r2, #1
 8001cf2:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001cf4:	480d      	ldr	r0, [pc, #52]	; (8001d2c <MX_ADC2_Init+0x74>)
 8001cf6:	f000 fb29 	bl	800234c <HAL_ADC_Init>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d001      	beq.n	8001d04 <MX_ADC2_Init+0x4c>
  {
    Error_Handler();
 8001d00:	f000 f8c8 	bl	8001e94 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001d04:	2305      	movs	r3, #5
 8001d06:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001d08:	2301      	movs	r3, #1
 8001d0a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001d10:	1d3b      	adds	r3, r7, #4
 8001d12:	4619      	mov	r1, r3
 8001d14:	4805      	ldr	r0, [pc, #20]	; (8001d2c <MX_ADC2_Init+0x74>)
 8001d16:	f000 fdd1 	bl	80028bc <HAL_ADC_ConfigChannel>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d001      	beq.n	8001d24 <MX_ADC2_Init+0x6c>
  {
    Error_Handler();
 8001d20:	f000 f8b8 	bl	8001e94 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001d24:	bf00      	nop
 8001d26:	3710      	adds	r7, #16
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bd80      	pop	{r7, pc}
 8001d2c:	2000023c 	.word	0x2000023c
 8001d30:	40012800 	.word	0x40012800

08001d34 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001d38:	4b12      	ldr	r3, [pc, #72]	; (8001d84 <MX_I2C1_Init+0x50>)
 8001d3a:	4a13      	ldr	r2, [pc, #76]	; (8001d88 <MX_I2C1_Init+0x54>)
 8001d3c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001d3e:	4b11      	ldr	r3, [pc, #68]	; (8001d84 <MX_I2C1_Init+0x50>)
 8001d40:	4a12      	ldr	r2, [pc, #72]	; (8001d8c <MX_I2C1_Init+0x58>)
 8001d42:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001d44:	4b0f      	ldr	r3, [pc, #60]	; (8001d84 <MX_I2C1_Init+0x50>)
 8001d46:	2200      	movs	r2, #0
 8001d48:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001d4a:	4b0e      	ldr	r3, [pc, #56]	; (8001d84 <MX_I2C1_Init+0x50>)
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001d50:	4b0c      	ldr	r3, [pc, #48]	; (8001d84 <MX_I2C1_Init+0x50>)
 8001d52:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001d56:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001d58:	4b0a      	ldr	r3, [pc, #40]	; (8001d84 <MX_I2C1_Init+0x50>)
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001d5e:	4b09      	ldr	r3, [pc, #36]	; (8001d84 <MX_I2C1_Init+0x50>)
 8001d60:	2200      	movs	r2, #0
 8001d62:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001d64:	4b07      	ldr	r3, [pc, #28]	; (8001d84 <MX_I2C1_Init+0x50>)
 8001d66:	2200      	movs	r2, #0
 8001d68:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001d6a:	4b06      	ldr	r3, [pc, #24]	; (8001d84 <MX_I2C1_Init+0x50>)
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001d70:	4804      	ldr	r0, [pc, #16]	; (8001d84 <MX_I2C1_Init+0x50>)
 8001d72:	f001 f97d 	bl	8003070 <HAL_I2C_Init>
 8001d76:	4603      	mov	r3, r0
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d001      	beq.n	8001d80 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001d7c:	f000 f88a 	bl	8001e94 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001d80:	bf00      	nop
 8001d82:	bd80      	pop	{r7, pc}
 8001d84:	2000026c 	.word	0x2000026c
 8001d88:	40005400 	.word	0x40005400
 8001d8c:	000186a0 	.word	0x000186a0

08001d90 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001d94:	4b11      	ldr	r3, [pc, #68]	; (8001ddc <MX_USART1_UART_Init+0x4c>)
 8001d96:	4a12      	ldr	r2, [pc, #72]	; (8001de0 <MX_USART1_UART_Init+0x50>)
 8001d98:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001d9a:	4b10      	ldr	r3, [pc, #64]	; (8001ddc <MX_USART1_UART_Init+0x4c>)
 8001d9c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001da0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001da2:	4b0e      	ldr	r3, [pc, #56]	; (8001ddc <MX_USART1_UART_Init+0x4c>)
 8001da4:	2200      	movs	r2, #0
 8001da6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001da8:	4b0c      	ldr	r3, [pc, #48]	; (8001ddc <MX_USART1_UART_Init+0x4c>)
 8001daa:	2200      	movs	r2, #0
 8001dac:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001dae:	4b0b      	ldr	r3, [pc, #44]	; (8001ddc <MX_USART1_UART_Init+0x4c>)
 8001db0:	2200      	movs	r2, #0
 8001db2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001db4:	4b09      	ldr	r3, [pc, #36]	; (8001ddc <MX_USART1_UART_Init+0x4c>)
 8001db6:	220c      	movs	r2, #12
 8001db8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001dba:	4b08      	ldr	r3, [pc, #32]	; (8001ddc <MX_USART1_UART_Init+0x4c>)
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001dc0:	4b06      	ldr	r3, [pc, #24]	; (8001ddc <MX_USART1_UART_Init+0x4c>)
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001dc6:	4805      	ldr	r0, [pc, #20]	; (8001ddc <MX_USART1_UART_Init+0x4c>)
 8001dc8:	f003 f8e2 	bl	8004f90 <HAL_UART_Init>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d001      	beq.n	8001dd6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001dd2:	f000 f85f 	bl	8001e94 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001dd6:	bf00      	nop
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	bf00      	nop
 8001ddc:	200002f0 	.word	0x200002f0
 8001de0:	40013800 	.word	0x40013800

08001de4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b088      	sub	sp, #32
 8001de8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dea:	f107 0310 	add.w	r3, r7, #16
 8001dee:	2200      	movs	r2, #0
 8001df0:	601a      	str	r2, [r3, #0]
 8001df2:	605a      	str	r2, [r3, #4]
 8001df4:	609a      	str	r2, [r3, #8]
 8001df6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001df8:	4b24      	ldr	r3, [pc, #144]	; (8001e8c <MX_GPIO_Init+0xa8>)
 8001dfa:	699b      	ldr	r3, [r3, #24]
 8001dfc:	4a23      	ldr	r2, [pc, #140]	; (8001e8c <MX_GPIO_Init+0xa8>)
 8001dfe:	f043 0310 	orr.w	r3, r3, #16
 8001e02:	6193      	str	r3, [r2, #24]
 8001e04:	4b21      	ldr	r3, [pc, #132]	; (8001e8c <MX_GPIO_Init+0xa8>)
 8001e06:	699b      	ldr	r3, [r3, #24]
 8001e08:	f003 0310 	and.w	r3, r3, #16
 8001e0c:	60fb      	str	r3, [r7, #12]
 8001e0e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e10:	4b1e      	ldr	r3, [pc, #120]	; (8001e8c <MX_GPIO_Init+0xa8>)
 8001e12:	699b      	ldr	r3, [r3, #24]
 8001e14:	4a1d      	ldr	r2, [pc, #116]	; (8001e8c <MX_GPIO_Init+0xa8>)
 8001e16:	f043 0320 	orr.w	r3, r3, #32
 8001e1a:	6193      	str	r3, [r2, #24]
 8001e1c:	4b1b      	ldr	r3, [pc, #108]	; (8001e8c <MX_GPIO_Init+0xa8>)
 8001e1e:	699b      	ldr	r3, [r3, #24]
 8001e20:	f003 0320 	and.w	r3, r3, #32
 8001e24:	60bb      	str	r3, [r7, #8]
 8001e26:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e28:	4b18      	ldr	r3, [pc, #96]	; (8001e8c <MX_GPIO_Init+0xa8>)
 8001e2a:	699b      	ldr	r3, [r3, #24]
 8001e2c:	4a17      	ldr	r2, [pc, #92]	; (8001e8c <MX_GPIO_Init+0xa8>)
 8001e2e:	f043 0304 	orr.w	r3, r3, #4
 8001e32:	6193      	str	r3, [r2, #24]
 8001e34:	4b15      	ldr	r3, [pc, #84]	; (8001e8c <MX_GPIO_Init+0xa8>)
 8001e36:	699b      	ldr	r3, [r3, #24]
 8001e38:	f003 0304 	and.w	r3, r3, #4
 8001e3c:	607b      	str	r3, [r7, #4]
 8001e3e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e40:	4b12      	ldr	r3, [pc, #72]	; (8001e8c <MX_GPIO_Init+0xa8>)
 8001e42:	699b      	ldr	r3, [r3, #24]
 8001e44:	4a11      	ldr	r2, [pc, #68]	; (8001e8c <MX_GPIO_Init+0xa8>)
 8001e46:	f043 0308 	orr.w	r3, r3, #8
 8001e4a:	6193      	str	r3, [r2, #24]
 8001e4c:	4b0f      	ldr	r3, [pc, #60]	; (8001e8c <MX_GPIO_Init+0xa8>)
 8001e4e:	699b      	ldr	r3, [r3, #24]
 8001e50:	f003 0308 	and.w	r3, r3, #8
 8001e54:	603b      	str	r3, [r7, #0]
 8001e56:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001e58:	2200      	movs	r2, #0
 8001e5a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001e5e:	480c      	ldr	r0, [pc, #48]	; (8001e90 <MX_GPIO_Init+0xac>)
 8001e60:	f001 f8ee 	bl	8003040 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001e64:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e68:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e72:	2302      	movs	r3, #2
 8001e74:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e76:	f107 0310 	add.w	r3, r7, #16
 8001e7a:	4619      	mov	r1, r3
 8001e7c:	4804      	ldr	r0, [pc, #16]	; (8001e90 <MX_GPIO_Init+0xac>)
 8001e7e:	f000 ff85 	bl	8002d8c <HAL_GPIO_Init>

}
 8001e82:	bf00      	nop
 8001e84:	3720      	adds	r7, #32
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	bf00      	nop
 8001e8c:	40021000 	.word	0x40021000
 8001e90:	40011000 	.word	0x40011000

08001e94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e94:	b480      	push	{r7}
 8001e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001e98:	bf00      	nop
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bc80      	pop	{r7}
 8001e9e:	4770      	bx	lr

08001ea0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	b085      	sub	sp, #20
 8001ea4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001ea6:	4b15      	ldr	r3, [pc, #84]	; (8001efc <HAL_MspInit+0x5c>)
 8001ea8:	699b      	ldr	r3, [r3, #24]
 8001eaa:	4a14      	ldr	r2, [pc, #80]	; (8001efc <HAL_MspInit+0x5c>)
 8001eac:	f043 0301 	orr.w	r3, r3, #1
 8001eb0:	6193      	str	r3, [r2, #24]
 8001eb2:	4b12      	ldr	r3, [pc, #72]	; (8001efc <HAL_MspInit+0x5c>)
 8001eb4:	699b      	ldr	r3, [r3, #24]
 8001eb6:	f003 0301 	and.w	r3, r3, #1
 8001eba:	60bb      	str	r3, [r7, #8]
 8001ebc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ebe:	4b0f      	ldr	r3, [pc, #60]	; (8001efc <HAL_MspInit+0x5c>)
 8001ec0:	69db      	ldr	r3, [r3, #28]
 8001ec2:	4a0e      	ldr	r2, [pc, #56]	; (8001efc <HAL_MspInit+0x5c>)
 8001ec4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ec8:	61d3      	str	r3, [r2, #28]
 8001eca:	4b0c      	ldr	r3, [pc, #48]	; (8001efc <HAL_MspInit+0x5c>)
 8001ecc:	69db      	ldr	r3, [r3, #28]
 8001ece:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ed2:	607b      	str	r3, [r7, #4]
 8001ed4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled 
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8001ed6:	4b0a      	ldr	r3, [pc, #40]	; (8001f00 <HAL_MspInit+0x60>)
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	60fb      	str	r3, [r7, #12]
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001ee2:	60fb      	str	r3, [r7, #12]
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001eea:	60fb      	str	r3, [r7, #12]
 8001eec:	4a04      	ldr	r2, [pc, #16]	; (8001f00 <HAL_MspInit+0x60>)
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ef2:	bf00      	nop
 8001ef4:	3714      	adds	r7, #20
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bc80      	pop	{r7}
 8001efa:	4770      	bx	lr
 8001efc:	40021000 	.word	0x40021000
 8001f00:	40010000 	.word	0x40010000

08001f04 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b08a      	sub	sp, #40	; 0x28
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f0c:	f107 0318 	add.w	r3, r7, #24
 8001f10:	2200      	movs	r2, #0
 8001f12:	601a      	str	r2, [r3, #0]
 8001f14:	605a      	str	r2, [r3, #4]
 8001f16:	609a      	str	r2, [r3, #8]
 8001f18:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4a28      	ldr	r2, [pc, #160]	; (8001fc0 <HAL_ADC_MspInit+0xbc>)
 8001f20:	4293      	cmp	r3, r2
 8001f22:	d122      	bne.n	8001f6a <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001f24:	4b27      	ldr	r3, [pc, #156]	; (8001fc4 <HAL_ADC_MspInit+0xc0>)
 8001f26:	699b      	ldr	r3, [r3, #24]
 8001f28:	4a26      	ldr	r2, [pc, #152]	; (8001fc4 <HAL_ADC_MspInit+0xc0>)
 8001f2a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f2e:	6193      	str	r3, [r2, #24]
 8001f30:	4b24      	ldr	r3, [pc, #144]	; (8001fc4 <HAL_ADC_MspInit+0xc0>)
 8001f32:	699b      	ldr	r3, [r3, #24]
 8001f34:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f38:	617b      	str	r3, [r7, #20]
 8001f3a:	697b      	ldr	r3, [r7, #20]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f3c:	4b21      	ldr	r3, [pc, #132]	; (8001fc4 <HAL_ADC_MspInit+0xc0>)
 8001f3e:	699b      	ldr	r3, [r3, #24]
 8001f40:	4a20      	ldr	r2, [pc, #128]	; (8001fc4 <HAL_ADC_MspInit+0xc0>)
 8001f42:	f043 0304 	orr.w	r3, r3, #4
 8001f46:	6193      	str	r3, [r2, #24]
 8001f48:	4b1e      	ldr	r3, [pc, #120]	; (8001fc4 <HAL_ADC_MspInit+0xc0>)
 8001f4a:	699b      	ldr	r3, [r3, #24]
 8001f4c:	f003 0304 	and.w	r3, r3, #4
 8001f50:	613b      	str	r3, [r7, #16]
 8001f52:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration    
    PA4     ------> ADC1_IN4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001f54:	2310      	movs	r3, #16
 8001f56:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f58:	2303      	movs	r3, #3
 8001f5a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f5c:	f107 0318 	add.w	r3, r7, #24
 8001f60:	4619      	mov	r1, r3
 8001f62:	4819      	ldr	r0, [pc, #100]	; (8001fc8 <HAL_ADC_MspInit+0xc4>)
 8001f64:	f000 ff12 	bl	8002d8c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001f68:	e026      	b.n	8001fb8 <HAL_ADC_MspInit+0xb4>
  else if(hadc->Instance==ADC2)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4a17      	ldr	r2, [pc, #92]	; (8001fcc <HAL_ADC_MspInit+0xc8>)
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d121      	bne.n	8001fb8 <HAL_ADC_MspInit+0xb4>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001f74:	4b13      	ldr	r3, [pc, #76]	; (8001fc4 <HAL_ADC_MspInit+0xc0>)
 8001f76:	699b      	ldr	r3, [r3, #24]
 8001f78:	4a12      	ldr	r2, [pc, #72]	; (8001fc4 <HAL_ADC_MspInit+0xc0>)
 8001f7a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f7e:	6193      	str	r3, [r2, #24]
 8001f80:	4b10      	ldr	r3, [pc, #64]	; (8001fc4 <HAL_ADC_MspInit+0xc0>)
 8001f82:	699b      	ldr	r3, [r3, #24]
 8001f84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f88:	60fb      	str	r3, [r7, #12]
 8001f8a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f8c:	4b0d      	ldr	r3, [pc, #52]	; (8001fc4 <HAL_ADC_MspInit+0xc0>)
 8001f8e:	699b      	ldr	r3, [r3, #24]
 8001f90:	4a0c      	ldr	r2, [pc, #48]	; (8001fc4 <HAL_ADC_MspInit+0xc0>)
 8001f92:	f043 0304 	orr.w	r3, r3, #4
 8001f96:	6193      	str	r3, [r2, #24]
 8001f98:	4b0a      	ldr	r3, [pc, #40]	; (8001fc4 <HAL_ADC_MspInit+0xc0>)
 8001f9a:	699b      	ldr	r3, [r3, #24]
 8001f9c:	f003 0304 	and.w	r3, r3, #4
 8001fa0:	60bb      	str	r3, [r7, #8]
 8001fa2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001fa4:	2320      	movs	r3, #32
 8001fa6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001fa8:	2303      	movs	r3, #3
 8001faa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fac:	f107 0318 	add.w	r3, r7, #24
 8001fb0:	4619      	mov	r1, r3
 8001fb2:	4805      	ldr	r0, [pc, #20]	; (8001fc8 <HAL_ADC_MspInit+0xc4>)
 8001fb4:	f000 feea 	bl	8002d8c <HAL_GPIO_Init>
}
 8001fb8:	bf00      	nop
 8001fba:	3728      	adds	r7, #40	; 0x28
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bd80      	pop	{r7, pc}
 8001fc0:	40012400 	.word	0x40012400
 8001fc4:	40021000 	.word	0x40021000
 8001fc8:	40010800 	.word	0x40010800
 8001fcc:	40012800 	.word	0x40012800

08001fd0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b088      	sub	sp, #32
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fd8:	f107 0310 	add.w	r3, r7, #16
 8001fdc:	2200      	movs	r2, #0
 8001fde:	601a      	str	r2, [r3, #0]
 8001fe0:	605a      	str	r2, [r3, #4]
 8001fe2:	609a      	str	r2, [r3, #8]
 8001fe4:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4a15      	ldr	r2, [pc, #84]	; (8002040 <HAL_I2C_MspInit+0x70>)
 8001fec:	4293      	cmp	r3, r2
 8001fee:	d123      	bne.n	8002038 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ff0:	4b14      	ldr	r3, [pc, #80]	; (8002044 <HAL_I2C_MspInit+0x74>)
 8001ff2:	699b      	ldr	r3, [r3, #24]
 8001ff4:	4a13      	ldr	r2, [pc, #76]	; (8002044 <HAL_I2C_MspInit+0x74>)
 8001ff6:	f043 0308 	orr.w	r3, r3, #8
 8001ffa:	6193      	str	r3, [r2, #24]
 8001ffc:	4b11      	ldr	r3, [pc, #68]	; (8002044 <HAL_I2C_MspInit+0x74>)
 8001ffe:	699b      	ldr	r3, [r3, #24]
 8002000:	f003 0308 	and.w	r3, r3, #8
 8002004:	60fb      	str	r3, [r7, #12]
 8002006:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002008:	23c0      	movs	r3, #192	; 0xc0
 800200a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800200c:	2312      	movs	r3, #18
 800200e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002010:	2303      	movs	r3, #3
 8002012:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002014:	f107 0310 	add.w	r3, r7, #16
 8002018:	4619      	mov	r1, r3
 800201a:	480b      	ldr	r0, [pc, #44]	; (8002048 <HAL_I2C_MspInit+0x78>)
 800201c:	f000 feb6 	bl	8002d8c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002020:	4b08      	ldr	r3, [pc, #32]	; (8002044 <HAL_I2C_MspInit+0x74>)
 8002022:	69db      	ldr	r3, [r3, #28]
 8002024:	4a07      	ldr	r2, [pc, #28]	; (8002044 <HAL_I2C_MspInit+0x74>)
 8002026:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800202a:	61d3      	str	r3, [r2, #28]
 800202c:	4b05      	ldr	r3, [pc, #20]	; (8002044 <HAL_I2C_MspInit+0x74>)
 800202e:	69db      	ldr	r3, [r3, #28]
 8002030:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002034:	60bb      	str	r3, [r7, #8]
 8002036:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002038:	bf00      	nop
 800203a:	3720      	adds	r7, #32
 800203c:	46bd      	mov	sp, r7
 800203e:	bd80      	pop	{r7, pc}
 8002040:	40005400 	.word	0x40005400
 8002044:	40021000 	.word	0x40021000
 8002048:	40010c00 	.word	0x40010c00

0800204c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b088      	sub	sp, #32
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002054:	f107 0310 	add.w	r3, r7, #16
 8002058:	2200      	movs	r2, #0
 800205a:	601a      	str	r2, [r3, #0]
 800205c:	605a      	str	r2, [r3, #4]
 800205e:	609a      	str	r2, [r3, #8]
 8002060:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4a1c      	ldr	r2, [pc, #112]	; (80020d8 <HAL_UART_MspInit+0x8c>)
 8002068:	4293      	cmp	r3, r2
 800206a:	d131      	bne.n	80020d0 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800206c:	4b1b      	ldr	r3, [pc, #108]	; (80020dc <HAL_UART_MspInit+0x90>)
 800206e:	699b      	ldr	r3, [r3, #24]
 8002070:	4a1a      	ldr	r2, [pc, #104]	; (80020dc <HAL_UART_MspInit+0x90>)
 8002072:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002076:	6193      	str	r3, [r2, #24]
 8002078:	4b18      	ldr	r3, [pc, #96]	; (80020dc <HAL_UART_MspInit+0x90>)
 800207a:	699b      	ldr	r3, [r3, #24]
 800207c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002080:	60fb      	str	r3, [r7, #12]
 8002082:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002084:	4b15      	ldr	r3, [pc, #84]	; (80020dc <HAL_UART_MspInit+0x90>)
 8002086:	699b      	ldr	r3, [r3, #24]
 8002088:	4a14      	ldr	r2, [pc, #80]	; (80020dc <HAL_UART_MspInit+0x90>)
 800208a:	f043 0304 	orr.w	r3, r3, #4
 800208e:	6193      	str	r3, [r2, #24]
 8002090:	4b12      	ldr	r3, [pc, #72]	; (80020dc <HAL_UART_MspInit+0x90>)
 8002092:	699b      	ldr	r3, [r3, #24]
 8002094:	f003 0304 	and.w	r3, r3, #4
 8002098:	60bb      	str	r3, [r7, #8]
 800209a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800209c:	f44f 7300 	mov.w	r3, #512	; 0x200
 80020a0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020a2:	2302      	movs	r3, #2
 80020a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80020a6:	2303      	movs	r3, #3
 80020a8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020aa:	f107 0310 	add.w	r3, r7, #16
 80020ae:	4619      	mov	r1, r3
 80020b0:	480b      	ldr	r0, [pc, #44]	; (80020e0 <HAL_UART_MspInit+0x94>)
 80020b2:	f000 fe6b 	bl	8002d8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80020b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80020ba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80020bc:	2300      	movs	r3, #0
 80020be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020c0:	2300      	movs	r3, #0
 80020c2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020c4:	f107 0310 	add.w	r3, r7, #16
 80020c8:	4619      	mov	r1, r3
 80020ca:	4805      	ldr	r0, [pc, #20]	; (80020e0 <HAL_UART_MspInit+0x94>)
 80020cc:	f000 fe5e 	bl	8002d8c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80020d0:	bf00      	nop
 80020d2:	3720      	adds	r7, #32
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bd80      	pop	{r7, pc}
 80020d8:	40013800 	.word	0x40013800
 80020dc:	40021000 	.word	0x40021000
 80020e0:	40010800 	.word	0x40010800

080020e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80020e4:	b480      	push	{r7}
 80020e6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80020e8:	bf00      	nop
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bc80      	pop	{r7}
 80020ee:	4770      	bx	lr

080020f0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80020f0:	b480      	push	{r7}
 80020f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80020f4:	e7fe      	b.n	80020f4 <HardFault_Handler+0x4>

080020f6 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80020f6:	b480      	push	{r7}
 80020f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80020fa:	e7fe      	b.n	80020fa <MemManage_Handler+0x4>

080020fc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80020fc:	b480      	push	{r7}
 80020fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002100:	e7fe      	b.n	8002100 <BusFault_Handler+0x4>

08002102 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002102:	b480      	push	{r7}
 8002104:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002106:	e7fe      	b.n	8002106 <UsageFault_Handler+0x4>

08002108 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002108:	b480      	push	{r7}
 800210a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800210c:	bf00      	nop
 800210e:	46bd      	mov	sp, r7
 8002110:	bc80      	pop	{r7}
 8002112:	4770      	bx	lr

08002114 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002114:	b480      	push	{r7}
 8002116:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002118:	bf00      	nop
 800211a:	46bd      	mov	sp, r7
 800211c:	bc80      	pop	{r7}
 800211e:	4770      	bx	lr

08002120 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002120:	b480      	push	{r7}
 8002122:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002124:	bf00      	nop
 8002126:	46bd      	mov	sp, r7
 8002128:	bc80      	pop	{r7}
 800212a:	4770      	bx	lr

0800212c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002130:	f000 f8ce 	bl	80022d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002134:	bf00      	nop
 8002136:	bd80      	pop	{r7, pc}

08002138 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b084      	sub	sp, #16
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002140:	4b11      	ldr	r3, [pc, #68]	; (8002188 <_sbrk+0x50>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	2b00      	cmp	r3, #0
 8002146:	d102      	bne.n	800214e <_sbrk+0x16>
		heap_end = &end;
 8002148:	4b0f      	ldr	r3, [pc, #60]	; (8002188 <_sbrk+0x50>)
 800214a:	4a10      	ldr	r2, [pc, #64]	; (800218c <_sbrk+0x54>)
 800214c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800214e:	4b0e      	ldr	r3, [pc, #56]	; (8002188 <_sbrk+0x50>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002154:	4b0c      	ldr	r3, [pc, #48]	; (8002188 <_sbrk+0x50>)
 8002156:	681a      	ldr	r2, [r3, #0]
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	4413      	add	r3, r2
 800215c:	466a      	mov	r2, sp
 800215e:	4293      	cmp	r3, r2
 8002160:	d907      	bls.n	8002172 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8002162:	f003 f83d 	bl	80051e0 <__errno>
 8002166:	4602      	mov	r2, r0
 8002168:	230c      	movs	r3, #12
 800216a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800216c:	f04f 33ff 	mov.w	r3, #4294967295
 8002170:	e006      	b.n	8002180 <_sbrk+0x48>
	}

	heap_end += incr;
 8002172:	4b05      	ldr	r3, [pc, #20]	; (8002188 <_sbrk+0x50>)
 8002174:	681a      	ldr	r2, [r3, #0]
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	4413      	add	r3, r2
 800217a:	4a03      	ldr	r2, [pc, #12]	; (8002188 <_sbrk+0x50>)
 800217c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800217e:	68fb      	ldr	r3, [r7, #12]
}
 8002180:	4618      	mov	r0, r3
 8002182:	3710      	adds	r7, #16
 8002184:	46bd      	mov	sp, r7
 8002186:	bd80      	pop	{r7, pc}
 8002188:	20000230 	.word	0x20000230
 800218c:	20000338 	.word	0x20000338

08002190 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002190:	b480      	push	{r7}
 8002192:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8002194:	4b15      	ldr	r3, [pc, #84]	; (80021ec <SystemInit+0x5c>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4a14      	ldr	r2, [pc, #80]	; (80021ec <SystemInit+0x5c>)
 800219a:	f043 0301 	orr.w	r3, r3, #1
 800219e:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80021a0:	4b12      	ldr	r3, [pc, #72]	; (80021ec <SystemInit+0x5c>)
 80021a2:	685a      	ldr	r2, [r3, #4]
 80021a4:	4911      	ldr	r1, [pc, #68]	; (80021ec <SystemInit+0x5c>)
 80021a6:	4b12      	ldr	r3, [pc, #72]	; (80021f0 <SystemInit+0x60>)
 80021a8:	4013      	ands	r3, r2
 80021aa:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80021ac:	4b0f      	ldr	r3, [pc, #60]	; (80021ec <SystemInit+0x5c>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4a0e      	ldr	r2, [pc, #56]	; (80021ec <SystemInit+0x5c>)
 80021b2:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80021b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021ba:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80021bc:	4b0b      	ldr	r3, [pc, #44]	; (80021ec <SystemInit+0x5c>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4a0a      	ldr	r2, [pc, #40]	; (80021ec <SystemInit+0x5c>)
 80021c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021c6:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80021c8:	4b08      	ldr	r3, [pc, #32]	; (80021ec <SystemInit+0x5c>)
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	4a07      	ldr	r2, [pc, #28]	; (80021ec <SystemInit+0x5c>)
 80021ce:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80021d2:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80021d4:	4b05      	ldr	r3, [pc, #20]	; (80021ec <SystemInit+0x5c>)
 80021d6:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80021da:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80021dc:	4b05      	ldr	r3, [pc, #20]	; (80021f4 <SystemInit+0x64>)
 80021de:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80021e2:	609a      	str	r2, [r3, #8]
#endif 
}
 80021e4:	bf00      	nop
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bc80      	pop	{r7}
 80021ea:	4770      	bx	lr
 80021ec:	40021000 	.word	0x40021000
 80021f0:	f8ff0000 	.word	0xf8ff0000
 80021f4:	e000ed00 	.word	0xe000ed00

080021f8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80021f8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80021fa:	e003      	b.n	8002204 <LoopCopyDataInit>

080021fc <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80021fc:	4b0b      	ldr	r3, [pc, #44]	; (800222c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80021fe:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002200:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8002202:	3104      	adds	r1, #4

08002204 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002204:	480a      	ldr	r0, [pc, #40]	; (8002230 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8002206:	4b0b      	ldr	r3, [pc, #44]	; (8002234 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002208:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800220a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800220c:	d3f6      	bcc.n	80021fc <CopyDataInit>
  ldr r2, =_sbss
 800220e:	4a0a      	ldr	r2, [pc, #40]	; (8002238 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002210:	e002      	b.n	8002218 <LoopFillZerobss>

08002212 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8002212:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002214:	f842 3b04 	str.w	r3, [r2], #4

08002218 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002218:	4b08      	ldr	r3, [pc, #32]	; (800223c <LoopFillZerobss+0x24>)
  cmp r2, r3
 800221a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800221c:	d3f9      	bcc.n	8002212 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800221e:	f7ff ffb7 	bl	8002190 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002222:	f002 ffe3 	bl	80051ec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002226:	f7ff fb2f 	bl	8001888 <main>
  bx lr
 800222a:	4770      	bx	lr
  ldr r3, =_sidata
 800222c:	080086c0 	.word	0x080086c0
  ldr r0, =_sdata
 8002230:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002234:	200001e4 	.word	0x200001e4
  ldr r2, =_sbss
 8002238:	200001e4 	.word	0x200001e4
  ldr r3, = _ebss
 800223c:	20000338 	.word	0x20000338

08002240 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002240:	e7fe      	b.n	8002240 <ADC1_2_IRQHandler>
	...

08002244 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002248:	4b08      	ldr	r3, [pc, #32]	; (800226c <HAL_Init+0x28>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4a07      	ldr	r2, [pc, #28]	; (800226c <HAL_Init+0x28>)
 800224e:	f043 0310 	orr.w	r3, r3, #16
 8002252:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002254:	2003      	movs	r0, #3
 8002256:	f000 fd65 	bl	8002d24 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800225a:	2000      	movs	r0, #0
 800225c:	f000 f808 	bl	8002270 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002260:	f7ff fe1e 	bl	8001ea0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002264:	2300      	movs	r3, #0
}
 8002266:	4618      	mov	r0, r3
 8002268:	bd80      	pop	{r7, pc}
 800226a:	bf00      	nop
 800226c:	40022000 	.word	0x40022000

08002270 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b082      	sub	sp, #8
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002278:	4b12      	ldr	r3, [pc, #72]	; (80022c4 <HAL_InitTick+0x54>)
 800227a:	681a      	ldr	r2, [r3, #0]
 800227c:	4b12      	ldr	r3, [pc, #72]	; (80022c8 <HAL_InitTick+0x58>)
 800227e:	781b      	ldrb	r3, [r3, #0]
 8002280:	4619      	mov	r1, r3
 8002282:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002286:	fbb3 f3f1 	udiv	r3, r3, r1
 800228a:	fbb2 f3f3 	udiv	r3, r2, r3
 800228e:	4618      	mov	r0, r3
 8002290:	f000 fd6f 	bl	8002d72 <HAL_SYSTICK_Config>
 8002294:	4603      	mov	r3, r0
 8002296:	2b00      	cmp	r3, #0
 8002298:	d001      	beq.n	800229e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800229a:	2301      	movs	r3, #1
 800229c:	e00e      	b.n	80022bc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2b0f      	cmp	r3, #15
 80022a2:	d80a      	bhi.n	80022ba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80022a4:	2200      	movs	r2, #0
 80022a6:	6879      	ldr	r1, [r7, #4]
 80022a8:	f04f 30ff 	mov.w	r0, #4294967295
 80022ac:	f000 fd45 	bl	8002d3a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80022b0:	4a06      	ldr	r2, [pc, #24]	; (80022cc <HAL_InitTick+0x5c>)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80022b6:	2300      	movs	r3, #0
 80022b8:	e000      	b.n	80022bc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80022ba:	2301      	movs	r3, #1
}
 80022bc:	4618      	mov	r0, r3
 80022be:	3708      	adds	r7, #8
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bd80      	pop	{r7, pc}
 80022c4:	20000004 	.word	0x20000004
 80022c8:	2000000c 	.word	0x2000000c
 80022cc:	20000008 	.word	0x20000008

080022d0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022d0:	b480      	push	{r7}
 80022d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80022d4:	4b05      	ldr	r3, [pc, #20]	; (80022ec <HAL_IncTick+0x1c>)
 80022d6:	781b      	ldrb	r3, [r3, #0]
 80022d8:	461a      	mov	r2, r3
 80022da:	4b05      	ldr	r3, [pc, #20]	; (80022f0 <HAL_IncTick+0x20>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4413      	add	r3, r2
 80022e0:	4a03      	ldr	r2, [pc, #12]	; (80022f0 <HAL_IncTick+0x20>)
 80022e2:	6013      	str	r3, [r2, #0]
}
 80022e4:	bf00      	nop
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bc80      	pop	{r7}
 80022ea:	4770      	bx	lr
 80022ec:	2000000c 	.word	0x2000000c
 80022f0:	20000330 	.word	0x20000330

080022f4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022f4:	b480      	push	{r7}
 80022f6:	af00      	add	r7, sp, #0
  return uwTick;
 80022f8:	4b02      	ldr	r3, [pc, #8]	; (8002304 <HAL_GetTick+0x10>)
 80022fa:	681b      	ldr	r3, [r3, #0]
}
 80022fc:	4618      	mov	r0, r3
 80022fe:	46bd      	mov	sp, r7
 8002300:	bc80      	pop	{r7}
 8002302:	4770      	bx	lr
 8002304:	20000330 	.word	0x20000330

08002308 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b084      	sub	sp, #16
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002310:	f7ff fff0 	bl	80022f4 <HAL_GetTick>
 8002314:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002320:	d005      	beq.n	800232e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002322:	4b09      	ldr	r3, [pc, #36]	; (8002348 <HAL_Delay+0x40>)
 8002324:	781b      	ldrb	r3, [r3, #0]
 8002326:	461a      	mov	r2, r3
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	4413      	add	r3, r2
 800232c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800232e:	bf00      	nop
 8002330:	f7ff ffe0 	bl	80022f4 <HAL_GetTick>
 8002334:	4602      	mov	r2, r0
 8002336:	68bb      	ldr	r3, [r7, #8]
 8002338:	1ad3      	subs	r3, r2, r3
 800233a:	68fa      	ldr	r2, [r7, #12]
 800233c:	429a      	cmp	r2, r3
 800233e:	d8f7      	bhi.n	8002330 <HAL_Delay+0x28>
  {
  }
}
 8002340:	bf00      	nop
 8002342:	3710      	adds	r7, #16
 8002344:	46bd      	mov	sp, r7
 8002346:	bd80      	pop	{r7, pc}
 8002348:	2000000c 	.word	0x2000000c

0800234c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b086      	sub	sp, #24
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002354:	2300      	movs	r3, #0
 8002356:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002358:	2300      	movs	r3, #0
 800235a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 800235c:	2300      	movs	r3, #0
 800235e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002360:	2300      	movs	r3, #0
 8002362:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d101      	bne.n	800236e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800236a:	2301      	movs	r3, #1
 800236c:	e0be      	b.n	80024ec <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	689b      	ldr	r3, [r3, #8]
 8002372:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002378:	2b00      	cmp	r3, #0
 800237a:	d109      	bne.n	8002390 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2200      	movs	r2, #0
 8002380:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2200      	movs	r2, #0
 8002386:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800238a:	6878      	ldr	r0, [r7, #4]
 800238c:	f7ff fdba 	bl	8001f04 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002390:	6878      	ldr	r0, [r7, #4]
 8002392:	f000 fbdd 	bl	8002b50 <ADC_ConversionStop_Disable>
 8002396:	4603      	mov	r3, r0
 8002398:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800239e:	f003 0310 	and.w	r3, r3, #16
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	f040 8099 	bne.w	80024da <HAL_ADC_Init+0x18e>
 80023a8:	7dfb      	ldrb	r3, [r7, #23]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	f040 8095 	bne.w	80024da <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023b4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80023b8:	f023 0302 	bic.w	r3, r3, #2
 80023bc:	f043 0202 	orr.w	r2, r3, #2
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80023cc:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	7b1b      	ldrb	r3, [r3, #12]
 80023d2:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80023d4:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80023d6:	68ba      	ldr	r2, [r7, #8]
 80023d8:	4313      	orrs	r3, r2
 80023da:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	689b      	ldr	r3, [r3, #8]
 80023e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80023e4:	d003      	beq.n	80023ee <HAL_ADC_Init+0xa2>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	689b      	ldr	r3, [r3, #8]
 80023ea:	2b01      	cmp	r3, #1
 80023ec:	d102      	bne.n	80023f4 <HAL_ADC_Init+0xa8>
 80023ee:	f44f 7380 	mov.w	r3, #256	; 0x100
 80023f2:	e000      	b.n	80023f6 <HAL_ADC_Init+0xaa>
 80023f4:	2300      	movs	r3, #0
 80023f6:	693a      	ldr	r2, [r7, #16]
 80023f8:	4313      	orrs	r3, r2
 80023fa:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	7d1b      	ldrb	r3, [r3, #20]
 8002400:	2b01      	cmp	r3, #1
 8002402:	d119      	bne.n	8002438 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	7b1b      	ldrb	r3, [r3, #12]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d109      	bne.n	8002420 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	699b      	ldr	r3, [r3, #24]
 8002410:	3b01      	subs	r3, #1
 8002412:	035a      	lsls	r2, r3, #13
 8002414:	693b      	ldr	r3, [r7, #16]
 8002416:	4313      	orrs	r3, r2
 8002418:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800241c:	613b      	str	r3, [r7, #16]
 800241e:	e00b      	b.n	8002438 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002424:	f043 0220 	orr.w	r2, r3, #32
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002430:	f043 0201 	orr.w	r2, r3, #1
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	693a      	ldr	r2, [r7, #16]
 8002448:	430a      	orrs	r2, r1
 800244a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	689a      	ldr	r2, [r3, #8]
 8002452:	4b28      	ldr	r3, [pc, #160]	; (80024f4 <HAL_ADC_Init+0x1a8>)
 8002454:	4013      	ands	r3, r2
 8002456:	687a      	ldr	r2, [r7, #4]
 8002458:	6812      	ldr	r2, [r2, #0]
 800245a:	68b9      	ldr	r1, [r7, #8]
 800245c:	430b      	orrs	r3, r1
 800245e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	689b      	ldr	r3, [r3, #8]
 8002464:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002468:	d003      	beq.n	8002472 <HAL_ADC_Init+0x126>
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	689b      	ldr	r3, [r3, #8]
 800246e:	2b01      	cmp	r3, #1
 8002470:	d104      	bne.n	800247c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	691b      	ldr	r3, [r3, #16]
 8002476:	3b01      	subs	r3, #1
 8002478:	051b      	lsls	r3, r3, #20
 800247a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002482:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	68fa      	ldr	r2, [r7, #12]
 800248c:	430a      	orrs	r2, r1
 800248e:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	689a      	ldr	r2, [r3, #8]
 8002496:	4b18      	ldr	r3, [pc, #96]	; (80024f8 <HAL_ADC_Init+0x1ac>)
 8002498:	4013      	ands	r3, r2
 800249a:	68ba      	ldr	r2, [r7, #8]
 800249c:	429a      	cmp	r2, r3
 800249e:	d10b      	bne.n	80024b8 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2200      	movs	r2, #0
 80024a4:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024aa:	f023 0303 	bic.w	r3, r3, #3
 80024ae:	f043 0201 	orr.w	r2, r3, #1
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80024b6:	e018      	b.n	80024ea <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024bc:	f023 0312 	bic.w	r3, r3, #18
 80024c0:	f043 0210 	orr.w	r2, r3, #16
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024cc:	f043 0201 	orr.w	r2, r3, #1
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80024d4:	2301      	movs	r3, #1
 80024d6:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80024d8:	e007      	b.n	80024ea <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024de:	f043 0210 	orr.w	r2, r3, #16
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80024e6:	2301      	movs	r3, #1
 80024e8:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80024ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80024ec:	4618      	mov	r0, r3
 80024ee:	3718      	adds	r7, #24
 80024f0:	46bd      	mov	sp, r7
 80024f2:	bd80      	pop	{r7, pc}
 80024f4:	ffe1f7fd 	.word	0xffe1f7fd
 80024f8:	ff1f0efe 	.word	0xff1f0efe

080024fc <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b084      	sub	sp, #16
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002504:	2300      	movs	r3, #0
 8002506:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800250e:	2b01      	cmp	r3, #1
 8002510:	d101      	bne.n	8002516 <HAL_ADC_Start+0x1a>
 8002512:	2302      	movs	r3, #2
 8002514:	e098      	b.n	8002648 <HAL_ADC_Start+0x14c>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2201      	movs	r2, #1
 800251a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 800251e:	6878      	ldr	r0, [r7, #4]
 8002520:	f000 fac4 	bl	8002aac <ADC_Enable>
 8002524:	4603      	mov	r3, r0
 8002526:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8002528:	7bfb      	ldrb	r3, [r7, #15]
 800252a:	2b00      	cmp	r3, #0
 800252c:	f040 8087 	bne.w	800263e <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002534:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002538:	f023 0301 	bic.w	r3, r3, #1
 800253c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4a41      	ldr	r2, [pc, #260]	; (8002650 <HAL_ADC_Start+0x154>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d105      	bne.n	800255a <HAL_ADC_Start+0x5e>
 800254e:	4b41      	ldr	r3, [pc, #260]	; (8002654 <HAL_ADC_Start+0x158>)
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002556:	2b00      	cmp	r3, #0
 8002558:	d115      	bne.n	8002586 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800255e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002570:	2b00      	cmp	r3, #0
 8002572:	d026      	beq.n	80025c2 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002578:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800257c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002584:	e01d      	b.n	80025c2 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800258a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4a2f      	ldr	r2, [pc, #188]	; (8002654 <HAL_ADC_Start+0x158>)
 8002598:	4293      	cmp	r3, r2
 800259a:	d004      	beq.n	80025a6 <HAL_ADC_Start+0xaa>
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4a2b      	ldr	r2, [pc, #172]	; (8002650 <HAL_ADC_Start+0x154>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d10d      	bne.n	80025c2 <HAL_ADC_Start+0xc6>
 80025a6:	4b2b      	ldr	r3, [pc, #172]	; (8002654 <HAL_ADC_Start+0x158>)
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d007      	beq.n	80025c2 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025b6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80025ba:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025c6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d006      	beq.n	80025dc <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025d2:	f023 0206 	bic.w	r2, r3, #6
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	62da      	str	r2, [r3, #44]	; 0x2c
 80025da:	e002      	b.n	80025e2 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2200      	movs	r2, #0
 80025e0:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2200      	movs	r2, #0
 80025e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f06f 0202 	mvn.w	r2, #2
 80025f2:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	689b      	ldr	r3, [r3, #8]
 80025fa:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80025fe:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002602:	d113      	bne.n	800262c <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002608:	4a11      	ldr	r2, [pc, #68]	; (8002650 <HAL_ADC_Start+0x154>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d105      	bne.n	800261a <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800260e:	4b11      	ldr	r3, [pc, #68]	; (8002654 <HAL_ADC_Start+0x158>)
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002616:	2b00      	cmp	r3, #0
 8002618:	d108      	bne.n	800262c <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	689a      	ldr	r2, [r3, #8]
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8002628:	609a      	str	r2, [r3, #8]
 800262a:	e00c      	b.n	8002646 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	689a      	ldr	r2, [r3, #8]
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800263a:	609a      	str	r2, [r3, #8]
 800263c:	e003      	b.n	8002646 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2200      	movs	r2, #0
 8002642:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8002646:	7bfb      	ldrb	r3, [r7, #15]
}
 8002648:	4618      	mov	r0, r3
 800264a:	3710      	adds	r7, #16
 800264c:	46bd      	mov	sp, r7
 800264e:	bd80      	pop	{r7, pc}
 8002650:	40012800 	.word	0x40012800
 8002654:	40012400 	.word	0x40012400

08002658 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b084      	sub	sp, #16
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002660:	2300      	movs	r3, #0
 8002662:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800266a:	2b01      	cmp	r3, #1
 800266c:	d101      	bne.n	8002672 <HAL_ADC_Stop+0x1a>
 800266e:	2302      	movs	r3, #2
 8002670:	e01a      	b.n	80026a8 <HAL_ADC_Stop+0x50>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2201      	movs	r2, #1
 8002676:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800267a:	6878      	ldr	r0, [r7, #4]
 800267c:	f000 fa68 	bl	8002b50 <ADC_ConversionStop_Disable>
 8002680:	4603      	mov	r3, r0
 8002682:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002684:	7bfb      	ldrb	r3, [r7, #15]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d109      	bne.n	800269e <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800268e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002692:	f023 0301 	bic.w	r3, r3, #1
 8002696:	f043 0201 	orr.w	r2, r3, #1
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2200      	movs	r2, #0
 80026a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80026a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80026a8:	4618      	mov	r0, r3
 80026aa:	3710      	adds	r7, #16
 80026ac:	46bd      	mov	sp, r7
 80026ae:	bd80      	pop	{r7, pc}

080026b0 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80026b0:	b590      	push	{r4, r7, lr}
 80026b2:	b087      	sub	sp, #28
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
 80026b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80026ba:	2300      	movs	r3, #0
 80026bc:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 80026be:	2300      	movs	r3, #0
 80026c0:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 80026c2:	2300      	movs	r3, #0
 80026c4:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 80026c6:	f7ff fe15 	bl	80022f4 <HAL_GetTick>
 80026ca:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	689b      	ldr	r3, [r3, #8]
 80026d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d00b      	beq.n	80026f2 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026de:	f043 0220 	orr.w	r2, r3, #32
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2200      	movs	r2, #0
 80026ea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 80026ee:	2301      	movs	r3, #1
 80026f0:	e0c8      	b.n	8002884 <HAL_ADC_PollForConversion+0x1d4>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d12a      	bne.n	8002756 <HAL_ADC_PollForConversion+0xa6>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002706:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800270a:	2b00      	cmp	r3, #0
 800270c:	d123      	bne.n	8002756 <HAL_ADC_PollForConversion+0xa6>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800270e:	e01a      	b.n	8002746 <HAL_ADC_PollForConversion+0x96>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002716:	d016      	beq.n	8002746 <HAL_ADC_PollForConversion+0x96>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d007      	beq.n	800272e <HAL_ADC_PollForConversion+0x7e>
 800271e:	f7ff fde9 	bl	80022f4 <HAL_GetTick>
 8002722:	4602      	mov	r2, r0
 8002724:	697b      	ldr	r3, [r7, #20]
 8002726:	1ad3      	subs	r3, r2, r3
 8002728:	683a      	ldr	r2, [r7, #0]
 800272a:	429a      	cmp	r2, r3
 800272c:	d20b      	bcs.n	8002746 <HAL_ADC_PollForConversion+0x96>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002732:	f043 0204 	orr.w	r2, r3, #4
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2200      	movs	r2, #0
 800273e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 8002742:	2303      	movs	r3, #3
 8002744:	e09e      	b.n	8002884 <HAL_ADC_PollForConversion+0x1d4>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f003 0302 	and.w	r3, r3, #2
 8002750:	2b00      	cmp	r3, #0
 8002752:	d0dd      	beq.n	8002710 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002754:	e06c      	b.n	8002830 <HAL_ADC_PollForConversion+0x180>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8002756:	4b4d      	ldr	r3, [pc, #308]	; (800288c <HAL_ADC_PollForConversion+0x1dc>)
 8002758:	681c      	ldr	r4, [r3, #0]
 800275a:	2002      	movs	r0, #2
 800275c:	f002 fb5c 	bl	8004e18 <HAL_RCCEx_GetPeriphCLKFreq>
 8002760:	4603      	mov	r3, r0
 8002762:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	6919      	ldr	r1, [r3, #16]
 800276c:	4b48      	ldr	r3, [pc, #288]	; (8002890 <HAL_ADC_PollForConversion+0x1e0>)
 800276e:	400b      	ands	r3, r1
 8002770:	2b00      	cmp	r3, #0
 8002772:	d118      	bne.n	80027a6 <HAL_ADC_PollForConversion+0xf6>
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	68d9      	ldr	r1, [r3, #12]
 800277a:	4b46      	ldr	r3, [pc, #280]	; (8002894 <HAL_ADC_PollForConversion+0x1e4>)
 800277c:	400b      	ands	r3, r1
 800277e:	2b00      	cmp	r3, #0
 8002780:	d111      	bne.n	80027a6 <HAL_ADC_PollForConversion+0xf6>
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	6919      	ldr	r1, [r3, #16]
 8002788:	4b43      	ldr	r3, [pc, #268]	; (8002898 <HAL_ADC_PollForConversion+0x1e8>)
 800278a:	400b      	ands	r3, r1
 800278c:	2b00      	cmp	r3, #0
 800278e:	d108      	bne.n	80027a2 <HAL_ADC_PollForConversion+0xf2>
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	68d9      	ldr	r1, [r3, #12]
 8002796:	4b41      	ldr	r3, [pc, #260]	; (800289c <HAL_ADC_PollForConversion+0x1ec>)
 8002798:	400b      	ands	r3, r1
 800279a:	2b00      	cmp	r3, #0
 800279c:	d101      	bne.n	80027a2 <HAL_ADC_PollForConversion+0xf2>
 800279e:	2314      	movs	r3, #20
 80027a0:	e020      	b.n	80027e4 <HAL_ADC_PollForConversion+0x134>
 80027a2:	2329      	movs	r3, #41	; 0x29
 80027a4:	e01e      	b.n	80027e4 <HAL_ADC_PollForConversion+0x134>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	6919      	ldr	r1, [r3, #16]
 80027ac:	4b3a      	ldr	r3, [pc, #232]	; (8002898 <HAL_ADC_PollForConversion+0x1e8>)
 80027ae:	400b      	ands	r3, r1
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d106      	bne.n	80027c2 <HAL_ADC_PollForConversion+0x112>
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	68d9      	ldr	r1, [r3, #12]
 80027ba:	4b38      	ldr	r3, [pc, #224]	; (800289c <HAL_ADC_PollForConversion+0x1ec>)
 80027bc:	400b      	ands	r3, r1
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d00d      	beq.n	80027de <HAL_ADC_PollForConversion+0x12e>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	6919      	ldr	r1, [r3, #16]
 80027c8:	4b35      	ldr	r3, [pc, #212]	; (80028a0 <HAL_ADC_PollForConversion+0x1f0>)
 80027ca:	400b      	ands	r3, r1
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d108      	bne.n	80027e2 <HAL_ADC_PollForConversion+0x132>
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	68d9      	ldr	r1, [r3, #12]
 80027d6:	4b32      	ldr	r3, [pc, #200]	; (80028a0 <HAL_ADC_PollForConversion+0x1f0>)
 80027d8:	400b      	ands	r3, r1
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d101      	bne.n	80027e2 <HAL_ADC_PollForConversion+0x132>
 80027de:	2354      	movs	r3, #84	; 0x54
 80027e0:	e000      	b.n	80027e4 <HAL_ADC_PollForConversion+0x134>
 80027e2:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 80027e4:	fb02 f303 	mul.w	r3, r2, r3
 80027e8:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80027ea:	e01d      	b.n	8002828 <HAL_ADC_PollForConversion+0x178>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027f2:	d016      	beq.n	8002822 <HAL_ADC_PollForConversion+0x172>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d007      	beq.n	800280a <HAL_ADC_PollForConversion+0x15a>
 80027fa:	f7ff fd7b 	bl	80022f4 <HAL_GetTick>
 80027fe:	4602      	mov	r2, r0
 8002800:	697b      	ldr	r3, [r7, #20]
 8002802:	1ad3      	subs	r3, r2, r3
 8002804:	683a      	ldr	r2, [r7, #0]
 8002806:	429a      	cmp	r2, r3
 8002808:	d20b      	bcs.n	8002822 <HAL_ADC_PollForConversion+0x172>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800280e:	f043 0204 	orr.w	r2, r3, #4
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	2200      	movs	r2, #0
 800281a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 800281e:	2303      	movs	r3, #3
 8002820:	e030      	b.n	8002884 <HAL_ADC_PollForConversion+0x1d4>
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	3301      	adds	r3, #1
 8002826:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	693a      	ldr	r2, [r7, #16]
 800282c:	429a      	cmp	r2, r3
 800282e:	d8dd      	bhi.n	80027ec <HAL_ADC_PollForConversion+0x13c>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f06f 0212 	mvn.w	r2, #18
 8002838:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800283e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	689b      	ldr	r3, [r3, #8]
 800284c:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002850:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002854:	d115      	bne.n	8002882 <HAL_ADC_PollForConversion+0x1d2>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800285a:	2b00      	cmp	r3, #0
 800285c:	d111      	bne.n	8002882 <HAL_ADC_PollForConversion+0x1d2>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002862:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800286e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002872:	2b00      	cmp	r3, #0
 8002874:	d105      	bne.n	8002882 <HAL_ADC_PollForConversion+0x1d2>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800287a:	f043 0201 	orr.w	r2, r3, #1
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002882:	2300      	movs	r3, #0
}
 8002884:	4618      	mov	r0, r3
 8002886:	371c      	adds	r7, #28
 8002888:	46bd      	mov	sp, r7
 800288a:	bd90      	pop	{r4, r7, pc}
 800288c:	20000004 	.word	0x20000004
 8002890:	24924924 	.word	0x24924924
 8002894:	00924924 	.word	0x00924924
 8002898:	12492492 	.word	0x12492492
 800289c:	00492492 	.word	0x00492492
 80028a0:	00249249 	.word	0x00249249

080028a4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80028a4:	b480      	push	{r7}
 80028a6:	b083      	sub	sp, #12
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80028b2:	4618      	mov	r0, r3
 80028b4:	370c      	adds	r7, #12
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bc80      	pop	{r7}
 80028ba:	4770      	bx	lr

080028bc <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80028bc:	b480      	push	{r7}
 80028be:	b085      	sub	sp, #20
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
 80028c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80028c6:	2300      	movs	r3, #0
 80028c8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80028ca:	2300      	movs	r3, #0
 80028cc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80028d4:	2b01      	cmp	r3, #1
 80028d6:	d101      	bne.n	80028dc <HAL_ADC_ConfigChannel+0x20>
 80028d8:	2302      	movs	r3, #2
 80028da:	e0dc      	b.n	8002a96 <HAL_ADC_ConfigChannel+0x1da>
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2201      	movs	r2, #1
 80028e0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	2b06      	cmp	r3, #6
 80028ea:	d81c      	bhi.n	8002926 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	685a      	ldr	r2, [r3, #4]
 80028f6:	4613      	mov	r3, r2
 80028f8:	009b      	lsls	r3, r3, #2
 80028fa:	4413      	add	r3, r2
 80028fc:	3b05      	subs	r3, #5
 80028fe:	221f      	movs	r2, #31
 8002900:	fa02 f303 	lsl.w	r3, r2, r3
 8002904:	43db      	mvns	r3, r3
 8002906:	4019      	ands	r1, r3
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	6818      	ldr	r0, [r3, #0]
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	685a      	ldr	r2, [r3, #4]
 8002910:	4613      	mov	r3, r2
 8002912:	009b      	lsls	r3, r3, #2
 8002914:	4413      	add	r3, r2
 8002916:	3b05      	subs	r3, #5
 8002918:	fa00 f203 	lsl.w	r2, r0, r3
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	430a      	orrs	r2, r1
 8002922:	635a      	str	r2, [r3, #52]	; 0x34
 8002924:	e03c      	b.n	80029a0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	2b0c      	cmp	r3, #12
 800292c:	d81c      	bhi.n	8002968 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	685a      	ldr	r2, [r3, #4]
 8002938:	4613      	mov	r3, r2
 800293a:	009b      	lsls	r3, r3, #2
 800293c:	4413      	add	r3, r2
 800293e:	3b23      	subs	r3, #35	; 0x23
 8002940:	221f      	movs	r2, #31
 8002942:	fa02 f303 	lsl.w	r3, r2, r3
 8002946:	43db      	mvns	r3, r3
 8002948:	4019      	ands	r1, r3
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	6818      	ldr	r0, [r3, #0]
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	685a      	ldr	r2, [r3, #4]
 8002952:	4613      	mov	r3, r2
 8002954:	009b      	lsls	r3, r3, #2
 8002956:	4413      	add	r3, r2
 8002958:	3b23      	subs	r3, #35	; 0x23
 800295a:	fa00 f203 	lsl.w	r2, r0, r3
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	430a      	orrs	r2, r1
 8002964:	631a      	str	r2, [r3, #48]	; 0x30
 8002966:	e01b      	b.n	80029a0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	685a      	ldr	r2, [r3, #4]
 8002972:	4613      	mov	r3, r2
 8002974:	009b      	lsls	r3, r3, #2
 8002976:	4413      	add	r3, r2
 8002978:	3b41      	subs	r3, #65	; 0x41
 800297a:	221f      	movs	r2, #31
 800297c:	fa02 f303 	lsl.w	r3, r2, r3
 8002980:	43db      	mvns	r3, r3
 8002982:	4019      	ands	r1, r3
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	6818      	ldr	r0, [r3, #0]
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	685a      	ldr	r2, [r3, #4]
 800298c:	4613      	mov	r3, r2
 800298e:	009b      	lsls	r3, r3, #2
 8002990:	4413      	add	r3, r2
 8002992:	3b41      	subs	r3, #65	; 0x41
 8002994:	fa00 f203 	lsl.w	r2, r0, r3
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	430a      	orrs	r2, r1
 800299e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	2b09      	cmp	r3, #9
 80029a6:	d91c      	bls.n	80029e2 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	68d9      	ldr	r1, [r3, #12]
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	681a      	ldr	r2, [r3, #0]
 80029b2:	4613      	mov	r3, r2
 80029b4:	005b      	lsls	r3, r3, #1
 80029b6:	4413      	add	r3, r2
 80029b8:	3b1e      	subs	r3, #30
 80029ba:	2207      	movs	r2, #7
 80029bc:	fa02 f303 	lsl.w	r3, r2, r3
 80029c0:	43db      	mvns	r3, r3
 80029c2:	4019      	ands	r1, r3
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	6898      	ldr	r0, [r3, #8]
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	681a      	ldr	r2, [r3, #0]
 80029cc:	4613      	mov	r3, r2
 80029ce:	005b      	lsls	r3, r3, #1
 80029d0:	4413      	add	r3, r2
 80029d2:	3b1e      	subs	r3, #30
 80029d4:	fa00 f203 	lsl.w	r2, r0, r3
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	430a      	orrs	r2, r1
 80029de:	60da      	str	r2, [r3, #12]
 80029e0:	e019      	b.n	8002a16 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	6919      	ldr	r1, [r3, #16]
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	681a      	ldr	r2, [r3, #0]
 80029ec:	4613      	mov	r3, r2
 80029ee:	005b      	lsls	r3, r3, #1
 80029f0:	4413      	add	r3, r2
 80029f2:	2207      	movs	r2, #7
 80029f4:	fa02 f303 	lsl.w	r3, r2, r3
 80029f8:	43db      	mvns	r3, r3
 80029fa:	4019      	ands	r1, r3
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	6898      	ldr	r0, [r3, #8]
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	681a      	ldr	r2, [r3, #0]
 8002a04:	4613      	mov	r3, r2
 8002a06:	005b      	lsls	r3, r3, #1
 8002a08:	4413      	add	r3, r2
 8002a0a:	fa00 f203 	lsl.w	r2, r0, r3
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	430a      	orrs	r2, r1
 8002a14:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	2b10      	cmp	r3, #16
 8002a1c:	d003      	beq.n	8002a26 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002a22:	2b11      	cmp	r3, #17
 8002a24:	d132      	bne.n	8002a8c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4a1d      	ldr	r2, [pc, #116]	; (8002aa0 <HAL_ADC_ConfigChannel+0x1e4>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d125      	bne.n	8002a7c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	689b      	ldr	r3, [r3, #8]
 8002a36:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d126      	bne.n	8002a8c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	689a      	ldr	r2, [r3, #8]
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002a4c:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	2b10      	cmp	r3, #16
 8002a54:	d11a      	bne.n	8002a8c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002a56:	4b13      	ldr	r3, [pc, #76]	; (8002aa4 <HAL_ADC_ConfigChannel+0x1e8>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4a13      	ldr	r2, [pc, #76]	; (8002aa8 <HAL_ADC_ConfigChannel+0x1ec>)
 8002a5c:	fba2 2303 	umull	r2, r3, r2, r3
 8002a60:	0c9a      	lsrs	r2, r3, #18
 8002a62:	4613      	mov	r3, r2
 8002a64:	009b      	lsls	r3, r3, #2
 8002a66:	4413      	add	r3, r2
 8002a68:	005b      	lsls	r3, r3, #1
 8002a6a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002a6c:	e002      	b.n	8002a74 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002a6e:	68bb      	ldr	r3, [r7, #8]
 8002a70:	3b01      	subs	r3, #1
 8002a72:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002a74:	68bb      	ldr	r3, [r7, #8]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d1f9      	bne.n	8002a6e <HAL_ADC_ConfigChannel+0x1b2>
 8002a7a:	e007      	b.n	8002a8c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a80:	f043 0220 	orr.w	r2, r3, #32
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002a88:	2301      	movs	r3, #1
 8002a8a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2200      	movs	r2, #0
 8002a90:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002a94:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a96:	4618      	mov	r0, r3
 8002a98:	3714      	adds	r7, #20
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bc80      	pop	{r7}
 8002a9e:	4770      	bx	lr
 8002aa0:	40012400 	.word	0x40012400
 8002aa4:	20000004 	.word	0x20000004
 8002aa8:	431bde83 	.word	0x431bde83

08002aac <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b084      	sub	sp, #16
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002ab8:	2300      	movs	r3, #0
 8002aba:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	689b      	ldr	r3, [r3, #8]
 8002ac2:	f003 0301 	and.w	r3, r3, #1
 8002ac6:	2b01      	cmp	r3, #1
 8002ac8:	d039      	beq.n	8002b3e <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	689a      	ldr	r2, [r3, #8]
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f042 0201 	orr.w	r2, r2, #1
 8002ad8:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002ada:	4b1b      	ldr	r3, [pc, #108]	; (8002b48 <ADC_Enable+0x9c>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4a1b      	ldr	r2, [pc, #108]	; (8002b4c <ADC_Enable+0xa0>)
 8002ae0:	fba2 2303 	umull	r2, r3, r2, r3
 8002ae4:	0c9b      	lsrs	r3, r3, #18
 8002ae6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002ae8:	e002      	b.n	8002af0 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002aea:	68bb      	ldr	r3, [r7, #8]
 8002aec:	3b01      	subs	r3, #1
 8002aee:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002af0:	68bb      	ldr	r3, [r7, #8]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d1f9      	bne.n	8002aea <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002af6:	f7ff fbfd 	bl	80022f4 <HAL_GetTick>
 8002afa:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002afc:	e018      	b.n	8002b30 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002afe:	f7ff fbf9 	bl	80022f4 <HAL_GetTick>
 8002b02:	4602      	mov	r2, r0
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	1ad3      	subs	r3, r2, r3
 8002b08:	2b02      	cmp	r3, #2
 8002b0a:	d911      	bls.n	8002b30 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b10:	f043 0210 	orr.w	r2, r3, #16
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b1c:	f043 0201 	orr.w	r2, r3, #1
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2200      	movs	r2, #0
 8002b28:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	e007      	b.n	8002b40 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	689b      	ldr	r3, [r3, #8]
 8002b36:	f003 0301 	and.w	r3, r3, #1
 8002b3a:	2b01      	cmp	r3, #1
 8002b3c:	d1df      	bne.n	8002afe <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002b3e:	2300      	movs	r3, #0
}
 8002b40:	4618      	mov	r0, r3
 8002b42:	3710      	adds	r7, #16
 8002b44:	46bd      	mov	sp, r7
 8002b46:	bd80      	pop	{r7, pc}
 8002b48:	20000004 	.word	0x20000004
 8002b4c:	431bde83 	.word	0x431bde83

08002b50 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b084      	sub	sp, #16
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002b58:	2300      	movs	r3, #0
 8002b5a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	689b      	ldr	r3, [r3, #8]
 8002b62:	f003 0301 	and.w	r3, r3, #1
 8002b66:	2b01      	cmp	r3, #1
 8002b68:	d127      	bne.n	8002bba <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	689a      	ldr	r2, [r3, #8]
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f022 0201 	bic.w	r2, r2, #1
 8002b78:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002b7a:	f7ff fbbb 	bl	80022f4 <HAL_GetTick>
 8002b7e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002b80:	e014      	b.n	8002bac <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002b82:	f7ff fbb7 	bl	80022f4 <HAL_GetTick>
 8002b86:	4602      	mov	r2, r0
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	1ad3      	subs	r3, r2, r3
 8002b8c:	2b02      	cmp	r3, #2
 8002b8e:	d90d      	bls.n	8002bac <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b94:	f043 0210 	orr.w	r2, r3, #16
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ba0:	f043 0201 	orr.w	r2, r3, #1
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8002ba8:	2301      	movs	r3, #1
 8002baa:	e007      	b.n	8002bbc <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	689b      	ldr	r3, [r3, #8]
 8002bb2:	f003 0301 	and.w	r3, r3, #1
 8002bb6:	2b01      	cmp	r3, #1
 8002bb8:	d0e3      	beq.n	8002b82 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002bba:	2300      	movs	r3, #0
}
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	3710      	adds	r7, #16
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	bd80      	pop	{r7, pc}

08002bc4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	b085      	sub	sp, #20
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	f003 0307 	and.w	r3, r3, #7
 8002bd2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002bd4:	4b0c      	ldr	r3, [pc, #48]	; (8002c08 <__NVIC_SetPriorityGrouping+0x44>)
 8002bd6:	68db      	ldr	r3, [r3, #12]
 8002bd8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002bda:	68ba      	ldr	r2, [r7, #8]
 8002bdc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002be0:	4013      	ands	r3, r2
 8002be2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002be8:	68bb      	ldr	r3, [r7, #8]
 8002bea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002bec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002bf0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002bf4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002bf6:	4a04      	ldr	r2, [pc, #16]	; (8002c08 <__NVIC_SetPriorityGrouping+0x44>)
 8002bf8:	68bb      	ldr	r3, [r7, #8]
 8002bfa:	60d3      	str	r3, [r2, #12]
}
 8002bfc:	bf00      	nop
 8002bfe:	3714      	adds	r7, #20
 8002c00:	46bd      	mov	sp, r7
 8002c02:	bc80      	pop	{r7}
 8002c04:	4770      	bx	lr
 8002c06:	bf00      	nop
 8002c08:	e000ed00 	.word	0xe000ed00

08002c0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c10:	4b04      	ldr	r3, [pc, #16]	; (8002c24 <__NVIC_GetPriorityGrouping+0x18>)
 8002c12:	68db      	ldr	r3, [r3, #12]
 8002c14:	0a1b      	lsrs	r3, r3, #8
 8002c16:	f003 0307 	and.w	r3, r3, #7
}
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	bc80      	pop	{r7}
 8002c20:	4770      	bx	lr
 8002c22:	bf00      	nop
 8002c24:	e000ed00 	.word	0xe000ed00

08002c28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	b083      	sub	sp, #12
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	4603      	mov	r3, r0
 8002c30:	6039      	str	r1, [r7, #0]
 8002c32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	db0a      	blt.n	8002c52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	b2da      	uxtb	r2, r3
 8002c40:	490c      	ldr	r1, [pc, #48]	; (8002c74 <__NVIC_SetPriority+0x4c>)
 8002c42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c46:	0112      	lsls	r2, r2, #4
 8002c48:	b2d2      	uxtb	r2, r2
 8002c4a:	440b      	add	r3, r1
 8002c4c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c50:	e00a      	b.n	8002c68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	b2da      	uxtb	r2, r3
 8002c56:	4908      	ldr	r1, [pc, #32]	; (8002c78 <__NVIC_SetPriority+0x50>)
 8002c58:	79fb      	ldrb	r3, [r7, #7]
 8002c5a:	f003 030f 	and.w	r3, r3, #15
 8002c5e:	3b04      	subs	r3, #4
 8002c60:	0112      	lsls	r2, r2, #4
 8002c62:	b2d2      	uxtb	r2, r2
 8002c64:	440b      	add	r3, r1
 8002c66:	761a      	strb	r2, [r3, #24]
}
 8002c68:	bf00      	nop
 8002c6a:	370c      	adds	r7, #12
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bc80      	pop	{r7}
 8002c70:	4770      	bx	lr
 8002c72:	bf00      	nop
 8002c74:	e000e100 	.word	0xe000e100
 8002c78:	e000ed00 	.word	0xe000ed00

08002c7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	b089      	sub	sp, #36	; 0x24
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	60f8      	str	r0, [r7, #12]
 8002c84:	60b9      	str	r1, [r7, #8]
 8002c86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	f003 0307 	and.w	r3, r3, #7
 8002c8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c90:	69fb      	ldr	r3, [r7, #28]
 8002c92:	f1c3 0307 	rsb	r3, r3, #7
 8002c96:	2b04      	cmp	r3, #4
 8002c98:	bf28      	it	cs
 8002c9a:	2304      	movcs	r3, #4
 8002c9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c9e:	69fb      	ldr	r3, [r7, #28]
 8002ca0:	3304      	adds	r3, #4
 8002ca2:	2b06      	cmp	r3, #6
 8002ca4:	d902      	bls.n	8002cac <NVIC_EncodePriority+0x30>
 8002ca6:	69fb      	ldr	r3, [r7, #28]
 8002ca8:	3b03      	subs	r3, #3
 8002caa:	e000      	b.n	8002cae <NVIC_EncodePriority+0x32>
 8002cac:	2300      	movs	r3, #0
 8002cae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cb0:	f04f 32ff 	mov.w	r2, #4294967295
 8002cb4:	69bb      	ldr	r3, [r7, #24]
 8002cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cba:	43da      	mvns	r2, r3
 8002cbc:	68bb      	ldr	r3, [r7, #8]
 8002cbe:	401a      	ands	r2, r3
 8002cc0:	697b      	ldr	r3, [r7, #20]
 8002cc2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002cc4:	f04f 31ff 	mov.w	r1, #4294967295
 8002cc8:	697b      	ldr	r3, [r7, #20]
 8002cca:	fa01 f303 	lsl.w	r3, r1, r3
 8002cce:	43d9      	mvns	r1, r3
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cd4:	4313      	orrs	r3, r2
         );
}
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	3724      	adds	r7, #36	; 0x24
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bc80      	pop	{r7}
 8002cde:	4770      	bx	lr

08002ce0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b082      	sub	sp, #8
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	3b01      	subs	r3, #1
 8002cec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002cf0:	d301      	bcc.n	8002cf6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	e00f      	b.n	8002d16 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002cf6:	4a0a      	ldr	r2, [pc, #40]	; (8002d20 <SysTick_Config+0x40>)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	3b01      	subs	r3, #1
 8002cfc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002cfe:	210f      	movs	r1, #15
 8002d00:	f04f 30ff 	mov.w	r0, #4294967295
 8002d04:	f7ff ff90 	bl	8002c28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d08:	4b05      	ldr	r3, [pc, #20]	; (8002d20 <SysTick_Config+0x40>)
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d0e:	4b04      	ldr	r3, [pc, #16]	; (8002d20 <SysTick_Config+0x40>)
 8002d10:	2207      	movs	r2, #7
 8002d12:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d14:	2300      	movs	r3, #0
}
 8002d16:	4618      	mov	r0, r3
 8002d18:	3708      	adds	r7, #8
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bd80      	pop	{r7, pc}
 8002d1e:	bf00      	nop
 8002d20:	e000e010 	.word	0xe000e010

08002d24 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b082      	sub	sp, #8
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d2c:	6878      	ldr	r0, [r7, #4]
 8002d2e:	f7ff ff49 	bl	8002bc4 <__NVIC_SetPriorityGrouping>
}
 8002d32:	bf00      	nop
 8002d34:	3708      	adds	r7, #8
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bd80      	pop	{r7, pc}

08002d3a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002d3a:	b580      	push	{r7, lr}
 8002d3c:	b086      	sub	sp, #24
 8002d3e:	af00      	add	r7, sp, #0
 8002d40:	4603      	mov	r3, r0
 8002d42:	60b9      	str	r1, [r7, #8]
 8002d44:	607a      	str	r2, [r7, #4]
 8002d46:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002d48:	2300      	movs	r3, #0
 8002d4a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002d4c:	f7ff ff5e 	bl	8002c0c <__NVIC_GetPriorityGrouping>
 8002d50:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d52:	687a      	ldr	r2, [r7, #4]
 8002d54:	68b9      	ldr	r1, [r7, #8]
 8002d56:	6978      	ldr	r0, [r7, #20]
 8002d58:	f7ff ff90 	bl	8002c7c <NVIC_EncodePriority>
 8002d5c:	4602      	mov	r2, r0
 8002d5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d62:	4611      	mov	r1, r2
 8002d64:	4618      	mov	r0, r3
 8002d66:	f7ff ff5f 	bl	8002c28 <__NVIC_SetPriority>
}
 8002d6a:	bf00      	nop
 8002d6c:	3718      	adds	r7, #24
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bd80      	pop	{r7, pc}

08002d72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d72:	b580      	push	{r7, lr}
 8002d74:	b082      	sub	sp, #8
 8002d76:	af00      	add	r7, sp, #0
 8002d78:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d7a:	6878      	ldr	r0, [r7, #4]
 8002d7c:	f7ff ffb0 	bl	8002ce0 <SysTick_Config>
 8002d80:	4603      	mov	r3, r0
}
 8002d82:	4618      	mov	r0, r3
 8002d84:	3708      	adds	r7, #8
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bd80      	pop	{r7, pc}
	...

08002d8c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	b08b      	sub	sp, #44	; 0x2c
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
 8002d94:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002d96:	2300      	movs	r3, #0
 8002d98:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d9e:	e127      	b.n	8002ff0 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002da0:	2201      	movs	r2, #1
 8002da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002da4:	fa02 f303 	lsl.w	r3, r2, r3
 8002da8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	69fa      	ldr	r2, [r7, #28]
 8002db0:	4013      	ands	r3, r2
 8002db2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002db4:	69ba      	ldr	r2, [r7, #24]
 8002db6:	69fb      	ldr	r3, [r7, #28]
 8002db8:	429a      	cmp	r2, r3
 8002dba:	f040 8116 	bne.w	8002fea <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	2b12      	cmp	r3, #18
 8002dc4:	d034      	beq.n	8002e30 <HAL_GPIO_Init+0xa4>
 8002dc6:	2b12      	cmp	r3, #18
 8002dc8:	d80d      	bhi.n	8002de6 <HAL_GPIO_Init+0x5a>
 8002dca:	2b02      	cmp	r3, #2
 8002dcc:	d02b      	beq.n	8002e26 <HAL_GPIO_Init+0x9a>
 8002dce:	2b02      	cmp	r3, #2
 8002dd0:	d804      	bhi.n	8002ddc <HAL_GPIO_Init+0x50>
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d031      	beq.n	8002e3a <HAL_GPIO_Init+0xae>
 8002dd6:	2b01      	cmp	r3, #1
 8002dd8:	d01c      	beq.n	8002e14 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002dda:	e048      	b.n	8002e6e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002ddc:	2b03      	cmp	r3, #3
 8002dde:	d043      	beq.n	8002e68 <HAL_GPIO_Init+0xdc>
 8002de0:	2b11      	cmp	r3, #17
 8002de2:	d01b      	beq.n	8002e1c <HAL_GPIO_Init+0x90>
          break;
 8002de4:	e043      	b.n	8002e6e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002de6:	4a89      	ldr	r2, [pc, #548]	; (800300c <HAL_GPIO_Init+0x280>)
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d026      	beq.n	8002e3a <HAL_GPIO_Init+0xae>
 8002dec:	4a87      	ldr	r2, [pc, #540]	; (800300c <HAL_GPIO_Init+0x280>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d806      	bhi.n	8002e00 <HAL_GPIO_Init+0x74>
 8002df2:	4a87      	ldr	r2, [pc, #540]	; (8003010 <HAL_GPIO_Init+0x284>)
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d020      	beq.n	8002e3a <HAL_GPIO_Init+0xae>
 8002df8:	4a86      	ldr	r2, [pc, #536]	; (8003014 <HAL_GPIO_Init+0x288>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d01d      	beq.n	8002e3a <HAL_GPIO_Init+0xae>
          break;
 8002dfe:	e036      	b.n	8002e6e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002e00:	4a85      	ldr	r2, [pc, #532]	; (8003018 <HAL_GPIO_Init+0x28c>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d019      	beq.n	8002e3a <HAL_GPIO_Init+0xae>
 8002e06:	4a85      	ldr	r2, [pc, #532]	; (800301c <HAL_GPIO_Init+0x290>)
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d016      	beq.n	8002e3a <HAL_GPIO_Init+0xae>
 8002e0c:	4a84      	ldr	r2, [pc, #528]	; (8003020 <HAL_GPIO_Init+0x294>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d013      	beq.n	8002e3a <HAL_GPIO_Init+0xae>
          break;
 8002e12:	e02c      	b.n	8002e6e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	68db      	ldr	r3, [r3, #12]
 8002e18:	623b      	str	r3, [r7, #32]
          break;
 8002e1a:	e028      	b.n	8002e6e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	68db      	ldr	r3, [r3, #12]
 8002e20:	3304      	adds	r3, #4
 8002e22:	623b      	str	r3, [r7, #32]
          break;
 8002e24:	e023      	b.n	8002e6e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	68db      	ldr	r3, [r3, #12]
 8002e2a:	3308      	adds	r3, #8
 8002e2c:	623b      	str	r3, [r7, #32]
          break;
 8002e2e:	e01e      	b.n	8002e6e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	68db      	ldr	r3, [r3, #12]
 8002e34:	330c      	adds	r3, #12
 8002e36:	623b      	str	r3, [r7, #32]
          break;
 8002e38:	e019      	b.n	8002e6e <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	689b      	ldr	r3, [r3, #8]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d102      	bne.n	8002e48 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002e42:	2304      	movs	r3, #4
 8002e44:	623b      	str	r3, [r7, #32]
          break;
 8002e46:	e012      	b.n	8002e6e <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	689b      	ldr	r3, [r3, #8]
 8002e4c:	2b01      	cmp	r3, #1
 8002e4e:	d105      	bne.n	8002e5c <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002e50:	2308      	movs	r3, #8
 8002e52:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	69fa      	ldr	r2, [r7, #28]
 8002e58:	611a      	str	r2, [r3, #16]
          break;
 8002e5a:	e008      	b.n	8002e6e <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002e5c:	2308      	movs	r3, #8
 8002e5e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	69fa      	ldr	r2, [r7, #28]
 8002e64:	615a      	str	r2, [r3, #20]
          break;
 8002e66:	e002      	b.n	8002e6e <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002e68:	2300      	movs	r3, #0
 8002e6a:	623b      	str	r3, [r7, #32]
          break;
 8002e6c:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002e6e:	69bb      	ldr	r3, [r7, #24]
 8002e70:	2bff      	cmp	r3, #255	; 0xff
 8002e72:	d801      	bhi.n	8002e78 <HAL_GPIO_Init+0xec>
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	e001      	b.n	8002e7c <HAL_GPIO_Init+0xf0>
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	3304      	adds	r3, #4
 8002e7c:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002e7e:	69bb      	ldr	r3, [r7, #24]
 8002e80:	2bff      	cmp	r3, #255	; 0xff
 8002e82:	d802      	bhi.n	8002e8a <HAL_GPIO_Init+0xfe>
 8002e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e86:	009b      	lsls	r3, r3, #2
 8002e88:	e002      	b.n	8002e90 <HAL_GPIO_Init+0x104>
 8002e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e8c:	3b08      	subs	r3, #8
 8002e8e:	009b      	lsls	r3, r3, #2
 8002e90:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002e92:	697b      	ldr	r3, [r7, #20]
 8002e94:	681a      	ldr	r2, [r3, #0]
 8002e96:	210f      	movs	r1, #15
 8002e98:	693b      	ldr	r3, [r7, #16]
 8002e9a:	fa01 f303 	lsl.w	r3, r1, r3
 8002e9e:	43db      	mvns	r3, r3
 8002ea0:	401a      	ands	r2, r3
 8002ea2:	6a39      	ldr	r1, [r7, #32]
 8002ea4:	693b      	ldr	r3, [r7, #16]
 8002ea6:	fa01 f303 	lsl.w	r3, r1, r3
 8002eaa:	431a      	orrs	r2, r3
 8002eac:	697b      	ldr	r3, [r7, #20]
 8002eae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	f000 8096 	beq.w	8002fea <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002ebe:	4b59      	ldr	r3, [pc, #356]	; (8003024 <HAL_GPIO_Init+0x298>)
 8002ec0:	699b      	ldr	r3, [r3, #24]
 8002ec2:	4a58      	ldr	r2, [pc, #352]	; (8003024 <HAL_GPIO_Init+0x298>)
 8002ec4:	f043 0301 	orr.w	r3, r3, #1
 8002ec8:	6193      	str	r3, [r2, #24]
 8002eca:	4b56      	ldr	r3, [pc, #344]	; (8003024 <HAL_GPIO_Init+0x298>)
 8002ecc:	699b      	ldr	r3, [r3, #24]
 8002ece:	f003 0301 	and.w	r3, r3, #1
 8002ed2:	60bb      	str	r3, [r7, #8]
 8002ed4:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002ed6:	4a54      	ldr	r2, [pc, #336]	; (8003028 <HAL_GPIO_Init+0x29c>)
 8002ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eda:	089b      	lsrs	r3, r3, #2
 8002edc:	3302      	adds	r3, #2
 8002ede:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ee2:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ee6:	f003 0303 	and.w	r3, r3, #3
 8002eea:	009b      	lsls	r3, r3, #2
 8002eec:	220f      	movs	r2, #15
 8002eee:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef2:	43db      	mvns	r3, r3
 8002ef4:	68fa      	ldr	r2, [r7, #12]
 8002ef6:	4013      	ands	r3, r2
 8002ef8:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	4a4b      	ldr	r2, [pc, #300]	; (800302c <HAL_GPIO_Init+0x2a0>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d013      	beq.n	8002f2a <HAL_GPIO_Init+0x19e>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	4a4a      	ldr	r2, [pc, #296]	; (8003030 <HAL_GPIO_Init+0x2a4>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d00d      	beq.n	8002f26 <HAL_GPIO_Init+0x19a>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	4a49      	ldr	r2, [pc, #292]	; (8003034 <HAL_GPIO_Init+0x2a8>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d007      	beq.n	8002f22 <HAL_GPIO_Init+0x196>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	4a48      	ldr	r2, [pc, #288]	; (8003038 <HAL_GPIO_Init+0x2ac>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d101      	bne.n	8002f1e <HAL_GPIO_Init+0x192>
 8002f1a:	2303      	movs	r3, #3
 8002f1c:	e006      	b.n	8002f2c <HAL_GPIO_Init+0x1a0>
 8002f1e:	2304      	movs	r3, #4
 8002f20:	e004      	b.n	8002f2c <HAL_GPIO_Init+0x1a0>
 8002f22:	2302      	movs	r3, #2
 8002f24:	e002      	b.n	8002f2c <HAL_GPIO_Init+0x1a0>
 8002f26:	2301      	movs	r3, #1
 8002f28:	e000      	b.n	8002f2c <HAL_GPIO_Init+0x1a0>
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f2e:	f002 0203 	and.w	r2, r2, #3
 8002f32:	0092      	lsls	r2, r2, #2
 8002f34:	4093      	lsls	r3, r2
 8002f36:	68fa      	ldr	r2, [r7, #12]
 8002f38:	4313      	orrs	r3, r2
 8002f3a:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002f3c:	493a      	ldr	r1, [pc, #232]	; (8003028 <HAL_GPIO_Init+0x29c>)
 8002f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f40:	089b      	lsrs	r3, r3, #2
 8002f42:	3302      	adds	r3, #2
 8002f44:	68fa      	ldr	r2, [r7, #12]
 8002f46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d006      	beq.n	8002f64 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002f56:	4b39      	ldr	r3, [pc, #228]	; (800303c <HAL_GPIO_Init+0x2b0>)
 8002f58:	681a      	ldr	r2, [r3, #0]
 8002f5a:	4938      	ldr	r1, [pc, #224]	; (800303c <HAL_GPIO_Init+0x2b0>)
 8002f5c:	69bb      	ldr	r3, [r7, #24]
 8002f5e:	4313      	orrs	r3, r2
 8002f60:	600b      	str	r3, [r1, #0]
 8002f62:	e006      	b.n	8002f72 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002f64:	4b35      	ldr	r3, [pc, #212]	; (800303c <HAL_GPIO_Init+0x2b0>)
 8002f66:	681a      	ldr	r2, [r3, #0]
 8002f68:	69bb      	ldr	r3, [r7, #24]
 8002f6a:	43db      	mvns	r3, r3
 8002f6c:	4933      	ldr	r1, [pc, #204]	; (800303c <HAL_GPIO_Init+0x2b0>)
 8002f6e:	4013      	ands	r3, r2
 8002f70:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d006      	beq.n	8002f8c <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002f7e:	4b2f      	ldr	r3, [pc, #188]	; (800303c <HAL_GPIO_Init+0x2b0>)
 8002f80:	685a      	ldr	r2, [r3, #4]
 8002f82:	492e      	ldr	r1, [pc, #184]	; (800303c <HAL_GPIO_Init+0x2b0>)
 8002f84:	69bb      	ldr	r3, [r7, #24]
 8002f86:	4313      	orrs	r3, r2
 8002f88:	604b      	str	r3, [r1, #4]
 8002f8a:	e006      	b.n	8002f9a <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002f8c:	4b2b      	ldr	r3, [pc, #172]	; (800303c <HAL_GPIO_Init+0x2b0>)
 8002f8e:	685a      	ldr	r2, [r3, #4]
 8002f90:	69bb      	ldr	r3, [r7, #24]
 8002f92:	43db      	mvns	r3, r3
 8002f94:	4929      	ldr	r1, [pc, #164]	; (800303c <HAL_GPIO_Init+0x2b0>)
 8002f96:	4013      	ands	r3, r2
 8002f98:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d006      	beq.n	8002fb4 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002fa6:	4b25      	ldr	r3, [pc, #148]	; (800303c <HAL_GPIO_Init+0x2b0>)
 8002fa8:	689a      	ldr	r2, [r3, #8]
 8002faa:	4924      	ldr	r1, [pc, #144]	; (800303c <HAL_GPIO_Init+0x2b0>)
 8002fac:	69bb      	ldr	r3, [r7, #24]
 8002fae:	4313      	orrs	r3, r2
 8002fb0:	608b      	str	r3, [r1, #8]
 8002fb2:	e006      	b.n	8002fc2 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002fb4:	4b21      	ldr	r3, [pc, #132]	; (800303c <HAL_GPIO_Init+0x2b0>)
 8002fb6:	689a      	ldr	r2, [r3, #8]
 8002fb8:	69bb      	ldr	r3, [r7, #24]
 8002fba:	43db      	mvns	r3, r3
 8002fbc:	491f      	ldr	r1, [pc, #124]	; (800303c <HAL_GPIO_Init+0x2b0>)
 8002fbe:	4013      	ands	r3, r2
 8002fc0:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d006      	beq.n	8002fdc <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002fce:	4b1b      	ldr	r3, [pc, #108]	; (800303c <HAL_GPIO_Init+0x2b0>)
 8002fd0:	68da      	ldr	r2, [r3, #12]
 8002fd2:	491a      	ldr	r1, [pc, #104]	; (800303c <HAL_GPIO_Init+0x2b0>)
 8002fd4:	69bb      	ldr	r3, [r7, #24]
 8002fd6:	4313      	orrs	r3, r2
 8002fd8:	60cb      	str	r3, [r1, #12]
 8002fda:	e006      	b.n	8002fea <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002fdc:	4b17      	ldr	r3, [pc, #92]	; (800303c <HAL_GPIO_Init+0x2b0>)
 8002fde:	68da      	ldr	r2, [r3, #12]
 8002fe0:	69bb      	ldr	r3, [r7, #24]
 8002fe2:	43db      	mvns	r3, r3
 8002fe4:	4915      	ldr	r1, [pc, #84]	; (800303c <HAL_GPIO_Init+0x2b0>)
 8002fe6:	4013      	ands	r3, r2
 8002fe8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fec:	3301      	adds	r3, #1
 8002fee:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	681a      	ldr	r2, [r3, #0]
 8002ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ff6:	fa22 f303 	lsr.w	r3, r2, r3
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	f47f aed0 	bne.w	8002da0 <HAL_GPIO_Init+0x14>
  }
}
 8003000:	bf00      	nop
 8003002:	372c      	adds	r7, #44	; 0x2c
 8003004:	46bd      	mov	sp, r7
 8003006:	bc80      	pop	{r7}
 8003008:	4770      	bx	lr
 800300a:	bf00      	nop
 800300c:	10210000 	.word	0x10210000
 8003010:	10110000 	.word	0x10110000
 8003014:	10120000 	.word	0x10120000
 8003018:	10310000 	.word	0x10310000
 800301c:	10320000 	.word	0x10320000
 8003020:	10220000 	.word	0x10220000
 8003024:	40021000 	.word	0x40021000
 8003028:	40010000 	.word	0x40010000
 800302c:	40010800 	.word	0x40010800
 8003030:	40010c00 	.word	0x40010c00
 8003034:	40011000 	.word	0x40011000
 8003038:	40011400 	.word	0x40011400
 800303c:	40010400 	.word	0x40010400

08003040 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003040:	b480      	push	{r7}
 8003042:	b083      	sub	sp, #12
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
 8003048:	460b      	mov	r3, r1
 800304a:	807b      	strh	r3, [r7, #2]
 800304c:	4613      	mov	r3, r2
 800304e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003050:	787b      	ldrb	r3, [r7, #1]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d003      	beq.n	800305e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003056:	887a      	ldrh	r2, [r7, #2]
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800305c:	e003      	b.n	8003066 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800305e:	887b      	ldrh	r3, [r7, #2]
 8003060:	041a      	lsls	r2, r3, #16
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	611a      	str	r2, [r3, #16]
}
 8003066:	bf00      	nop
 8003068:	370c      	adds	r7, #12
 800306a:	46bd      	mov	sp, r7
 800306c:	bc80      	pop	{r7}
 800306e:	4770      	bx	lr

08003070 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b084      	sub	sp, #16
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d101      	bne.n	8003082 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800307e:	2301      	movs	r3, #1
 8003080:	e10f      	b.n	80032a2 <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003088:	b2db      	uxtb	r3, r3
 800308a:	2b00      	cmp	r3, #0
 800308c:	d106      	bne.n	800309c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2200      	movs	r2, #0
 8003092:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003096:	6878      	ldr	r0, [r7, #4]
 8003098:	f7fe ff9a 	bl	8001fd0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2224      	movs	r2, #36	; 0x24
 80030a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	681a      	ldr	r2, [r3, #0]
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f022 0201 	bic.w	r2, r2, #1
 80030b2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80030b4:	f001 fdb4 	bl	8004c20 <HAL_RCC_GetPCLK1Freq>
 80030b8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	4a7b      	ldr	r2, [pc, #492]	; (80032ac <HAL_I2C_Init+0x23c>)
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d807      	bhi.n	80030d4 <HAL_I2C_Init+0x64>
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	4a7a      	ldr	r2, [pc, #488]	; (80032b0 <HAL_I2C_Init+0x240>)
 80030c8:	4293      	cmp	r3, r2
 80030ca:	bf94      	ite	ls
 80030cc:	2301      	movls	r3, #1
 80030ce:	2300      	movhi	r3, #0
 80030d0:	b2db      	uxtb	r3, r3
 80030d2:	e006      	b.n	80030e2 <HAL_I2C_Init+0x72>
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	4a77      	ldr	r2, [pc, #476]	; (80032b4 <HAL_I2C_Init+0x244>)
 80030d8:	4293      	cmp	r3, r2
 80030da:	bf94      	ite	ls
 80030dc:	2301      	movls	r3, #1
 80030de:	2300      	movhi	r3, #0
 80030e0:	b2db      	uxtb	r3, r3
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d001      	beq.n	80030ea <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 80030e6:	2301      	movs	r3, #1
 80030e8:	e0db      	b.n	80032a2 <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	4a72      	ldr	r2, [pc, #456]	; (80032b8 <HAL_I2C_Init+0x248>)
 80030ee:	fba2 2303 	umull	r2, r3, r2, r3
 80030f2:	0c9b      	lsrs	r3, r3, #18
 80030f4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	68ba      	ldr	r2, [r7, #8]
 8003106:	430a      	orrs	r2, r1
 8003108:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	6a1b      	ldr	r3, [r3, #32]
 8003110:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	4a64      	ldr	r2, [pc, #400]	; (80032ac <HAL_I2C_Init+0x23c>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d802      	bhi.n	8003124 <HAL_I2C_Init+0xb4>
 800311e:	68bb      	ldr	r3, [r7, #8]
 8003120:	3301      	adds	r3, #1
 8003122:	e009      	b.n	8003138 <HAL_I2C_Init+0xc8>
 8003124:	68bb      	ldr	r3, [r7, #8]
 8003126:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800312a:	fb02 f303 	mul.w	r3, r2, r3
 800312e:	4a63      	ldr	r2, [pc, #396]	; (80032bc <HAL_I2C_Init+0x24c>)
 8003130:	fba2 2303 	umull	r2, r3, r2, r3
 8003134:	099b      	lsrs	r3, r3, #6
 8003136:	3301      	adds	r3, #1
 8003138:	687a      	ldr	r2, [r7, #4]
 800313a:	6812      	ldr	r2, [r2, #0]
 800313c:	430b      	orrs	r3, r1
 800313e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	69db      	ldr	r3, [r3, #28]
 8003146:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800314a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	4956      	ldr	r1, [pc, #344]	; (80032ac <HAL_I2C_Init+0x23c>)
 8003154:	428b      	cmp	r3, r1
 8003156:	d80d      	bhi.n	8003174 <HAL_I2C_Init+0x104>
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	1e59      	subs	r1, r3, #1
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	005b      	lsls	r3, r3, #1
 8003162:	fbb1 f3f3 	udiv	r3, r1, r3
 8003166:	3301      	adds	r3, #1
 8003168:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800316c:	2b04      	cmp	r3, #4
 800316e:	bf38      	it	cc
 8003170:	2304      	movcc	r3, #4
 8003172:	e04f      	b.n	8003214 <HAL_I2C_Init+0x1a4>
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	689b      	ldr	r3, [r3, #8]
 8003178:	2b00      	cmp	r3, #0
 800317a:	d111      	bne.n	80031a0 <HAL_I2C_Init+0x130>
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	1e58      	subs	r0, r3, #1
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6859      	ldr	r1, [r3, #4]
 8003184:	460b      	mov	r3, r1
 8003186:	005b      	lsls	r3, r3, #1
 8003188:	440b      	add	r3, r1
 800318a:	fbb0 f3f3 	udiv	r3, r0, r3
 800318e:	3301      	adds	r3, #1
 8003190:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003194:	2b00      	cmp	r3, #0
 8003196:	bf0c      	ite	eq
 8003198:	2301      	moveq	r3, #1
 800319a:	2300      	movne	r3, #0
 800319c:	b2db      	uxtb	r3, r3
 800319e:	e012      	b.n	80031c6 <HAL_I2C_Init+0x156>
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	1e58      	subs	r0, r3, #1
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6859      	ldr	r1, [r3, #4]
 80031a8:	460b      	mov	r3, r1
 80031aa:	009b      	lsls	r3, r3, #2
 80031ac:	440b      	add	r3, r1
 80031ae:	0099      	lsls	r1, r3, #2
 80031b0:	440b      	add	r3, r1
 80031b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80031b6:	3301      	adds	r3, #1
 80031b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031bc:	2b00      	cmp	r3, #0
 80031be:	bf0c      	ite	eq
 80031c0:	2301      	moveq	r3, #1
 80031c2:	2300      	movne	r3, #0
 80031c4:	b2db      	uxtb	r3, r3
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d001      	beq.n	80031ce <HAL_I2C_Init+0x15e>
 80031ca:	2301      	movs	r3, #1
 80031cc:	e022      	b.n	8003214 <HAL_I2C_Init+0x1a4>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	689b      	ldr	r3, [r3, #8]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d10e      	bne.n	80031f4 <HAL_I2C_Init+0x184>
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	1e58      	subs	r0, r3, #1
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6859      	ldr	r1, [r3, #4]
 80031de:	460b      	mov	r3, r1
 80031e0:	005b      	lsls	r3, r3, #1
 80031e2:	440b      	add	r3, r1
 80031e4:	fbb0 f3f3 	udiv	r3, r0, r3
 80031e8:	3301      	adds	r3, #1
 80031ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80031f2:	e00f      	b.n	8003214 <HAL_I2C_Init+0x1a4>
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	1e58      	subs	r0, r3, #1
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6859      	ldr	r1, [r3, #4]
 80031fc:	460b      	mov	r3, r1
 80031fe:	009b      	lsls	r3, r3, #2
 8003200:	440b      	add	r3, r1
 8003202:	0099      	lsls	r1, r3, #2
 8003204:	440b      	add	r3, r1
 8003206:	fbb0 f3f3 	udiv	r3, r0, r3
 800320a:	3301      	adds	r3, #1
 800320c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003210:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003214:	6879      	ldr	r1, [r7, #4]
 8003216:	6809      	ldr	r1, [r1, #0]
 8003218:	4313      	orrs	r3, r2
 800321a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	69da      	ldr	r2, [r3, #28]
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6a1b      	ldr	r3, [r3, #32]
 800322e:	431a      	orrs	r2, r3
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	430a      	orrs	r2, r1
 8003236:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	689b      	ldr	r3, [r3, #8]
 800323e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003242:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003246:	687a      	ldr	r2, [r7, #4]
 8003248:	6911      	ldr	r1, [r2, #16]
 800324a:	687a      	ldr	r2, [r7, #4]
 800324c:	68d2      	ldr	r2, [r2, #12]
 800324e:	4311      	orrs	r1, r2
 8003250:	687a      	ldr	r2, [r7, #4]
 8003252:	6812      	ldr	r2, [r2, #0]
 8003254:	430b      	orrs	r3, r1
 8003256:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	68db      	ldr	r3, [r3, #12]
 800325e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	695a      	ldr	r2, [r3, #20]
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	699b      	ldr	r3, [r3, #24]
 800326a:	431a      	orrs	r2, r3
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	430a      	orrs	r2, r1
 8003272:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	681a      	ldr	r2, [r3, #0]
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f042 0201 	orr.w	r2, r2, #1
 8003282:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2200      	movs	r2, #0
 8003288:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2220      	movs	r2, #32
 800328e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2200      	movs	r2, #0
 8003296:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2200      	movs	r2, #0
 800329c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80032a0:	2300      	movs	r3, #0
}
 80032a2:	4618      	mov	r0, r3
 80032a4:	3710      	adds	r7, #16
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bd80      	pop	{r7, pc}
 80032aa:	bf00      	nop
 80032ac:	000186a0 	.word	0x000186a0
 80032b0:	001e847f 	.word	0x001e847f
 80032b4:	003d08ff 	.word	0x003d08ff
 80032b8:	431bde83 	.word	0x431bde83
 80032bc:	10624dd3 	.word	0x10624dd3

080032c0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b088      	sub	sp, #32
 80032c4:	af02      	add	r7, sp, #8
 80032c6:	60f8      	str	r0, [r7, #12]
 80032c8:	607a      	str	r2, [r7, #4]
 80032ca:	461a      	mov	r2, r3
 80032cc:	460b      	mov	r3, r1
 80032ce:	817b      	strh	r3, [r7, #10]
 80032d0:	4613      	mov	r3, r2
 80032d2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80032d4:	f7ff f80e 	bl	80022f4 <HAL_GetTick>
 80032d8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032e0:	b2db      	uxtb	r3, r3
 80032e2:	2b20      	cmp	r3, #32
 80032e4:	f040 80e0 	bne.w	80034a8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80032e8:	697b      	ldr	r3, [r7, #20]
 80032ea:	9300      	str	r3, [sp, #0]
 80032ec:	2319      	movs	r3, #25
 80032ee:	2201      	movs	r2, #1
 80032f0:	4970      	ldr	r1, [pc, #448]	; (80034b4 <HAL_I2C_Master_Transmit+0x1f4>)
 80032f2:	68f8      	ldr	r0, [r7, #12]
 80032f4:	f000 fee2 	bl	80040bc <I2C_WaitOnFlagUntilTimeout>
 80032f8:	4603      	mov	r3, r0
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d001      	beq.n	8003302 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80032fe:	2302      	movs	r3, #2
 8003300:	e0d3      	b.n	80034aa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003308:	2b01      	cmp	r3, #1
 800330a:	d101      	bne.n	8003310 <HAL_I2C_Master_Transmit+0x50>
 800330c:	2302      	movs	r3, #2
 800330e:	e0cc      	b.n	80034aa <HAL_I2C_Master_Transmit+0x1ea>
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	2201      	movs	r2, #1
 8003314:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f003 0301 	and.w	r3, r3, #1
 8003322:	2b01      	cmp	r3, #1
 8003324:	d007      	beq.n	8003336 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	681a      	ldr	r2, [r3, #0]
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f042 0201 	orr.w	r2, r2, #1
 8003334:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	681a      	ldr	r2, [r3, #0]
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003344:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	2221      	movs	r2, #33	; 0x21
 800334a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	2210      	movs	r2, #16
 8003352:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	2200      	movs	r2, #0
 800335a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	687a      	ldr	r2, [r7, #4]
 8003360:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	893a      	ldrh	r2, [r7, #8]
 8003366:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800336c:	b29a      	uxth	r2, r3
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	4a50      	ldr	r2, [pc, #320]	; (80034b8 <HAL_I2C_Master_Transmit+0x1f8>)
 8003376:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003378:	8979      	ldrh	r1, [r7, #10]
 800337a:	697b      	ldr	r3, [r7, #20]
 800337c:	6a3a      	ldr	r2, [r7, #32]
 800337e:	68f8      	ldr	r0, [r7, #12]
 8003380:	f000 fce6 	bl	8003d50 <I2C_MasterRequestWrite>
 8003384:	4603      	mov	r3, r0
 8003386:	2b00      	cmp	r3, #0
 8003388:	d001      	beq.n	800338e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800338a:	2301      	movs	r3, #1
 800338c:	e08d      	b.n	80034aa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800338e:	2300      	movs	r3, #0
 8003390:	613b      	str	r3, [r7, #16]
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	695b      	ldr	r3, [r3, #20]
 8003398:	613b      	str	r3, [r7, #16]
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	699b      	ldr	r3, [r3, #24]
 80033a0:	613b      	str	r3, [r7, #16]
 80033a2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80033a4:	e066      	b.n	8003474 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80033a6:	697a      	ldr	r2, [r7, #20]
 80033a8:	6a39      	ldr	r1, [r7, #32]
 80033aa:	68f8      	ldr	r0, [r7, #12]
 80033ac:	f000 ff5c 	bl	8004268 <I2C_WaitOnTXEFlagUntilTimeout>
 80033b0:	4603      	mov	r3, r0
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d00d      	beq.n	80033d2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ba:	2b04      	cmp	r3, #4
 80033bc:	d107      	bne.n	80033ce <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	681a      	ldr	r2, [r3, #0]
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033cc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80033ce:	2301      	movs	r3, #1
 80033d0:	e06b      	b.n	80034aa <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033d6:	781a      	ldrb	r2, [r3, #0]
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033e2:	1c5a      	adds	r2, r3, #1
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033ec:	b29b      	uxth	r3, r3
 80033ee:	3b01      	subs	r3, #1
 80033f0:	b29a      	uxth	r2, r3
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033fa:	3b01      	subs	r3, #1
 80033fc:	b29a      	uxth	r2, r3
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	695b      	ldr	r3, [r3, #20]
 8003408:	f003 0304 	and.w	r3, r3, #4
 800340c:	2b04      	cmp	r3, #4
 800340e:	d11b      	bne.n	8003448 <HAL_I2C_Master_Transmit+0x188>
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003414:	2b00      	cmp	r3, #0
 8003416:	d017      	beq.n	8003448 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800341c:	781a      	ldrb	r2, [r3, #0]
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003428:	1c5a      	adds	r2, r3, #1
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003432:	b29b      	uxth	r3, r3
 8003434:	3b01      	subs	r3, #1
 8003436:	b29a      	uxth	r2, r3
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003440:	3b01      	subs	r3, #1
 8003442:	b29a      	uxth	r2, r3
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003448:	697a      	ldr	r2, [r7, #20]
 800344a:	6a39      	ldr	r1, [r7, #32]
 800344c:	68f8      	ldr	r0, [r7, #12]
 800344e:	f000 ff4c 	bl	80042ea <I2C_WaitOnBTFFlagUntilTimeout>
 8003452:	4603      	mov	r3, r0
 8003454:	2b00      	cmp	r3, #0
 8003456:	d00d      	beq.n	8003474 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800345c:	2b04      	cmp	r3, #4
 800345e:	d107      	bne.n	8003470 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	681a      	ldr	r2, [r3, #0]
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800346e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003470:	2301      	movs	r3, #1
 8003472:	e01a      	b.n	80034aa <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003478:	2b00      	cmp	r3, #0
 800347a:	d194      	bne.n	80033a6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	681a      	ldr	r2, [r3, #0]
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800348a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	2220      	movs	r2, #32
 8003490:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	2200      	movs	r2, #0
 8003498:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	2200      	movs	r2, #0
 80034a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80034a4:	2300      	movs	r3, #0
 80034a6:	e000      	b.n	80034aa <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80034a8:	2302      	movs	r3, #2
  }
}
 80034aa:	4618      	mov	r0, r3
 80034ac:	3718      	adds	r7, #24
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bd80      	pop	{r7, pc}
 80034b2:	bf00      	nop
 80034b4:	00100002 	.word	0x00100002
 80034b8:	ffff0000 	.word	0xffff0000

080034bc <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b08c      	sub	sp, #48	; 0x30
 80034c0:	af02      	add	r7, sp, #8
 80034c2:	60f8      	str	r0, [r7, #12]
 80034c4:	607a      	str	r2, [r7, #4]
 80034c6:	461a      	mov	r2, r3
 80034c8:	460b      	mov	r3, r1
 80034ca:	817b      	strh	r3, [r7, #10]
 80034cc:	4613      	mov	r3, r2
 80034ce:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80034d0:	f7fe ff10 	bl	80022f4 <HAL_GetTick>
 80034d4:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034dc:	b2db      	uxtb	r3, r3
 80034de:	2b20      	cmp	r3, #32
 80034e0:	f040 8213 	bne.w	800390a <HAL_I2C_Master_Receive+0x44e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80034e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034e6:	9300      	str	r3, [sp, #0]
 80034e8:	2319      	movs	r3, #25
 80034ea:	2201      	movs	r2, #1
 80034ec:	497e      	ldr	r1, [pc, #504]	; (80036e8 <HAL_I2C_Master_Receive+0x22c>)
 80034ee:	68f8      	ldr	r0, [r7, #12]
 80034f0:	f000 fde4 	bl	80040bc <I2C_WaitOnFlagUntilTimeout>
 80034f4:	4603      	mov	r3, r0
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d001      	beq.n	80034fe <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80034fa:	2302      	movs	r3, #2
 80034fc:	e206      	b.n	800390c <HAL_I2C_Master_Receive+0x450>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003504:	2b01      	cmp	r3, #1
 8003506:	d101      	bne.n	800350c <HAL_I2C_Master_Receive+0x50>
 8003508:	2302      	movs	r3, #2
 800350a:	e1ff      	b.n	800390c <HAL_I2C_Master_Receive+0x450>
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	2201      	movs	r2, #1
 8003510:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f003 0301 	and.w	r3, r3, #1
 800351e:	2b01      	cmp	r3, #1
 8003520:	d007      	beq.n	8003532 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	681a      	ldr	r2, [r3, #0]
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f042 0201 	orr.w	r2, r2, #1
 8003530:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	681a      	ldr	r2, [r3, #0]
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003540:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	2222      	movs	r2, #34	; 0x22
 8003546:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	2210      	movs	r2, #16
 800354e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	2200      	movs	r2, #0
 8003556:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	687a      	ldr	r2, [r7, #4]
 800355c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	893a      	ldrh	r2, [r7, #8]
 8003562:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003568:	b29a      	uxth	r2, r3
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	4a5e      	ldr	r2, [pc, #376]	; (80036ec <HAL_I2C_Master_Receive+0x230>)
 8003572:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003574:	8979      	ldrh	r1, [r7, #10]
 8003576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003578:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800357a:	68f8      	ldr	r0, [r7, #12]
 800357c:	f000 fc5e 	bl	8003e3c <I2C_MasterRequestRead>
 8003580:	4603      	mov	r3, r0
 8003582:	2b00      	cmp	r3, #0
 8003584:	d001      	beq.n	800358a <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8003586:	2301      	movs	r3, #1
 8003588:	e1c0      	b.n	800390c <HAL_I2C_Master_Receive+0x450>
    }

    if (hi2c->XferSize == 0U)
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800358e:	2b00      	cmp	r3, #0
 8003590:	d113      	bne.n	80035ba <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003592:	2300      	movs	r3, #0
 8003594:	623b      	str	r3, [r7, #32]
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	695b      	ldr	r3, [r3, #20]
 800359c:	623b      	str	r3, [r7, #32]
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	699b      	ldr	r3, [r3, #24]
 80035a4:	623b      	str	r3, [r7, #32]
 80035a6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	681a      	ldr	r2, [r3, #0]
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035b6:	601a      	str	r2, [r3, #0]
 80035b8:	e194      	b.n	80038e4 <HAL_I2C_Master_Receive+0x428>
    }
    else if (hi2c->XferSize == 1U)
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035be:	2b01      	cmp	r3, #1
 80035c0:	d11d      	bne.n	80035fe <HAL_I2C_Master_Receive+0x142>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	681a      	ldr	r2, [r3, #0]
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035d0:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80035d2:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035d4:	2300      	movs	r3, #0
 80035d6:	61fb      	str	r3, [r7, #28]
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	695b      	ldr	r3, [r3, #20]
 80035de:	61fb      	str	r3, [r7, #28]
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	699b      	ldr	r3, [r3, #24]
 80035e6:	61fb      	str	r3, [r7, #28]
 80035e8:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	681a      	ldr	r2, [r3, #0]
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035f8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80035fa:	b662      	cpsie	i
 80035fc:	e172      	b.n	80038e4 <HAL_I2C_Master_Receive+0x428>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003602:	2b02      	cmp	r3, #2
 8003604:	d11d      	bne.n	8003642 <HAL_I2C_Master_Receive+0x186>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	681a      	ldr	r2, [r3, #0]
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003614:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003616:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003618:	2300      	movs	r3, #0
 800361a:	61bb      	str	r3, [r7, #24]
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	695b      	ldr	r3, [r3, #20]
 8003622:	61bb      	str	r3, [r7, #24]
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	699b      	ldr	r3, [r3, #24]
 800362a:	61bb      	str	r3, [r7, #24]
 800362c:	69bb      	ldr	r3, [r7, #24]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	681a      	ldr	r2, [r3, #0]
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800363c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800363e:	b662      	cpsie	i
 8003640:	e150      	b.n	80038e4 <HAL_I2C_Master_Receive+0x428>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	681a      	ldr	r2, [r3, #0]
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003650:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003652:	2300      	movs	r3, #0
 8003654:	617b      	str	r3, [r7, #20]
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	695b      	ldr	r3, [r3, #20]
 800365c:	617b      	str	r3, [r7, #20]
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	699b      	ldr	r3, [r3, #24]
 8003664:	617b      	str	r3, [r7, #20]
 8003666:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003668:	e13c      	b.n	80038e4 <HAL_I2C_Master_Receive+0x428>
    {
      if (hi2c->XferSize <= 3U)
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800366e:	2b03      	cmp	r3, #3
 8003670:	f200 80f5 	bhi.w	800385e <HAL_I2C_Master_Receive+0x3a2>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003678:	2b01      	cmp	r3, #1
 800367a:	d123      	bne.n	80036c4 <HAL_I2C_Master_Receive+0x208>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800367c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800367e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003680:	68f8      	ldr	r0, [r7, #12]
 8003682:	f000 fe73 	bl	800436c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003686:	4603      	mov	r3, r0
 8003688:	2b00      	cmp	r3, #0
 800368a:	d001      	beq.n	8003690 <HAL_I2C_Master_Receive+0x1d4>
          {
            return HAL_ERROR;
 800368c:	2301      	movs	r3, #1
 800368e:	e13d      	b.n	800390c <HAL_I2C_Master_Receive+0x450>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	691a      	ldr	r2, [r3, #16]
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800369a:	b2d2      	uxtb	r2, r2
 800369c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036a2:	1c5a      	adds	r2, r3, #1
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036ac:	3b01      	subs	r3, #1
 80036ae:	b29a      	uxth	r2, r3
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036b8:	b29b      	uxth	r3, r3
 80036ba:	3b01      	subs	r3, #1
 80036bc:	b29a      	uxth	r2, r3
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80036c2:	e10f      	b.n	80038e4 <HAL_I2C_Master_Receive+0x428>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036c8:	2b02      	cmp	r3, #2
 80036ca:	d150      	bne.n	800376e <HAL_I2C_Master_Receive+0x2b2>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80036cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ce:	9300      	str	r3, [sp, #0]
 80036d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036d2:	2200      	movs	r2, #0
 80036d4:	4906      	ldr	r1, [pc, #24]	; (80036f0 <HAL_I2C_Master_Receive+0x234>)
 80036d6:	68f8      	ldr	r0, [r7, #12]
 80036d8:	f000 fcf0 	bl	80040bc <I2C_WaitOnFlagUntilTimeout>
 80036dc:	4603      	mov	r3, r0
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d008      	beq.n	80036f4 <HAL_I2C_Master_Receive+0x238>
          {
            return HAL_ERROR;
 80036e2:	2301      	movs	r3, #1
 80036e4:	e112      	b.n	800390c <HAL_I2C_Master_Receive+0x450>
 80036e6:	bf00      	nop
 80036e8:	00100002 	.word	0x00100002
 80036ec:	ffff0000 	.word	0xffff0000
 80036f0:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80036f4:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	681a      	ldr	r2, [r3, #0]
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003704:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	691a      	ldr	r2, [r3, #16]
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003710:	b2d2      	uxtb	r2, r2
 8003712:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003718:	1c5a      	adds	r2, r3, #1
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003722:	3b01      	subs	r3, #1
 8003724:	b29a      	uxth	r2, r3
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800372e:	b29b      	uxth	r3, r3
 8003730:	3b01      	subs	r3, #1
 8003732:	b29a      	uxth	r2, r3
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003738:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	691a      	ldr	r2, [r3, #16]
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003744:	b2d2      	uxtb	r2, r2
 8003746:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800374c:	1c5a      	adds	r2, r3, #1
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003756:	3b01      	subs	r3, #1
 8003758:	b29a      	uxth	r2, r3
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003762:	b29b      	uxth	r3, r3
 8003764:	3b01      	subs	r3, #1
 8003766:	b29a      	uxth	r2, r3
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800376c:	e0ba      	b.n	80038e4 <HAL_I2C_Master_Receive+0x428>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800376e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003770:	9300      	str	r3, [sp, #0]
 8003772:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003774:	2200      	movs	r2, #0
 8003776:	4967      	ldr	r1, [pc, #412]	; (8003914 <HAL_I2C_Master_Receive+0x458>)
 8003778:	68f8      	ldr	r0, [r7, #12]
 800377a:	f000 fc9f 	bl	80040bc <I2C_WaitOnFlagUntilTimeout>
 800377e:	4603      	mov	r3, r0
 8003780:	2b00      	cmp	r3, #0
 8003782:	d001      	beq.n	8003788 <HAL_I2C_Master_Receive+0x2cc>
          {
            return HAL_ERROR;
 8003784:	2301      	movs	r3, #1
 8003786:	e0c1      	b.n	800390c <HAL_I2C_Master_Receive+0x450>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	681a      	ldr	r2, [r3, #0]
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003796:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003798:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	691a      	ldr	r2, [r3, #16]
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a4:	b2d2      	uxtb	r2, r2
 80037a6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ac:	1c5a      	adds	r2, r3, #1
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037b6:	3b01      	subs	r3, #1
 80037b8:	b29a      	uxth	r2, r3
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037c2:	b29b      	uxth	r3, r3
 80037c4:	3b01      	subs	r3, #1
 80037c6:	b29a      	uxth	r2, r3
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80037cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ce:	9300      	str	r3, [sp, #0]
 80037d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037d2:	2200      	movs	r2, #0
 80037d4:	494f      	ldr	r1, [pc, #316]	; (8003914 <HAL_I2C_Master_Receive+0x458>)
 80037d6:	68f8      	ldr	r0, [r7, #12]
 80037d8:	f000 fc70 	bl	80040bc <I2C_WaitOnFlagUntilTimeout>
 80037dc:	4603      	mov	r3, r0
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d001      	beq.n	80037e6 <HAL_I2C_Master_Receive+0x32a>
          {
            return HAL_ERROR;
 80037e2:	2301      	movs	r3, #1
 80037e4:	e092      	b.n	800390c <HAL_I2C_Master_Receive+0x450>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	681a      	ldr	r2, [r3, #0]
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037f4:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	691a      	ldr	r2, [r3, #16]
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003800:	b2d2      	uxtb	r2, r2
 8003802:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003808:	1c5a      	adds	r2, r3, #1
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003812:	3b01      	subs	r3, #1
 8003814:	b29a      	uxth	r2, r3
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800381e:	b29b      	uxth	r3, r3
 8003820:	3b01      	subs	r3, #1
 8003822:	b29a      	uxth	r2, r3
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003828:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	691a      	ldr	r2, [r3, #16]
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003834:	b2d2      	uxtb	r2, r2
 8003836:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800383c:	1c5a      	adds	r2, r3, #1
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003846:	3b01      	subs	r3, #1
 8003848:	b29a      	uxth	r2, r3
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003852:	b29b      	uxth	r3, r3
 8003854:	3b01      	subs	r3, #1
 8003856:	b29a      	uxth	r2, r3
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800385c:	e042      	b.n	80038e4 <HAL_I2C_Master_Receive+0x428>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800385e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003860:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003862:	68f8      	ldr	r0, [r7, #12]
 8003864:	f000 fd82 	bl	800436c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003868:	4603      	mov	r3, r0
 800386a:	2b00      	cmp	r3, #0
 800386c:	d001      	beq.n	8003872 <HAL_I2C_Master_Receive+0x3b6>
        {
          return HAL_ERROR;
 800386e:	2301      	movs	r3, #1
 8003870:	e04c      	b.n	800390c <HAL_I2C_Master_Receive+0x450>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	691a      	ldr	r2, [r3, #16]
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800387c:	b2d2      	uxtb	r2, r2
 800387e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003884:	1c5a      	adds	r2, r3, #1
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800388e:	3b01      	subs	r3, #1
 8003890:	b29a      	uxth	r2, r3
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800389a:	b29b      	uxth	r3, r3
 800389c:	3b01      	subs	r3, #1
 800389e:	b29a      	uxth	r2, r3
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	695b      	ldr	r3, [r3, #20]
 80038aa:	f003 0304 	and.w	r3, r3, #4
 80038ae:	2b04      	cmp	r3, #4
 80038b0:	d118      	bne.n	80038e4 <HAL_I2C_Master_Receive+0x428>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	691a      	ldr	r2, [r3, #16]
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038bc:	b2d2      	uxtb	r2, r2
 80038be:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038c4:	1c5a      	adds	r2, r3, #1
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038ce:	3b01      	subs	r3, #1
 80038d0:	b29a      	uxth	r2, r3
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038da:	b29b      	uxth	r3, r3
 80038dc:	3b01      	subs	r3, #1
 80038de:	b29a      	uxth	r2, r3
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	f47f aebe 	bne.w	800366a <HAL_I2C_Master_Receive+0x1ae>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	2220      	movs	r2, #32
 80038f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	2200      	movs	r2, #0
 80038fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	2200      	movs	r2, #0
 8003902:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003906:	2300      	movs	r3, #0
 8003908:	e000      	b.n	800390c <HAL_I2C_Master_Receive+0x450>
  }
  else
  {
    return HAL_BUSY;
 800390a:	2302      	movs	r3, #2
  }
}
 800390c:	4618      	mov	r0, r3
 800390e:	3728      	adds	r7, #40	; 0x28
 8003910:	46bd      	mov	sp, r7
 8003912:	bd80      	pop	{r7, pc}
 8003914:	00010004 	.word	0x00010004

08003918 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b088      	sub	sp, #32
 800391c:	af02      	add	r7, sp, #8
 800391e:	60f8      	str	r0, [r7, #12]
 8003920:	4608      	mov	r0, r1
 8003922:	4611      	mov	r1, r2
 8003924:	461a      	mov	r2, r3
 8003926:	4603      	mov	r3, r0
 8003928:	817b      	strh	r3, [r7, #10]
 800392a:	460b      	mov	r3, r1
 800392c:	813b      	strh	r3, [r7, #8]
 800392e:	4613      	mov	r3, r2
 8003930:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003932:	f7fe fcdf 	bl	80022f4 <HAL_GetTick>
 8003936:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800393e:	b2db      	uxtb	r3, r3
 8003940:	2b20      	cmp	r3, #32
 8003942:	f040 80d9 	bne.w	8003af8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003946:	697b      	ldr	r3, [r7, #20]
 8003948:	9300      	str	r3, [sp, #0]
 800394a:	2319      	movs	r3, #25
 800394c:	2201      	movs	r2, #1
 800394e:	496d      	ldr	r1, [pc, #436]	; (8003b04 <HAL_I2C_Mem_Write+0x1ec>)
 8003950:	68f8      	ldr	r0, [r7, #12]
 8003952:	f000 fbb3 	bl	80040bc <I2C_WaitOnFlagUntilTimeout>
 8003956:	4603      	mov	r3, r0
 8003958:	2b00      	cmp	r3, #0
 800395a:	d001      	beq.n	8003960 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800395c:	2302      	movs	r3, #2
 800395e:	e0cc      	b.n	8003afa <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003966:	2b01      	cmp	r3, #1
 8003968:	d101      	bne.n	800396e <HAL_I2C_Mem_Write+0x56>
 800396a:	2302      	movs	r3, #2
 800396c:	e0c5      	b.n	8003afa <HAL_I2C_Mem_Write+0x1e2>
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	2201      	movs	r2, #1
 8003972:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f003 0301 	and.w	r3, r3, #1
 8003980:	2b01      	cmp	r3, #1
 8003982:	d007      	beq.n	8003994 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	681a      	ldr	r2, [r3, #0]
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f042 0201 	orr.w	r2, r2, #1
 8003992:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	681a      	ldr	r2, [r3, #0]
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80039a2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	2221      	movs	r2, #33	; 0x21
 80039a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	2240      	movs	r2, #64	; 0x40
 80039b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	2200      	movs	r2, #0
 80039b8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	6a3a      	ldr	r2, [r7, #32]
 80039be:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80039c4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039ca:	b29a      	uxth	r2, r3
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	4a4d      	ldr	r2, [pc, #308]	; (8003b08 <HAL_I2C_Mem_Write+0x1f0>)
 80039d4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80039d6:	88f8      	ldrh	r0, [r7, #6]
 80039d8:	893a      	ldrh	r2, [r7, #8]
 80039da:	8979      	ldrh	r1, [r7, #10]
 80039dc:	697b      	ldr	r3, [r7, #20]
 80039de:	9301      	str	r3, [sp, #4]
 80039e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039e2:	9300      	str	r3, [sp, #0]
 80039e4:	4603      	mov	r3, r0
 80039e6:	68f8      	ldr	r0, [r7, #12]
 80039e8:	f000 fade 	bl	8003fa8 <I2C_RequestMemoryWrite>
 80039ec:	4603      	mov	r3, r0
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d052      	beq.n	8003a98 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80039f2:	2301      	movs	r3, #1
 80039f4:	e081      	b.n	8003afa <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80039f6:	697a      	ldr	r2, [r7, #20]
 80039f8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80039fa:	68f8      	ldr	r0, [r7, #12]
 80039fc:	f000 fc34 	bl	8004268 <I2C_WaitOnTXEFlagUntilTimeout>
 8003a00:	4603      	mov	r3, r0
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d00d      	beq.n	8003a22 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a0a:	2b04      	cmp	r3, #4
 8003a0c:	d107      	bne.n	8003a1e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	681a      	ldr	r2, [r3, #0]
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a1c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003a1e:	2301      	movs	r3, #1
 8003a20:	e06b      	b.n	8003afa <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a26:	781a      	ldrb	r2, [r3, #0]
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a32:	1c5a      	adds	r2, r3, #1
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a3c:	3b01      	subs	r3, #1
 8003a3e:	b29a      	uxth	r2, r3
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a48:	b29b      	uxth	r3, r3
 8003a4a:	3b01      	subs	r3, #1
 8003a4c:	b29a      	uxth	r2, r3
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	695b      	ldr	r3, [r3, #20]
 8003a58:	f003 0304 	and.w	r3, r3, #4
 8003a5c:	2b04      	cmp	r3, #4
 8003a5e:	d11b      	bne.n	8003a98 <HAL_I2C_Mem_Write+0x180>
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d017      	beq.n	8003a98 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a6c:	781a      	ldrb	r2, [r3, #0]
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a78:	1c5a      	adds	r2, r3, #1
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a82:	3b01      	subs	r3, #1
 8003a84:	b29a      	uxth	r2, r3
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a8e:	b29b      	uxth	r3, r3
 8003a90:	3b01      	subs	r3, #1
 8003a92:	b29a      	uxth	r2, r3
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d1aa      	bne.n	80039f6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003aa0:	697a      	ldr	r2, [r7, #20]
 8003aa2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003aa4:	68f8      	ldr	r0, [r7, #12]
 8003aa6:	f000 fc20 	bl	80042ea <I2C_WaitOnBTFFlagUntilTimeout>
 8003aaa:	4603      	mov	r3, r0
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d00d      	beq.n	8003acc <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ab4:	2b04      	cmp	r3, #4
 8003ab6:	d107      	bne.n	8003ac8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	681a      	ldr	r2, [r3, #0]
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ac6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003ac8:	2301      	movs	r3, #1
 8003aca:	e016      	b.n	8003afa <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	681a      	ldr	r2, [r3, #0]
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ada:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	2220      	movs	r2, #32
 8003ae0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	2200      	movs	r2, #0
 8003af0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003af4:	2300      	movs	r3, #0
 8003af6:	e000      	b.n	8003afa <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003af8:	2302      	movs	r3, #2
  }
}
 8003afa:	4618      	mov	r0, r3
 8003afc:	3718      	adds	r7, #24
 8003afe:	46bd      	mov	sp, r7
 8003b00:	bd80      	pop	{r7, pc}
 8003b02:	bf00      	nop
 8003b04:	00100002 	.word	0x00100002
 8003b08:	ffff0000 	.word	0xffff0000

08003b0c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b08a      	sub	sp, #40	; 0x28
 8003b10:	af02      	add	r7, sp, #8
 8003b12:	60f8      	str	r0, [r7, #12]
 8003b14:	607a      	str	r2, [r7, #4]
 8003b16:	603b      	str	r3, [r7, #0]
 8003b18:	460b      	mov	r3, r1
 8003b1a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003b1c:	f7fe fbea 	bl	80022f4 <HAL_GetTick>
 8003b20:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8003b22:	2301      	movs	r3, #1
 8003b24:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b2c:	b2db      	uxtb	r3, r3
 8003b2e:	2b20      	cmp	r3, #32
 8003b30:	f040 8105 	bne.w	8003d3e <HAL_I2C_IsDeviceReady+0x232>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003b34:	69fb      	ldr	r3, [r7, #28]
 8003b36:	9300      	str	r3, [sp, #0]
 8003b38:	2319      	movs	r3, #25
 8003b3a:	2201      	movs	r2, #1
 8003b3c:	4982      	ldr	r1, [pc, #520]	; (8003d48 <HAL_I2C_IsDeviceReady+0x23c>)
 8003b3e:	68f8      	ldr	r0, [r7, #12]
 8003b40:	f000 fabc 	bl	80040bc <I2C_WaitOnFlagUntilTimeout>
 8003b44:	4603      	mov	r3, r0
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d001      	beq.n	8003b4e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8003b4a:	2302      	movs	r3, #2
 8003b4c:	e0f8      	b.n	8003d40 <HAL_I2C_IsDeviceReady+0x234>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b54:	2b01      	cmp	r3, #1
 8003b56:	d101      	bne.n	8003b5c <HAL_I2C_IsDeviceReady+0x50>
 8003b58:	2302      	movs	r3, #2
 8003b5a:	e0f1      	b.n	8003d40 <HAL_I2C_IsDeviceReady+0x234>
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	2201      	movs	r2, #1
 8003b60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f003 0301 	and.w	r3, r3, #1
 8003b6e:	2b01      	cmp	r3, #1
 8003b70:	d007      	beq.n	8003b82 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	681a      	ldr	r2, [r3, #0]
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f042 0201 	orr.w	r2, r2, #1
 8003b80:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	681a      	ldr	r2, [r3, #0]
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b90:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	2224      	movs	r2, #36	; 0x24
 8003b96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	4a6a      	ldr	r2, [pc, #424]	; (8003d4c <HAL_I2C_IsDeviceReady+0x240>)
 8003ba4:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	681a      	ldr	r2, [r3, #0]
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003bb4:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8003bb6:	69fb      	ldr	r3, [r7, #28]
 8003bb8:	9300      	str	r3, [sp, #0]
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003bc2:	68f8      	ldr	r0, [r7, #12]
 8003bc4:	f000 fa7a 	bl	80040bc <I2C_WaitOnFlagUntilTimeout>
 8003bc8:	4603      	mov	r3, r0
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d001      	beq.n	8003bd2 <HAL_I2C_IsDeviceReady+0xc6>
      {
        return HAL_ERROR;
 8003bce:	2301      	movs	r3, #1
 8003bd0:	e0b6      	b.n	8003d40 <HAL_I2C_IsDeviceReady+0x234>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003bd2:	897b      	ldrh	r3, [r7, #10]
 8003bd4:	b2db      	uxtb	r3, r3
 8003bd6:	461a      	mov	r2, r3
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003be0:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8003be2:	f7fe fb87 	bl	80022f4 <HAL_GetTick>
 8003be6:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	695b      	ldr	r3, [r3, #20]
 8003bee:	f003 0302 	and.w	r3, r3, #2
 8003bf2:	2b02      	cmp	r3, #2
 8003bf4:	bf0c      	ite	eq
 8003bf6:	2301      	moveq	r3, #1
 8003bf8:	2300      	movne	r3, #0
 8003bfa:	b2db      	uxtb	r3, r3
 8003bfc:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	695b      	ldr	r3, [r3, #20]
 8003c04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c0c:	bf0c      	ite	eq
 8003c0e:	2301      	moveq	r3, #1
 8003c10:	2300      	movne	r3, #0
 8003c12:	b2db      	uxtb	r3, r3
 8003c14:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003c16:	e025      	b.n	8003c64 <HAL_I2C_IsDeviceReady+0x158>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003c18:	f7fe fb6c 	bl	80022f4 <HAL_GetTick>
 8003c1c:	4602      	mov	r2, r0
 8003c1e:	69fb      	ldr	r3, [r7, #28]
 8003c20:	1ad3      	subs	r3, r2, r3
 8003c22:	683a      	ldr	r2, [r7, #0]
 8003c24:	429a      	cmp	r2, r3
 8003c26:	d302      	bcc.n	8003c2e <HAL_I2C_IsDeviceReady+0x122>
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d103      	bne.n	8003c36 <HAL_I2C_IsDeviceReady+0x12a>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	22a0      	movs	r2, #160	; 0xa0
 8003c32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	695b      	ldr	r3, [r3, #20]
 8003c3c:	f003 0302 	and.w	r3, r3, #2
 8003c40:	2b02      	cmp	r3, #2
 8003c42:	bf0c      	ite	eq
 8003c44:	2301      	moveq	r3, #1
 8003c46:	2300      	movne	r3, #0
 8003c48:	b2db      	uxtb	r3, r3
 8003c4a:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	695b      	ldr	r3, [r3, #20]
 8003c52:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c5a:	bf0c      	ite	eq
 8003c5c:	2301      	moveq	r3, #1
 8003c5e:	2300      	movne	r3, #0
 8003c60:	b2db      	uxtb	r3, r3
 8003c62:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c6a:	b2db      	uxtb	r3, r3
 8003c6c:	2ba0      	cmp	r3, #160	; 0xa0
 8003c6e:	d005      	beq.n	8003c7c <HAL_I2C_IsDeviceReady+0x170>
 8003c70:	7dfb      	ldrb	r3, [r7, #23]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d102      	bne.n	8003c7c <HAL_I2C_IsDeviceReady+0x170>
 8003c76:	7dbb      	ldrb	r3, [r7, #22]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d0cd      	beq.n	8003c18 <HAL_I2C_IsDeviceReady+0x10c>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	2220      	movs	r2, #32
 8003c80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	695b      	ldr	r3, [r3, #20]
 8003c8a:	f003 0302 	and.w	r3, r3, #2
 8003c8e:	2b02      	cmp	r3, #2
 8003c90:	d129      	bne.n	8003ce6 <HAL_I2C_IsDeviceReady+0x1da>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	681a      	ldr	r2, [r3, #0]
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ca0:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	613b      	str	r3, [r7, #16]
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	695b      	ldr	r3, [r3, #20]
 8003cac:	613b      	str	r3, [r7, #16]
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	699b      	ldr	r3, [r3, #24]
 8003cb4:	613b      	str	r3, [r7, #16]
 8003cb6:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003cb8:	69fb      	ldr	r3, [r7, #28]
 8003cba:	9300      	str	r3, [sp, #0]
 8003cbc:	2319      	movs	r3, #25
 8003cbe:	2201      	movs	r2, #1
 8003cc0:	4921      	ldr	r1, [pc, #132]	; (8003d48 <HAL_I2C_IsDeviceReady+0x23c>)
 8003cc2:	68f8      	ldr	r0, [r7, #12]
 8003cc4:	f000 f9fa 	bl	80040bc <I2C_WaitOnFlagUntilTimeout>
 8003cc8:	4603      	mov	r3, r0
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d001      	beq.n	8003cd2 <HAL_I2C_IsDeviceReady+0x1c6>
        {
          return HAL_ERROR;
 8003cce:	2301      	movs	r3, #1
 8003cd0:	e036      	b.n	8003d40 <HAL_I2C_IsDeviceReady+0x234>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	2220      	movs	r2, #32
 8003cd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	2200      	movs	r2, #0
 8003cde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	e02c      	b.n	8003d40 <HAL_I2C_IsDeviceReady+0x234>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	681a      	ldr	r2, [r3, #0]
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003cf4:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003cfe:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003d00:	69fb      	ldr	r3, [r7, #28]
 8003d02:	9300      	str	r3, [sp, #0]
 8003d04:	2319      	movs	r3, #25
 8003d06:	2201      	movs	r2, #1
 8003d08:	490f      	ldr	r1, [pc, #60]	; (8003d48 <HAL_I2C_IsDeviceReady+0x23c>)
 8003d0a:	68f8      	ldr	r0, [r7, #12]
 8003d0c:	f000 f9d6 	bl	80040bc <I2C_WaitOnFlagUntilTimeout>
 8003d10:	4603      	mov	r3, r0
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d001      	beq.n	8003d1a <HAL_I2C_IsDeviceReady+0x20e>
        {
          return HAL_ERROR;
 8003d16:	2301      	movs	r3, #1
 8003d18:	e012      	b.n	8003d40 <HAL_I2C_IsDeviceReady+0x234>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8003d1a:	69bb      	ldr	r3, [r7, #24]
 8003d1c:	3301      	adds	r3, #1
 8003d1e:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003d20:	69ba      	ldr	r2, [r7, #24]
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	429a      	cmp	r2, r3
 8003d26:	f4ff af3e 	bcc.w	8003ba6 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	2220      	movs	r2, #32
 8003d2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	2200      	movs	r2, #0
 8003d36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	e000      	b.n	8003d40 <HAL_I2C_IsDeviceReady+0x234>
  }
  else
  {
    return HAL_BUSY;
 8003d3e:	2302      	movs	r3, #2
  }
}
 8003d40:	4618      	mov	r0, r3
 8003d42:	3720      	adds	r7, #32
 8003d44:	46bd      	mov	sp, r7
 8003d46:	bd80      	pop	{r7, pc}
 8003d48:	00100002 	.word	0x00100002
 8003d4c:	ffff0000 	.word	0xffff0000

08003d50 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b088      	sub	sp, #32
 8003d54:	af02      	add	r7, sp, #8
 8003d56:	60f8      	str	r0, [r7, #12]
 8003d58:	607a      	str	r2, [r7, #4]
 8003d5a:	603b      	str	r3, [r7, #0]
 8003d5c:	460b      	mov	r3, r1
 8003d5e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d64:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003d66:	697b      	ldr	r3, [r7, #20]
 8003d68:	2b08      	cmp	r3, #8
 8003d6a:	d006      	beq.n	8003d7a <I2C_MasterRequestWrite+0x2a>
 8003d6c:	697b      	ldr	r3, [r7, #20]
 8003d6e:	2b01      	cmp	r3, #1
 8003d70:	d003      	beq.n	8003d7a <I2C_MasterRequestWrite+0x2a>
 8003d72:	697b      	ldr	r3, [r7, #20]
 8003d74:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003d78:	d108      	bne.n	8003d8c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	681a      	ldr	r2, [r3, #0]
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d88:	601a      	str	r2, [r3, #0]
 8003d8a:	e00b      	b.n	8003da4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d90:	2b12      	cmp	r3, #18
 8003d92:	d107      	bne.n	8003da4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	681a      	ldr	r2, [r3, #0]
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003da2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	9300      	str	r3, [sp, #0]
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2200      	movs	r2, #0
 8003dac:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003db0:	68f8      	ldr	r0, [r7, #12]
 8003db2:	f000 f983 	bl	80040bc <I2C_WaitOnFlagUntilTimeout>
 8003db6:	4603      	mov	r3, r0
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d001      	beq.n	8003dc0 <I2C_MasterRequestWrite+0x70>
  {
    return HAL_ERROR;
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	e035      	b.n	8003e2c <I2C_MasterRequestWrite+0xdc>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	691b      	ldr	r3, [r3, #16]
 8003dc4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003dc8:	d108      	bne.n	8003ddc <I2C_MasterRequestWrite+0x8c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003dca:	897b      	ldrh	r3, [r7, #10]
 8003dcc:	b2db      	uxtb	r3, r3
 8003dce:	461a      	mov	r2, r3
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003dd8:	611a      	str	r2, [r3, #16]
 8003dda:	e01b      	b.n	8003e14 <I2C_MasterRequestWrite+0xc4>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003ddc:	897b      	ldrh	r3, [r7, #10]
 8003dde:	11db      	asrs	r3, r3, #7
 8003de0:	b2db      	uxtb	r3, r3
 8003de2:	f003 0306 	and.w	r3, r3, #6
 8003de6:	b2db      	uxtb	r3, r3
 8003de8:	f063 030f 	orn	r3, r3, #15
 8003dec:	b2da      	uxtb	r2, r3
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	687a      	ldr	r2, [r7, #4]
 8003df8:	490e      	ldr	r1, [pc, #56]	; (8003e34 <I2C_MasterRequestWrite+0xe4>)
 8003dfa:	68f8      	ldr	r0, [r7, #12]
 8003dfc:	f000 f9b5 	bl	800416a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003e00:	4603      	mov	r3, r0
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d001      	beq.n	8003e0a <I2C_MasterRequestWrite+0xba>
    {
      return HAL_ERROR;
 8003e06:	2301      	movs	r3, #1
 8003e08:	e010      	b.n	8003e2c <I2C_MasterRequestWrite+0xdc>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003e0a:	897b      	ldrh	r3, [r7, #10]
 8003e0c:	b2da      	uxtb	r2, r3
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	687a      	ldr	r2, [r7, #4]
 8003e18:	4907      	ldr	r1, [pc, #28]	; (8003e38 <I2C_MasterRequestWrite+0xe8>)
 8003e1a:	68f8      	ldr	r0, [r7, #12]
 8003e1c:	f000 f9a5 	bl	800416a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003e20:	4603      	mov	r3, r0
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d001      	beq.n	8003e2a <I2C_MasterRequestWrite+0xda>
  {
    return HAL_ERROR;
 8003e26:	2301      	movs	r3, #1
 8003e28:	e000      	b.n	8003e2c <I2C_MasterRequestWrite+0xdc>
  }

  return HAL_OK;
 8003e2a:	2300      	movs	r3, #0
}
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	3718      	adds	r7, #24
 8003e30:	46bd      	mov	sp, r7
 8003e32:	bd80      	pop	{r7, pc}
 8003e34:	00010008 	.word	0x00010008
 8003e38:	00010002 	.word	0x00010002

08003e3c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b088      	sub	sp, #32
 8003e40:	af02      	add	r7, sp, #8
 8003e42:	60f8      	str	r0, [r7, #12]
 8003e44:	607a      	str	r2, [r7, #4]
 8003e46:	603b      	str	r3, [r7, #0]
 8003e48:	460b      	mov	r3, r1
 8003e4a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e50:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	681a      	ldr	r2, [r3, #0]
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003e60:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003e62:	697b      	ldr	r3, [r7, #20]
 8003e64:	2b08      	cmp	r3, #8
 8003e66:	d006      	beq.n	8003e76 <I2C_MasterRequestRead+0x3a>
 8003e68:	697b      	ldr	r3, [r7, #20]
 8003e6a:	2b01      	cmp	r3, #1
 8003e6c:	d003      	beq.n	8003e76 <I2C_MasterRequestRead+0x3a>
 8003e6e:	697b      	ldr	r3, [r7, #20]
 8003e70:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003e74:	d108      	bne.n	8003e88 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	681a      	ldr	r2, [r3, #0]
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e84:	601a      	str	r2, [r3, #0]
 8003e86:	e00b      	b.n	8003ea0 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e8c:	2b11      	cmp	r3, #17
 8003e8e:	d107      	bne.n	8003ea0 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	681a      	ldr	r2, [r3, #0]
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e9e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	9300      	str	r3, [sp, #0]
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003eac:	68f8      	ldr	r0, [r7, #12]
 8003eae:	f000 f905 	bl	80040bc <I2C_WaitOnFlagUntilTimeout>
 8003eb2:	4603      	mov	r3, r0
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d001      	beq.n	8003ebc <I2C_MasterRequestRead+0x80>
  {
    return HAL_ERROR;
 8003eb8:	2301      	movs	r3, #1
 8003eba:	e06d      	b.n	8003f98 <I2C_MasterRequestRead+0x15c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	691b      	ldr	r3, [r3, #16]
 8003ec0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003ec4:	d108      	bne.n	8003ed8 <I2C_MasterRequestRead+0x9c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003ec6:	897b      	ldrh	r3, [r7, #10]
 8003ec8:	b2db      	uxtb	r3, r3
 8003eca:	f043 0301 	orr.w	r3, r3, #1
 8003ece:	b2da      	uxtb	r2, r3
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	611a      	str	r2, [r3, #16]
 8003ed6:	e053      	b.n	8003f80 <I2C_MasterRequestRead+0x144>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003ed8:	897b      	ldrh	r3, [r7, #10]
 8003eda:	11db      	asrs	r3, r3, #7
 8003edc:	b2db      	uxtb	r3, r3
 8003ede:	f003 0306 	and.w	r3, r3, #6
 8003ee2:	b2db      	uxtb	r3, r3
 8003ee4:	f063 030f 	orn	r3, r3, #15
 8003ee8:	b2da      	uxtb	r2, r3
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	687a      	ldr	r2, [r7, #4]
 8003ef4:	492a      	ldr	r1, [pc, #168]	; (8003fa0 <I2C_MasterRequestRead+0x164>)
 8003ef6:	68f8      	ldr	r0, [r7, #12]
 8003ef8:	f000 f937 	bl	800416a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003efc:	4603      	mov	r3, r0
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d001      	beq.n	8003f06 <I2C_MasterRequestRead+0xca>
    {
      return HAL_ERROR;
 8003f02:	2301      	movs	r3, #1
 8003f04:	e048      	b.n	8003f98 <I2C_MasterRequestRead+0x15c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003f06:	897b      	ldrh	r3, [r7, #10]
 8003f08:	b2da      	uxtb	r2, r3
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	687a      	ldr	r2, [r7, #4]
 8003f14:	4923      	ldr	r1, [pc, #140]	; (8003fa4 <I2C_MasterRequestRead+0x168>)
 8003f16:	68f8      	ldr	r0, [r7, #12]
 8003f18:	f000 f927 	bl	800416a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003f1c:	4603      	mov	r3, r0
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d001      	beq.n	8003f26 <I2C_MasterRequestRead+0xea>
    {
      return HAL_ERROR;
 8003f22:	2301      	movs	r3, #1
 8003f24:	e038      	b.n	8003f98 <I2C_MasterRequestRead+0x15c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f26:	2300      	movs	r3, #0
 8003f28:	613b      	str	r3, [r7, #16]
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	695b      	ldr	r3, [r3, #20]
 8003f30:	613b      	str	r3, [r7, #16]
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	699b      	ldr	r3, [r3, #24]
 8003f38:	613b      	str	r3, [r7, #16]
 8003f3a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	681a      	ldr	r2, [r3, #0]
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f4a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	9300      	str	r3, [sp, #0]
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2200      	movs	r2, #0
 8003f54:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003f58:	68f8      	ldr	r0, [r7, #12]
 8003f5a:	f000 f8af 	bl	80040bc <I2C_WaitOnFlagUntilTimeout>
 8003f5e:	4603      	mov	r3, r0
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d001      	beq.n	8003f68 <I2C_MasterRequestRead+0x12c>
    {
      return HAL_ERROR;
 8003f64:	2301      	movs	r3, #1
 8003f66:	e017      	b.n	8003f98 <I2C_MasterRequestRead+0x15c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003f68:	897b      	ldrh	r3, [r7, #10]
 8003f6a:	11db      	asrs	r3, r3, #7
 8003f6c:	b2db      	uxtb	r3, r3
 8003f6e:	f003 0306 	and.w	r3, r3, #6
 8003f72:	b2db      	uxtb	r3, r3
 8003f74:	f063 030e 	orn	r3, r3, #14
 8003f78:	b2da      	uxtb	r2, r3
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	687a      	ldr	r2, [r7, #4]
 8003f84:	4907      	ldr	r1, [pc, #28]	; (8003fa4 <I2C_MasterRequestRead+0x168>)
 8003f86:	68f8      	ldr	r0, [r7, #12]
 8003f88:	f000 f8ef 	bl	800416a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003f8c:	4603      	mov	r3, r0
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d001      	beq.n	8003f96 <I2C_MasterRequestRead+0x15a>
  {
    return HAL_ERROR;
 8003f92:	2301      	movs	r3, #1
 8003f94:	e000      	b.n	8003f98 <I2C_MasterRequestRead+0x15c>
  }

  return HAL_OK;
 8003f96:	2300      	movs	r3, #0
}
 8003f98:	4618      	mov	r0, r3
 8003f9a:	3718      	adds	r7, #24
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	bd80      	pop	{r7, pc}
 8003fa0:	00010008 	.word	0x00010008
 8003fa4:	00010002 	.word	0x00010002

08003fa8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b088      	sub	sp, #32
 8003fac:	af02      	add	r7, sp, #8
 8003fae:	60f8      	str	r0, [r7, #12]
 8003fb0:	4608      	mov	r0, r1
 8003fb2:	4611      	mov	r1, r2
 8003fb4:	461a      	mov	r2, r3
 8003fb6:	4603      	mov	r3, r0
 8003fb8:	817b      	strh	r3, [r7, #10]
 8003fba:	460b      	mov	r3, r1
 8003fbc:	813b      	strh	r3, [r7, #8]
 8003fbe:	4613      	mov	r3, r2
 8003fc0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	681a      	ldr	r2, [r3, #0]
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003fd0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fd4:	9300      	str	r3, [sp, #0]
 8003fd6:	6a3b      	ldr	r3, [r7, #32]
 8003fd8:	2200      	movs	r2, #0
 8003fda:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003fde:	68f8      	ldr	r0, [r7, #12]
 8003fe0:	f000 f86c 	bl	80040bc <I2C_WaitOnFlagUntilTimeout>
 8003fe4:	4603      	mov	r3, r0
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d001      	beq.n	8003fee <I2C_RequestMemoryWrite+0x46>
  {
    return HAL_ERROR;
 8003fea:	2301      	movs	r3, #1
 8003fec:	e05f      	b.n	80040ae <I2C_RequestMemoryWrite+0x106>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003fee:	897b      	ldrh	r3, [r7, #10]
 8003ff0:	b2db      	uxtb	r3, r3
 8003ff2:	461a      	mov	r2, r3
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003ffc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004000:	6a3a      	ldr	r2, [r7, #32]
 8004002:	492d      	ldr	r1, [pc, #180]	; (80040b8 <I2C_RequestMemoryWrite+0x110>)
 8004004:	68f8      	ldr	r0, [r7, #12]
 8004006:	f000 f8b0 	bl	800416a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800400a:	4603      	mov	r3, r0
 800400c:	2b00      	cmp	r3, #0
 800400e:	d001      	beq.n	8004014 <I2C_RequestMemoryWrite+0x6c>
  {
    return HAL_ERROR;
 8004010:	2301      	movs	r3, #1
 8004012:	e04c      	b.n	80040ae <I2C_RequestMemoryWrite+0x106>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004014:	2300      	movs	r3, #0
 8004016:	617b      	str	r3, [r7, #20]
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	695b      	ldr	r3, [r3, #20]
 800401e:	617b      	str	r3, [r7, #20]
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	699b      	ldr	r3, [r3, #24]
 8004026:	617b      	str	r3, [r7, #20]
 8004028:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800402a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800402c:	6a39      	ldr	r1, [r7, #32]
 800402e:	68f8      	ldr	r0, [r7, #12]
 8004030:	f000 f91a 	bl	8004268 <I2C_WaitOnTXEFlagUntilTimeout>
 8004034:	4603      	mov	r3, r0
 8004036:	2b00      	cmp	r3, #0
 8004038:	d00d      	beq.n	8004056 <I2C_RequestMemoryWrite+0xae>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800403e:	2b04      	cmp	r3, #4
 8004040:	d107      	bne.n	8004052 <I2C_RequestMemoryWrite+0xaa>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	681a      	ldr	r2, [r3, #0]
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004050:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004052:	2301      	movs	r3, #1
 8004054:	e02b      	b.n	80040ae <I2C_RequestMemoryWrite+0x106>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004056:	88fb      	ldrh	r3, [r7, #6]
 8004058:	2b01      	cmp	r3, #1
 800405a:	d105      	bne.n	8004068 <I2C_RequestMemoryWrite+0xc0>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800405c:	893b      	ldrh	r3, [r7, #8]
 800405e:	b2da      	uxtb	r2, r3
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	611a      	str	r2, [r3, #16]
 8004066:	e021      	b.n	80040ac <I2C_RequestMemoryWrite+0x104>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004068:	893b      	ldrh	r3, [r7, #8]
 800406a:	0a1b      	lsrs	r3, r3, #8
 800406c:	b29b      	uxth	r3, r3
 800406e:	b2da      	uxtb	r2, r3
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004076:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004078:	6a39      	ldr	r1, [r7, #32]
 800407a:	68f8      	ldr	r0, [r7, #12]
 800407c:	f000 f8f4 	bl	8004268 <I2C_WaitOnTXEFlagUntilTimeout>
 8004080:	4603      	mov	r3, r0
 8004082:	2b00      	cmp	r3, #0
 8004084:	d00d      	beq.n	80040a2 <I2C_RequestMemoryWrite+0xfa>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800408a:	2b04      	cmp	r3, #4
 800408c:	d107      	bne.n	800409e <I2C_RequestMemoryWrite+0xf6>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	681a      	ldr	r2, [r3, #0]
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800409c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800409e:	2301      	movs	r3, #1
 80040a0:	e005      	b.n	80040ae <I2C_RequestMemoryWrite+0x106>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80040a2:	893b      	ldrh	r3, [r7, #8]
 80040a4:	b2da      	uxtb	r2, r3
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80040ac:	2300      	movs	r3, #0
}
 80040ae:	4618      	mov	r0, r3
 80040b0:	3718      	adds	r7, #24
 80040b2:	46bd      	mov	sp, r7
 80040b4:	bd80      	pop	{r7, pc}
 80040b6:	bf00      	nop
 80040b8:	00010002 	.word	0x00010002

080040bc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b084      	sub	sp, #16
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	60f8      	str	r0, [r7, #12]
 80040c4:	60b9      	str	r1, [r7, #8]
 80040c6:	603b      	str	r3, [r7, #0]
 80040c8:	4613      	mov	r3, r2
 80040ca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80040cc:	e025      	b.n	800411a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040d4:	d021      	beq.n	800411a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040d6:	f7fe f90d 	bl	80022f4 <HAL_GetTick>
 80040da:	4602      	mov	r2, r0
 80040dc:	69bb      	ldr	r3, [r7, #24]
 80040de:	1ad3      	subs	r3, r2, r3
 80040e0:	683a      	ldr	r2, [r7, #0]
 80040e2:	429a      	cmp	r2, r3
 80040e4:	d302      	bcc.n	80040ec <I2C_WaitOnFlagUntilTimeout+0x30>
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d116      	bne.n	800411a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	2200      	movs	r2, #0
 80040f0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	2220      	movs	r2, #32
 80040f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	2200      	movs	r2, #0
 80040fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004106:	f043 0220 	orr.w	r2, r3, #32
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	2200      	movs	r2, #0
 8004112:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004116:	2301      	movs	r3, #1
 8004118:	e023      	b.n	8004162 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800411a:	68bb      	ldr	r3, [r7, #8]
 800411c:	0c1b      	lsrs	r3, r3, #16
 800411e:	b2db      	uxtb	r3, r3
 8004120:	2b01      	cmp	r3, #1
 8004122:	d10d      	bne.n	8004140 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	695b      	ldr	r3, [r3, #20]
 800412a:	43da      	mvns	r2, r3
 800412c:	68bb      	ldr	r3, [r7, #8]
 800412e:	4013      	ands	r3, r2
 8004130:	b29b      	uxth	r3, r3
 8004132:	2b00      	cmp	r3, #0
 8004134:	bf0c      	ite	eq
 8004136:	2301      	moveq	r3, #1
 8004138:	2300      	movne	r3, #0
 800413a:	b2db      	uxtb	r3, r3
 800413c:	461a      	mov	r2, r3
 800413e:	e00c      	b.n	800415a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	699b      	ldr	r3, [r3, #24]
 8004146:	43da      	mvns	r2, r3
 8004148:	68bb      	ldr	r3, [r7, #8]
 800414a:	4013      	ands	r3, r2
 800414c:	b29b      	uxth	r3, r3
 800414e:	2b00      	cmp	r3, #0
 8004150:	bf0c      	ite	eq
 8004152:	2301      	moveq	r3, #1
 8004154:	2300      	movne	r3, #0
 8004156:	b2db      	uxtb	r3, r3
 8004158:	461a      	mov	r2, r3
 800415a:	79fb      	ldrb	r3, [r7, #7]
 800415c:	429a      	cmp	r2, r3
 800415e:	d0b6      	beq.n	80040ce <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004160:	2300      	movs	r3, #0
}
 8004162:	4618      	mov	r0, r3
 8004164:	3710      	adds	r7, #16
 8004166:	46bd      	mov	sp, r7
 8004168:	bd80      	pop	{r7, pc}

0800416a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800416a:	b580      	push	{r7, lr}
 800416c:	b084      	sub	sp, #16
 800416e:	af00      	add	r7, sp, #0
 8004170:	60f8      	str	r0, [r7, #12]
 8004172:	60b9      	str	r1, [r7, #8]
 8004174:	607a      	str	r2, [r7, #4]
 8004176:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004178:	e051      	b.n	800421e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	695b      	ldr	r3, [r3, #20]
 8004180:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004184:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004188:	d123      	bne.n	80041d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	681a      	ldr	r2, [r3, #0]
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004198:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80041a2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	2200      	movs	r2, #0
 80041a8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	2220      	movs	r2, #32
 80041ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	2200      	movs	r2, #0
 80041b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041be:	f043 0204 	orr.w	r2, r3, #4
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	2200      	movs	r2, #0
 80041ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80041ce:	2301      	movs	r3, #1
 80041d0:	e046      	b.n	8004260 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041d8:	d021      	beq.n	800421e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041da:	f7fe f88b 	bl	80022f4 <HAL_GetTick>
 80041de:	4602      	mov	r2, r0
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	1ad3      	subs	r3, r2, r3
 80041e4:	687a      	ldr	r2, [r7, #4]
 80041e6:	429a      	cmp	r2, r3
 80041e8:	d302      	bcc.n	80041f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d116      	bne.n	800421e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	2200      	movs	r2, #0
 80041f4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	2220      	movs	r2, #32
 80041fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	2200      	movs	r2, #0
 8004202:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800420a:	f043 0220 	orr.w	r2, r3, #32
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	2200      	movs	r2, #0
 8004216:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800421a:	2301      	movs	r3, #1
 800421c:	e020      	b.n	8004260 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800421e:	68bb      	ldr	r3, [r7, #8]
 8004220:	0c1b      	lsrs	r3, r3, #16
 8004222:	b2db      	uxtb	r3, r3
 8004224:	2b01      	cmp	r3, #1
 8004226:	d10c      	bne.n	8004242 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	695b      	ldr	r3, [r3, #20]
 800422e:	43da      	mvns	r2, r3
 8004230:	68bb      	ldr	r3, [r7, #8]
 8004232:	4013      	ands	r3, r2
 8004234:	b29b      	uxth	r3, r3
 8004236:	2b00      	cmp	r3, #0
 8004238:	bf14      	ite	ne
 800423a:	2301      	movne	r3, #1
 800423c:	2300      	moveq	r3, #0
 800423e:	b2db      	uxtb	r3, r3
 8004240:	e00b      	b.n	800425a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	699b      	ldr	r3, [r3, #24]
 8004248:	43da      	mvns	r2, r3
 800424a:	68bb      	ldr	r3, [r7, #8]
 800424c:	4013      	ands	r3, r2
 800424e:	b29b      	uxth	r3, r3
 8004250:	2b00      	cmp	r3, #0
 8004252:	bf14      	ite	ne
 8004254:	2301      	movne	r3, #1
 8004256:	2300      	moveq	r3, #0
 8004258:	b2db      	uxtb	r3, r3
 800425a:	2b00      	cmp	r3, #0
 800425c:	d18d      	bne.n	800417a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800425e:	2300      	movs	r3, #0
}
 8004260:	4618      	mov	r0, r3
 8004262:	3710      	adds	r7, #16
 8004264:	46bd      	mov	sp, r7
 8004266:	bd80      	pop	{r7, pc}

08004268 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004268:	b580      	push	{r7, lr}
 800426a:	b084      	sub	sp, #16
 800426c:	af00      	add	r7, sp, #0
 800426e:	60f8      	str	r0, [r7, #12]
 8004270:	60b9      	str	r1, [r7, #8]
 8004272:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004274:	e02d      	b.n	80042d2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004276:	68f8      	ldr	r0, [r7, #12]
 8004278:	f000 f8ce 	bl	8004418 <I2C_IsAcknowledgeFailed>
 800427c:	4603      	mov	r3, r0
 800427e:	2b00      	cmp	r3, #0
 8004280:	d001      	beq.n	8004286 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004282:	2301      	movs	r3, #1
 8004284:	e02d      	b.n	80042e2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004286:	68bb      	ldr	r3, [r7, #8]
 8004288:	f1b3 3fff 	cmp.w	r3, #4294967295
 800428c:	d021      	beq.n	80042d2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800428e:	f7fe f831 	bl	80022f4 <HAL_GetTick>
 8004292:	4602      	mov	r2, r0
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	1ad3      	subs	r3, r2, r3
 8004298:	68ba      	ldr	r2, [r7, #8]
 800429a:	429a      	cmp	r2, r3
 800429c:	d302      	bcc.n	80042a4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800429e:	68bb      	ldr	r3, [r7, #8]
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d116      	bne.n	80042d2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	2200      	movs	r2, #0
 80042a8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	2220      	movs	r2, #32
 80042ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	2200      	movs	r2, #0
 80042b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042be:	f043 0220 	orr.w	r2, r3, #32
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	2200      	movs	r2, #0
 80042ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80042ce:	2301      	movs	r3, #1
 80042d0:	e007      	b.n	80042e2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	695b      	ldr	r3, [r3, #20]
 80042d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042dc:	2b80      	cmp	r3, #128	; 0x80
 80042de:	d1ca      	bne.n	8004276 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80042e0:	2300      	movs	r3, #0
}
 80042e2:	4618      	mov	r0, r3
 80042e4:	3710      	adds	r7, #16
 80042e6:	46bd      	mov	sp, r7
 80042e8:	bd80      	pop	{r7, pc}

080042ea <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80042ea:	b580      	push	{r7, lr}
 80042ec:	b084      	sub	sp, #16
 80042ee:	af00      	add	r7, sp, #0
 80042f0:	60f8      	str	r0, [r7, #12]
 80042f2:	60b9      	str	r1, [r7, #8]
 80042f4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80042f6:	e02d      	b.n	8004354 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80042f8:	68f8      	ldr	r0, [r7, #12]
 80042fa:	f000 f88d 	bl	8004418 <I2C_IsAcknowledgeFailed>
 80042fe:	4603      	mov	r3, r0
 8004300:	2b00      	cmp	r3, #0
 8004302:	d001      	beq.n	8004308 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004304:	2301      	movs	r3, #1
 8004306:	e02d      	b.n	8004364 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004308:	68bb      	ldr	r3, [r7, #8]
 800430a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800430e:	d021      	beq.n	8004354 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004310:	f7fd fff0 	bl	80022f4 <HAL_GetTick>
 8004314:	4602      	mov	r2, r0
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	1ad3      	subs	r3, r2, r3
 800431a:	68ba      	ldr	r2, [r7, #8]
 800431c:	429a      	cmp	r2, r3
 800431e:	d302      	bcc.n	8004326 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004320:	68bb      	ldr	r3, [r7, #8]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d116      	bne.n	8004354 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	2200      	movs	r2, #0
 800432a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	2220      	movs	r2, #32
 8004330:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	2200      	movs	r2, #0
 8004338:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004340:	f043 0220 	orr.w	r2, r3, #32
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	2200      	movs	r2, #0
 800434c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004350:	2301      	movs	r3, #1
 8004352:	e007      	b.n	8004364 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	695b      	ldr	r3, [r3, #20]
 800435a:	f003 0304 	and.w	r3, r3, #4
 800435e:	2b04      	cmp	r3, #4
 8004360:	d1ca      	bne.n	80042f8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004362:	2300      	movs	r3, #0
}
 8004364:	4618      	mov	r0, r3
 8004366:	3710      	adds	r7, #16
 8004368:	46bd      	mov	sp, r7
 800436a:	bd80      	pop	{r7, pc}

0800436c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800436c:	b580      	push	{r7, lr}
 800436e:	b084      	sub	sp, #16
 8004370:	af00      	add	r7, sp, #0
 8004372:	60f8      	str	r0, [r7, #12]
 8004374:	60b9      	str	r1, [r7, #8]
 8004376:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004378:	e042      	b.n	8004400 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	695b      	ldr	r3, [r3, #20]
 8004380:	f003 0310 	and.w	r3, r3, #16
 8004384:	2b10      	cmp	r3, #16
 8004386:	d119      	bne.n	80043bc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f06f 0210 	mvn.w	r2, #16
 8004390:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	2200      	movs	r2, #0
 8004396:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	2220      	movs	r2, #32
 800439c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	2200      	movs	r2, #0
 80043a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	2200      	movs	r2, #0
 80043b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80043b8:	2301      	movs	r3, #1
 80043ba:	e029      	b.n	8004410 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043bc:	f7fd ff9a 	bl	80022f4 <HAL_GetTick>
 80043c0:	4602      	mov	r2, r0
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	1ad3      	subs	r3, r2, r3
 80043c6:	68ba      	ldr	r2, [r7, #8]
 80043c8:	429a      	cmp	r2, r3
 80043ca:	d302      	bcc.n	80043d2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80043cc:	68bb      	ldr	r3, [r7, #8]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d116      	bne.n	8004400 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	2200      	movs	r2, #0
 80043d6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	2220      	movs	r2, #32
 80043dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	2200      	movs	r2, #0
 80043e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ec:	f043 0220 	orr.w	r2, r3, #32
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	2200      	movs	r2, #0
 80043f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80043fc:	2301      	movs	r3, #1
 80043fe:	e007      	b.n	8004410 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	695b      	ldr	r3, [r3, #20]
 8004406:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800440a:	2b40      	cmp	r3, #64	; 0x40
 800440c:	d1b5      	bne.n	800437a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800440e:	2300      	movs	r3, #0
}
 8004410:	4618      	mov	r0, r3
 8004412:	3710      	adds	r7, #16
 8004414:	46bd      	mov	sp, r7
 8004416:	bd80      	pop	{r7, pc}

08004418 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004418:	b480      	push	{r7}
 800441a:	b083      	sub	sp, #12
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	695b      	ldr	r3, [r3, #20]
 8004426:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800442a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800442e:	d11b      	bne.n	8004468 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004438:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2200      	movs	r2, #0
 800443e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2220      	movs	r2, #32
 8004444:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2200      	movs	r2, #0
 800444c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004454:	f043 0204 	orr.w	r2, r3, #4
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2200      	movs	r2, #0
 8004460:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004464:	2301      	movs	r3, #1
 8004466:	e000      	b.n	800446a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004468:	2300      	movs	r3, #0
}
 800446a:	4618      	mov	r0, r3
 800446c:	370c      	adds	r7, #12
 800446e:	46bd      	mov	sp, r7
 8004470:	bc80      	pop	{r7}
 8004472:	4770      	bx	lr

08004474 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004474:	b580      	push	{r7, lr}
 8004476:	b086      	sub	sp, #24
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d101      	bne.n	8004486 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004482:	2301      	movs	r3, #1
 8004484:	e26c      	b.n	8004960 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f003 0301 	and.w	r3, r3, #1
 800448e:	2b00      	cmp	r3, #0
 8004490:	f000 8087 	beq.w	80045a2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004494:	4b92      	ldr	r3, [pc, #584]	; (80046e0 <HAL_RCC_OscConfig+0x26c>)
 8004496:	685b      	ldr	r3, [r3, #4]
 8004498:	f003 030c 	and.w	r3, r3, #12
 800449c:	2b04      	cmp	r3, #4
 800449e:	d00c      	beq.n	80044ba <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80044a0:	4b8f      	ldr	r3, [pc, #572]	; (80046e0 <HAL_RCC_OscConfig+0x26c>)
 80044a2:	685b      	ldr	r3, [r3, #4]
 80044a4:	f003 030c 	and.w	r3, r3, #12
 80044a8:	2b08      	cmp	r3, #8
 80044aa:	d112      	bne.n	80044d2 <HAL_RCC_OscConfig+0x5e>
 80044ac:	4b8c      	ldr	r3, [pc, #560]	; (80046e0 <HAL_RCC_OscConfig+0x26c>)
 80044ae:	685b      	ldr	r3, [r3, #4]
 80044b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044b8:	d10b      	bne.n	80044d2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044ba:	4b89      	ldr	r3, [pc, #548]	; (80046e0 <HAL_RCC_OscConfig+0x26c>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d06c      	beq.n	80045a0 <HAL_RCC_OscConfig+0x12c>
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	685b      	ldr	r3, [r3, #4]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d168      	bne.n	80045a0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80044ce:	2301      	movs	r3, #1
 80044d0:	e246      	b.n	8004960 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	685b      	ldr	r3, [r3, #4]
 80044d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044da:	d106      	bne.n	80044ea <HAL_RCC_OscConfig+0x76>
 80044dc:	4b80      	ldr	r3, [pc, #512]	; (80046e0 <HAL_RCC_OscConfig+0x26c>)
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	4a7f      	ldr	r2, [pc, #508]	; (80046e0 <HAL_RCC_OscConfig+0x26c>)
 80044e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044e6:	6013      	str	r3, [r2, #0]
 80044e8:	e02e      	b.n	8004548 <HAL_RCC_OscConfig+0xd4>
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	685b      	ldr	r3, [r3, #4]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d10c      	bne.n	800450c <HAL_RCC_OscConfig+0x98>
 80044f2:	4b7b      	ldr	r3, [pc, #492]	; (80046e0 <HAL_RCC_OscConfig+0x26c>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4a7a      	ldr	r2, [pc, #488]	; (80046e0 <HAL_RCC_OscConfig+0x26c>)
 80044f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044fc:	6013      	str	r3, [r2, #0]
 80044fe:	4b78      	ldr	r3, [pc, #480]	; (80046e0 <HAL_RCC_OscConfig+0x26c>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	4a77      	ldr	r2, [pc, #476]	; (80046e0 <HAL_RCC_OscConfig+0x26c>)
 8004504:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004508:	6013      	str	r3, [r2, #0]
 800450a:	e01d      	b.n	8004548 <HAL_RCC_OscConfig+0xd4>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	685b      	ldr	r3, [r3, #4]
 8004510:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004514:	d10c      	bne.n	8004530 <HAL_RCC_OscConfig+0xbc>
 8004516:	4b72      	ldr	r3, [pc, #456]	; (80046e0 <HAL_RCC_OscConfig+0x26c>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	4a71      	ldr	r2, [pc, #452]	; (80046e0 <HAL_RCC_OscConfig+0x26c>)
 800451c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004520:	6013      	str	r3, [r2, #0]
 8004522:	4b6f      	ldr	r3, [pc, #444]	; (80046e0 <HAL_RCC_OscConfig+0x26c>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	4a6e      	ldr	r2, [pc, #440]	; (80046e0 <HAL_RCC_OscConfig+0x26c>)
 8004528:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800452c:	6013      	str	r3, [r2, #0]
 800452e:	e00b      	b.n	8004548 <HAL_RCC_OscConfig+0xd4>
 8004530:	4b6b      	ldr	r3, [pc, #428]	; (80046e0 <HAL_RCC_OscConfig+0x26c>)
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	4a6a      	ldr	r2, [pc, #424]	; (80046e0 <HAL_RCC_OscConfig+0x26c>)
 8004536:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800453a:	6013      	str	r3, [r2, #0]
 800453c:	4b68      	ldr	r3, [pc, #416]	; (80046e0 <HAL_RCC_OscConfig+0x26c>)
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	4a67      	ldr	r2, [pc, #412]	; (80046e0 <HAL_RCC_OscConfig+0x26c>)
 8004542:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004546:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	685b      	ldr	r3, [r3, #4]
 800454c:	2b00      	cmp	r3, #0
 800454e:	d013      	beq.n	8004578 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004550:	f7fd fed0 	bl	80022f4 <HAL_GetTick>
 8004554:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004556:	e008      	b.n	800456a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004558:	f7fd fecc 	bl	80022f4 <HAL_GetTick>
 800455c:	4602      	mov	r2, r0
 800455e:	693b      	ldr	r3, [r7, #16]
 8004560:	1ad3      	subs	r3, r2, r3
 8004562:	2b64      	cmp	r3, #100	; 0x64
 8004564:	d901      	bls.n	800456a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004566:	2303      	movs	r3, #3
 8004568:	e1fa      	b.n	8004960 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800456a:	4b5d      	ldr	r3, [pc, #372]	; (80046e0 <HAL_RCC_OscConfig+0x26c>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004572:	2b00      	cmp	r3, #0
 8004574:	d0f0      	beq.n	8004558 <HAL_RCC_OscConfig+0xe4>
 8004576:	e014      	b.n	80045a2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004578:	f7fd febc 	bl	80022f4 <HAL_GetTick>
 800457c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800457e:	e008      	b.n	8004592 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004580:	f7fd feb8 	bl	80022f4 <HAL_GetTick>
 8004584:	4602      	mov	r2, r0
 8004586:	693b      	ldr	r3, [r7, #16]
 8004588:	1ad3      	subs	r3, r2, r3
 800458a:	2b64      	cmp	r3, #100	; 0x64
 800458c:	d901      	bls.n	8004592 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800458e:	2303      	movs	r3, #3
 8004590:	e1e6      	b.n	8004960 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004592:	4b53      	ldr	r3, [pc, #332]	; (80046e0 <HAL_RCC_OscConfig+0x26c>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800459a:	2b00      	cmp	r3, #0
 800459c:	d1f0      	bne.n	8004580 <HAL_RCC_OscConfig+0x10c>
 800459e:	e000      	b.n	80045a2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f003 0302 	and.w	r3, r3, #2
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d063      	beq.n	8004676 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80045ae:	4b4c      	ldr	r3, [pc, #304]	; (80046e0 <HAL_RCC_OscConfig+0x26c>)
 80045b0:	685b      	ldr	r3, [r3, #4]
 80045b2:	f003 030c 	and.w	r3, r3, #12
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d00b      	beq.n	80045d2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80045ba:	4b49      	ldr	r3, [pc, #292]	; (80046e0 <HAL_RCC_OscConfig+0x26c>)
 80045bc:	685b      	ldr	r3, [r3, #4]
 80045be:	f003 030c 	and.w	r3, r3, #12
 80045c2:	2b08      	cmp	r3, #8
 80045c4:	d11c      	bne.n	8004600 <HAL_RCC_OscConfig+0x18c>
 80045c6:	4b46      	ldr	r3, [pc, #280]	; (80046e0 <HAL_RCC_OscConfig+0x26c>)
 80045c8:	685b      	ldr	r3, [r3, #4]
 80045ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d116      	bne.n	8004600 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80045d2:	4b43      	ldr	r3, [pc, #268]	; (80046e0 <HAL_RCC_OscConfig+0x26c>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f003 0302 	and.w	r3, r3, #2
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d005      	beq.n	80045ea <HAL_RCC_OscConfig+0x176>
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	691b      	ldr	r3, [r3, #16]
 80045e2:	2b01      	cmp	r3, #1
 80045e4:	d001      	beq.n	80045ea <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80045e6:	2301      	movs	r3, #1
 80045e8:	e1ba      	b.n	8004960 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045ea:	4b3d      	ldr	r3, [pc, #244]	; (80046e0 <HAL_RCC_OscConfig+0x26c>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	695b      	ldr	r3, [r3, #20]
 80045f6:	00db      	lsls	r3, r3, #3
 80045f8:	4939      	ldr	r1, [pc, #228]	; (80046e0 <HAL_RCC_OscConfig+0x26c>)
 80045fa:	4313      	orrs	r3, r2
 80045fc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80045fe:	e03a      	b.n	8004676 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	691b      	ldr	r3, [r3, #16]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d020      	beq.n	800464a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004608:	4b36      	ldr	r3, [pc, #216]	; (80046e4 <HAL_RCC_OscConfig+0x270>)
 800460a:	2201      	movs	r2, #1
 800460c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800460e:	f7fd fe71 	bl	80022f4 <HAL_GetTick>
 8004612:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004614:	e008      	b.n	8004628 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004616:	f7fd fe6d 	bl	80022f4 <HAL_GetTick>
 800461a:	4602      	mov	r2, r0
 800461c:	693b      	ldr	r3, [r7, #16]
 800461e:	1ad3      	subs	r3, r2, r3
 8004620:	2b02      	cmp	r3, #2
 8004622:	d901      	bls.n	8004628 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004624:	2303      	movs	r3, #3
 8004626:	e19b      	b.n	8004960 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004628:	4b2d      	ldr	r3, [pc, #180]	; (80046e0 <HAL_RCC_OscConfig+0x26c>)
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f003 0302 	and.w	r3, r3, #2
 8004630:	2b00      	cmp	r3, #0
 8004632:	d0f0      	beq.n	8004616 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004634:	4b2a      	ldr	r3, [pc, #168]	; (80046e0 <HAL_RCC_OscConfig+0x26c>)
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	695b      	ldr	r3, [r3, #20]
 8004640:	00db      	lsls	r3, r3, #3
 8004642:	4927      	ldr	r1, [pc, #156]	; (80046e0 <HAL_RCC_OscConfig+0x26c>)
 8004644:	4313      	orrs	r3, r2
 8004646:	600b      	str	r3, [r1, #0]
 8004648:	e015      	b.n	8004676 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800464a:	4b26      	ldr	r3, [pc, #152]	; (80046e4 <HAL_RCC_OscConfig+0x270>)
 800464c:	2200      	movs	r2, #0
 800464e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004650:	f7fd fe50 	bl	80022f4 <HAL_GetTick>
 8004654:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004656:	e008      	b.n	800466a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004658:	f7fd fe4c 	bl	80022f4 <HAL_GetTick>
 800465c:	4602      	mov	r2, r0
 800465e:	693b      	ldr	r3, [r7, #16]
 8004660:	1ad3      	subs	r3, r2, r3
 8004662:	2b02      	cmp	r3, #2
 8004664:	d901      	bls.n	800466a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004666:	2303      	movs	r3, #3
 8004668:	e17a      	b.n	8004960 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800466a:	4b1d      	ldr	r3, [pc, #116]	; (80046e0 <HAL_RCC_OscConfig+0x26c>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f003 0302 	and.w	r3, r3, #2
 8004672:	2b00      	cmp	r3, #0
 8004674:	d1f0      	bne.n	8004658 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f003 0308 	and.w	r3, r3, #8
 800467e:	2b00      	cmp	r3, #0
 8004680:	d03a      	beq.n	80046f8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	699b      	ldr	r3, [r3, #24]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d019      	beq.n	80046be <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800468a:	4b17      	ldr	r3, [pc, #92]	; (80046e8 <HAL_RCC_OscConfig+0x274>)
 800468c:	2201      	movs	r2, #1
 800468e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004690:	f7fd fe30 	bl	80022f4 <HAL_GetTick>
 8004694:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004696:	e008      	b.n	80046aa <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004698:	f7fd fe2c 	bl	80022f4 <HAL_GetTick>
 800469c:	4602      	mov	r2, r0
 800469e:	693b      	ldr	r3, [r7, #16]
 80046a0:	1ad3      	subs	r3, r2, r3
 80046a2:	2b02      	cmp	r3, #2
 80046a4:	d901      	bls.n	80046aa <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80046a6:	2303      	movs	r3, #3
 80046a8:	e15a      	b.n	8004960 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80046aa:	4b0d      	ldr	r3, [pc, #52]	; (80046e0 <HAL_RCC_OscConfig+0x26c>)
 80046ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ae:	f003 0302 	and.w	r3, r3, #2
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d0f0      	beq.n	8004698 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80046b6:	2001      	movs	r0, #1
 80046b8:	f000 fada 	bl	8004c70 <RCC_Delay>
 80046bc:	e01c      	b.n	80046f8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80046be:	4b0a      	ldr	r3, [pc, #40]	; (80046e8 <HAL_RCC_OscConfig+0x274>)
 80046c0:	2200      	movs	r2, #0
 80046c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046c4:	f7fd fe16 	bl	80022f4 <HAL_GetTick>
 80046c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80046ca:	e00f      	b.n	80046ec <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80046cc:	f7fd fe12 	bl	80022f4 <HAL_GetTick>
 80046d0:	4602      	mov	r2, r0
 80046d2:	693b      	ldr	r3, [r7, #16]
 80046d4:	1ad3      	subs	r3, r2, r3
 80046d6:	2b02      	cmp	r3, #2
 80046d8:	d908      	bls.n	80046ec <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80046da:	2303      	movs	r3, #3
 80046dc:	e140      	b.n	8004960 <HAL_RCC_OscConfig+0x4ec>
 80046de:	bf00      	nop
 80046e0:	40021000 	.word	0x40021000
 80046e4:	42420000 	.word	0x42420000
 80046e8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80046ec:	4b9e      	ldr	r3, [pc, #632]	; (8004968 <HAL_RCC_OscConfig+0x4f4>)
 80046ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046f0:	f003 0302 	and.w	r3, r3, #2
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d1e9      	bne.n	80046cc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f003 0304 	and.w	r3, r3, #4
 8004700:	2b00      	cmp	r3, #0
 8004702:	f000 80a6 	beq.w	8004852 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004706:	2300      	movs	r3, #0
 8004708:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800470a:	4b97      	ldr	r3, [pc, #604]	; (8004968 <HAL_RCC_OscConfig+0x4f4>)
 800470c:	69db      	ldr	r3, [r3, #28]
 800470e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004712:	2b00      	cmp	r3, #0
 8004714:	d10d      	bne.n	8004732 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004716:	4b94      	ldr	r3, [pc, #592]	; (8004968 <HAL_RCC_OscConfig+0x4f4>)
 8004718:	69db      	ldr	r3, [r3, #28]
 800471a:	4a93      	ldr	r2, [pc, #588]	; (8004968 <HAL_RCC_OscConfig+0x4f4>)
 800471c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004720:	61d3      	str	r3, [r2, #28]
 8004722:	4b91      	ldr	r3, [pc, #580]	; (8004968 <HAL_RCC_OscConfig+0x4f4>)
 8004724:	69db      	ldr	r3, [r3, #28]
 8004726:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800472a:	60bb      	str	r3, [r7, #8]
 800472c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800472e:	2301      	movs	r3, #1
 8004730:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004732:	4b8e      	ldr	r3, [pc, #568]	; (800496c <HAL_RCC_OscConfig+0x4f8>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800473a:	2b00      	cmp	r3, #0
 800473c:	d118      	bne.n	8004770 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800473e:	4b8b      	ldr	r3, [pc, #556]	; (800496c <HAL_RCC_OscConfig+0x4f8>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	4a8a      	ldr	r2, [pc, #552]	; (800496c <HAL_RCC_OscConfig+0x4f8>)
 8004744:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004748:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800474a:	f7fd fdd3 	bl	80022f4 <HAL_GetTick>
 800474e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004750:	e008      	b.n	8004764 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004752:	f7fd fdcf 	bl	80022f4 <HAL_GetTick>
 8004756:	4602      	mov	r2, r0
 8004758:	693b      	ldr	r3, [r7, #16]
 800475a:	1ad3      	subs	r3, r2, r3
 800475c:	2b64      	cmp	r3, #100	; 0x64
 800475e:	d901      	bls.n	8004764 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004760:	2303      	movs	r3, #3
 8004762:	e0fd      	b.n	8004960 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004764:	4b81      	ldr	r3, [pc, #516]	; (800496c <HAL_RCC_OscConfig+0x4f8>)
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800476c:	2b00      	cmp	r3, #0
 800476e:	d0f0      	beq.n	8004752 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	68db      	ldr	r3, [r3, #12]
 8004774:	2b01      	cmp	r3, #1
 8004776:	d106      	bne.n	8004786 <HAL_RCC_OscConfig+0x312>
 8004778:	4b7b      	ldr	r3, [pc, #492]	; (8004968 <HAL_RCC_OscConfig+0x4f4>)
 800477a:	6a1b      	ldr	r3, [r3, #32]
 800477c:	4a7a      	ldr	r2, [pc, #488]	; (8004968 <HAL_RCC_OscConfig+0x4f4>)
 800477e:	f043 0301 	orr.w	r3, r3, #1
 8004782:	6213      	str	r3, [r2, #32]
 8004784:	e02d      	b.n	80047e2 <HAL_RCC_OscConfig+0x36e>
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	68db      	ldr	r3, [r3, #12]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d10c      	bne.n	80047a8 <HAL_RCC_OscConfig+0x334>
 800478e:	4b76      	ldr	r3, [pc, #472]	; (8004968 <HAL_RCC_OscConfig+0x4f4>)
 8004790:	6a1b      	ldr	r3, [r3, #32]
 8004792:	4a75      	ldr	r2, [pc, #468]	; (8004968 <HAL_RCC_OscConfig+0x4f4>)
 8004794:	f023 0301 	bic.w	r3, r3, #1
 8004798:	6213      	str	r3, [r2, #32]
 800479a:	4b73      	ldr	r3, [pc, #460]	; (8004968 <HAL_RCC_OscConfig+0x4f4>)
 800479c:	6a1b      	ldr	r3, [r3, #32]
 800479e:	4a72      	ldr	r2, [pc, #456]	; (8004968 <HAL_RCC_OscConfig+0x4f4>)
 80047a0:	f023 0304 	bic.w	r3, r3, #4
 80047a4:	6213      	str	r3, [r2, #32]
 80047a6:	e01c      	b.n	80047e2 <HAL_RCC_OscConfig+0x36e>
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	68db      	ldr	r3, [r3, #12]
 80047ac:	2b05      	cmp	r3, #5
 80047ae:	d10c      	bne.n	80047ca <HAL_RCC_OscConfig+0x356>
 80047b0:	4b6d      	ldr	r3, [pc, #436]	; (8004968 <HAL_RCC_OscConfig+0x4f4>)
 80047b2:	6a1b      	ldr	r3, [r3, #32]
 80047b4:	4a6c      	ldr	r2, [pc, #432]	; (8004968 <HAL_RCC_OscConfig+0x4f4>)
 80047b6:	f043 0304 	orr.w	r3, r3, #4
 80047ba:	6213      	str	r3, [r2, #32]
 80047bc:	4b6a      	ldr	r3, [pc, #424]	; (8004968 <HAL_RCC_OscConfig+0x4f4>)
 80047be:	6a1b      	ldr	r3, [r3, #32]
 80047c0:	4a69      	ldr	r2, [pc, #420]	; (8004968 <HAL_RCC_OscConfig+0x4f4>)
 80047c2:	f043 0301 	orr.w	r3, r3, #1
 80047c6:	6213      	str	r3, [r2, #32]
 80047c8:	e00b      	b.n	80047e2 <HAL_RCC_OscConfig+0x36e>
 80047ca:	4b67      	ldr	r3, [pc, #412]	; (8004968 <HAL_RCC_OscConfig+0x4f4>)
 80047cc:	6a1b      	ldr	r3, [r3, #32]
 80047ce:	4a66      	ldr	r2, [pc, #408]	; (8004968 <HAL_RCC_OscConfig+0x4f4>)
 80047d0:	f023 0301 	bic.w	r3, r3, #1
 80047d4:	6213      	str	r3, [r2, #32]
 80047d6:	4b64      	ldr	r3, [pc, #400]	; (8004968 <HAL_RCC_OscConfig+0x4f4>)
 80047d8:	6a1b      	ldr	r3, [r3, #32]
 80047da:	4a63      	ldr	r2, [pc, #396]	; (8004968 <HAL_RCC_OscConfig+0x4f4>)
 80047dc:	f023 0304 	bic.w	r3, r3, #4
 80047e0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	68db      	ldr	r3, [r3, #12]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d015      	beq.n	8004816 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80047ea:	f7fd fd83 	bl	80022f4 <HAL_GetTick>
 80047ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047f0:	e00a      	b.n	8004808 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047f2:	f7fd fd7f 	bl	80022f4 <HAL_GetTick>
 80047f6:	4602      	mov	r2, r0
 80047f8:	693b      	ldr	r3, [r7, #16]
 80047fa:	1ad3      	subs	r3, r2, r3
 80047fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8004800:	4293      	cmp	r3, r2
 8004802:	d901      	bls.n	8004808 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004804:	2303      	movs	r3, #3
 8004806:	e0ab      	b.n	8004960 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004808:	4b57      	ldr	r3, [pc, #348]	; (8004968 <HAL_RCC_OscConfig+0x4f4>)
 800480a:	6a1b      	ldr	r3, [r3, #32]
 800480c:	f003 0302 	and.w	r3, r3, #2
 8004810:	2b00      	cmp	r3, #0
 8004812:	d0ee      	beq.n	80047f2 <HAL_RCC_OscConfig+0x37e>
 8004814:	e014      	b.n	8004840 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004816:	f7fd fd6d 	bl	80022f4 <HAL_GetTick>
 800481a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800481c:	e00a      	b.n	8004834 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800481e:	f7fd fd69 	bl	80022f4 <HAL_GetTick>
 8004822:	4602      	mov	r2, r0
 8004824:	693b      	ldr	r3, [r7, #16]
 8004826:	1ad3      	subs	r3, r2, r3
 8004828:	f241 3288 	movw	r2, #5000	; 0x1388
 800482c:	4293      	cmp	r3, r2
 800482e:	d901      	bls.n	8004834 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004830:	2303      	movs	r3, #3
 8004832:	e095      	b.n	8004960 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004834:	4b4c      	ldr	r3, [pc, #304]	; (8004968 <HAL_RCC_OscConfig+0x4f4>)
 8004836:	6a1b      	ldr	r3, [r3, #32]
 8004838:	f003 0302 	and.w	r3, r3, #2
 800483c:	2b00      	cmp	r3, #0
 800483e:	d1ee      	bne.n	800481e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004840:	7dfb      	ldrb	r3, [r7, #23]
 8004842:	2b01      	cmp	r3, #1
 8004844:	d105      	bne.n	8004852 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004846:	4b48      	ldr	r3, [pc, #288]	; (8004968 <HAL_RCC_OscConfig+0x4f4>)
 8004848:	69db      	ldr	r3, [r3, #28]
 800484a:	4a47      	ldr	r2, [pc, #284]	; (8004968 <HAL_RCC_OscConfig+0x4f4>)
 800484c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004850:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	69db      	ldr	r3, [r3, #28]
 8004856:	2b00      	cmp	r3, #0
 8004858:	f000 8081 	beq.w	800495e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800485c:	4b42      	ldr	r3, [pc, #264]	; (8004968 <HAL_RCC_OscConfig+0x4f4>)
 800485e:	685b      	ldr	r3, [r3, #4]
 8004860:	f003 030c 	and.w	r3, r3, #12
 8004864:	2b08      	cmp	r3, #8
 8004866:	d061      	beq.n	800492c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	69db      	ldr	r3, [r3, #28]
 800486c:	2b02      	cmp	r3, #2
 800486e:	d146      	bne.n	80048fe <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004870:	4b3f      	ldr	r3, [pc, #252]	; (8004970 <HAL_RCC_OscConfig+0x4fc>)
 8004872:	2200      	movs	r2, #0
 8004874:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004876:	f7fd fd3d 	bl	80022f4 <HAL_GetTick>
 800487a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800487c:	e008      	b.n	8004890 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800487e:	f7fd fd39 	bl	80022f4 <HAL_GetTick>
 8004882:	4602      	mov	r2, r0
 8004884:	693b      	ldr	r3, [r7, #16]
 8004886:	1ad3      	subs	r3, r2, r3
 8004888:	2b02      	cmp	r3, #2
 800488a:	d901      	bls.n	8004890 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800488c:	2303      	movs	r3, #3
 800488e:	e067      	b.n	8004960 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004890:	4b35      	ldr	r3, [pc, #212]	; (8004968 <HAL_RCC_OscConfig+0x4f4>)
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004898:	2b00      	cmp	r3, #0
 800489a:	d1f0      	bne.n	800487e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6a1b      	ldr	r3, [r3, #32]
 80048a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048a4:	d108      	bne.n	80048b8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80048a6:	4b30      	ldr	r3, [pc, #192]	; (8004968 <HAL_RCC_OscConfig+0x4f4>)
 80048a8:	685b      	ldr	r3, [r3, #4]
 80048aa:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	689b      	ldr	r3, [r3, #8]
 80048b2:	492d      	ldr	r1, [pc, #180]	; (8004968 <HAL_RCC_OscConfig+0x4f4>)
 80048b4:	4313      	orrs	r3, r2
 80048b6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80048b8:	4b2b      	ldr	r3, [pc, #172]	; (8004968 <HAL_RCC_OscConfig+0x4f4>)
 80048ba:	685b      	ldr	r3, [r3, #4]
 80048bc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	6a19      	ldr	r1, [r3, #32]
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048c8:	430b      	orrs	r3, r1
 80048ca:	4927      	ldr	r1, [pc, #156]	; (8004968 <HAL_RCC_OscConfig+0x4f4>)
 80048cc:	4313      	orrs	r3, r2
 80048ce:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80048d0:	4b27      	ldr	r3, [pc, #156]	; (8004970 <HAL_RCC_OscConfig+0x4fc>)
 80048d2:	2201      	movs	r2, #1
 80048d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048d6:	f7fd fd0d 	bl	80022f4 <HAL_GetTick>
 80048da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80048dc:	e008      	b.n	80048f0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048de:	f7fd fd09 	bl	80022f4 <HAL_GetTick>
 80048e2:	4602      	mov	r2, r0
 80048e4:	693b      	ldr	r3, [r7, #16]
 80048e6:	1ad3      	subs	r3, r2, r3
 80048e8:	2b02      	cmp	r3, #2
 80048ea:	d901      	bls.n	80048f0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80048ec:	2303      	movs	r3, #3
 80048ee:	e037      	b.n	8004960 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80048f0:	4b1d      	ldr	r3, [pc, #116]	; (8004968 <HAL_RCC_OscConfig+0x4f4>)
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d0f0      	beq.n	80048de <HAL_RCC_OscConfig+0x46a>
 80048fc:	e02f      	b.n	800495e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048fe:	4b1c      	ldr	r3, [pc, #112]	; (8004970 <HAL_RCC_OscConfig+0x4fc>)
 8004900:	2200      	movs	r2, #0
 8004902:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004904:	f7fd fcf6 	bl	80022f4 <HAL_GetTick>
 8004908:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800490a:	e008      	b.n	800491e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800490c:	f7fd fcf2 	bl	80022f4 <HAL_GetTick>
 8004910:	4602      	mov	r2, r0
 8004912:	693b      	ldr	r3, [r7, #16]
 8004914:	1ad3      	subs	r3, r2, r3
 8004916:	2b02      	cmp	r3, #2
 8004918:	d901      	bls.n	800491e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800491a:	2303      	movs	r3, #3
 800491c:	e020      	b.n	8004960 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800491e:	4b12      	ldr	r3, [pc, #72]	; (8004968 <HAL_RCC_OscConfig+0x4f4>)
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004926:	2b00      	cmp	r3, #0
 8004928:	d1f0      	bne.n	800490c <HAL_RCC_OscConfig+0x498>
 800492a:	e018      	b.n	800495e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	69db      	ldr	r3, [r3, #28]
 8004930:	2b01      	cmp	r3, #1
 8004932:	d101      	bne.n	8004938 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8004934:	2301      	movs	r3, #1
 8004936:	e013      	b.n	8004960 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004938:	4b0b      	ldr	r3, [pc, #44]	; (8004968 <HAL_RCC_OscConfig+0x4f4>)
 800493a:	685b      	ldr	r3, [r3, #4]
 800493c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6a1b      	ldr	r3, [r3, #32]
 8004948:	429a      	cmp	r2, r3
 800494a:	d106      	bne.n	800495a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004956:	429a      	cmp	r2, r3
 8004958:	d001      	beq.n	800495e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800495a:	2301      	movs	r3, #1
 800495c:	e000      	b.n	8004960 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800495e:	2300      	movs	r3, #0
}
 8004960:	4618      	mov	r0, r3
 8004962:	3718      	adds	r7, #24
 8004964:	46bd      	mov	sp, r7
 8004966:	bd80      	pop	{r7, pc}
 8004968:	40021000 	.word	0x40021000
 800496c:	40007000 	.word	0x40007000
 8004970:	42420060 	.word	0x42420060

08004974 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004974:	b580      	push	{r7, lr}
 8004976:	b084      	sub	sp, #16
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
 800497c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2b00      	cmp	r3, #0
 8004982:	d101      	bne.n	8004988 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004984:	2301      	movs	r3, #1
 8004986:	e0d0      	b.n	8004b2a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004988:	4b6a      	ldr	r3, [pc, #424]	; (8004b34 <HAL_RCC_ClockConfig+0x1c0>)
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f003 0307 	and.w	r3, r3, #7
 8004990:	683a      	ldr	r2, [r7, #0]
 8004992:	429a      	cmp	r2, r3
 8004994:	d910      	bls.n	80049b8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004996:	4b67      	ldr	r3, [pc, #412]	; (8004b34 <HAL_RCC_ClockConfig+0x1c0>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f023 0207 	bic.w	r2, r3, #7
 800499e:	4965      	ldr	r1, [pc, #404]	; (8004b34 <HAL_RCC_ClockConfig+0x1c0>)
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	4313      	orrs	r3, r2
 80049a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80049a6:	4b63      	ldr	r3, [pc, #396]	; (8004b34 <HAL_RCC_ClockConfig+0x1c0>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f003 0307 	and.w	r3, r3, #7
 80049ae:	683a      	ldr	r2, [r7, #0]
 80049b0:	429a      	cmp	r2, r3
 80049b2:	d001      	beq.n	80049b8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80049b4:	2301      	movs	r3, #1
 80049b6:	e0b8      	b.n	8004b2a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f003 0302 	and.w	r3, r3, #2
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d020      	beq.n	8004a06 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f003 0304 	and.w	r3, r3, #4
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d005      	beq.n	80049dc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80049d0:	4b59      	ldr	r3, [pc, #356]	; (8004b38 <HAL_RCC_ClockConfig+0x1c4>)
 80049d2:	685b      	ldr	r3, [r3, #4]
 80049d4:	4a58      	ldr	r2, [pc, #352]	; (8004b38 <HAL_RCC_ClockConfig+0x1c4>)
 80049d6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80049da:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f003 0308 	and.w	r3, r3, #8
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d005      	beq.n	80049f4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80049e8:	4b53      	ldr	r3, [pc, #332]	; (8004b38 <HAL_RCC_ClockConfig+0x1c4>)
 80049ea:	685b      	ldr	r3, [r3, #4]
 80049ec:	4a52      	ldr	r2, [pc, #328]	; (8004b38 <HAL_RCC_ClockConfig+0x1c4>)
 80049ee:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80049f2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80049f4:	4b50      	ldr	r3, [pc, #320]	; (8004b38 <HAL_RCC_ClockConfig+0x1c4>)
 80049f6:	685b      	ldr	r3, [r3, #4]
 80049f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	689b      	ldr	r3, [r3, #8]
 8004a00:	494d      	ldr	r1, [pc, #308]	; (8004b38 <HAL_RCC_ClockConfig+0x1c4>)
 8004a02:	4313      	orrs	r3, r2
 8004a04:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f003 0301 	and.w	r3, r3, #1
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d040      	beq.n	8004a94 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	685b      	ldr	r3, [r3, #4]
 8004a16:	2b01      	cmp	r3, #1
 8004a18:	d107      	bne.n	8004a2a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a1a:	4b47      	ldr	r3, [pc, #284]	; (8004b38 <HAL_RCC_ClockConfig+0x1c4>)
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d115      	bne.n	8004a52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a26:	2301      	movs	r3, #1
 8004a28:	e07f      	b.n	8004b2a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	685b      	ldr	r3, [r3, #4]
 8004a2e:	2b02      	cmp	r3, #2
 8004a30:	d107      	bne.n	8004a42 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a32:	4b41      	ldr	r3, [pc, #260]	; (8004b38 <HAL_RCC_ClockConfig+0x1c4>)
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d109      	bne.n	8004a52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a3e:	2301      	movs	r3, #1
 8004a40:	e073      	b.n	8004b2a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a42:	4b3d      	ldr	r3, [pc, #244]	; (8004b38 <HAL_RCC_ClockConfig+0x1c4>)
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f003 0302 	and.w	r3, r3, #2
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d101      	bne.n	8004a52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a4e:	2301      	movs	r3, #1
 8004a50:	e06b      	b.n	8004b2a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004a52:	4b39      	ldr	r3, [pc, #228]	; (8004b38 <HAL_RCC_ClockConfig+0x1c4>)
 8004a54:	685b      	ldr	r3, [r3, #4]
 8004a56:	f023 0203 	bic.w	r2, r3, #3
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	685b      	ldr	r3, [r3, #4]
 8004a5e:	4936      	ldr	r1, [pc, #216]	; (8004b38 <HAL_RCC_ClockConfig+0x1c4>)
 8004a60:	4313      	orrs	r3, r2
 8004a62:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004a64:	f7fd fc46 	bl	80022f4 <HAL_GetTick>
 8004a68:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a6a:	e00a      	b.n	8004a82 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a6c:	f7fd fc42 	bl	80022f4 <HAL_GetTick>
 8004a70:	4602      	mov	r2, r0
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	1ad3      	subs	r3, r2, r3
 8004a76:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a7a:	4293      	cmp	r3, r2
 8004a7c:	d901      	bls.n	8004a82 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004a7e:	2303      	movs	r3, #3
 8004a80:	e053      	b.n	8004b2a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a82:	4b2d      	ldr	r3, [pc, #180]	; (8004b38 <HAL_RCC_ClockConfig+0x1c4>)
 8004a84:	685b      	ldr	r3, [r3, #4]
 8004a86:	f003 020c 	and.w	r2, r3, #12
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	685b      	ldr	r3, [r3, #4]
 8004a8e:	009b      	lsls	r3, r3, #2
 8004a90:	429a      	cmp	r2, r3
 8004a92:	d1eb      	bne.n	8004a6c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004a94:	4b27      	ldr	r3, [pc, #156]	; (8004b34 <HAL_RCC_ClockConfig+0x1c0>)
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f003 0307 	and.w	r3, r3, #7
 8004a9c:	683a      	ldr	r2, [r7, #0]
 8004a9e:	429a      	cmp	r2, r3
 8004aa0:	d210      	bcs.n	8004ac4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004aa2:	4b24      	ldr	r3, [pc, #144]	; (8004b34 <HAL_RCC_ClockConfig+0x1c0>)
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f023 0207 	bic.w	r2, r3, #7
 8004aaa:	4922      	ldr	r1, [pc, #136]	; (8004b34 <HAL_RCC_ClockConfig+0x1c0>)
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	4313      	orrs	r3, r2
 8004ab0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ab2:	4b20      	ldr	r3, [pc, #128]	; (8004b34 <HAL_RCC_ClockConfig+0x1c0>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f003 0307 	and.w	r3, r3, #7
 8004aba:	683a      	ldr	r2, [r7, #0]
 8004abc:	429a      	cmp	r2, r3
 8004abe:	d001      	beq.n	8004ac4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004ac0:	2301      	movs	r3, #1
 8004ac2:	e032      	b.n	8004b2a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f003 0304 	and.w	r3, r3, #4
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d008      	beq.n	8004ae2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ad0:	4b19      	ldr	r3, [pc, #100]	; (8004b38 <HAL_RCC_ClockConfig+0x1c4>)
 8004ad2:	685b      	ldr	r3, [r3, #4]
 8004ad4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	68db      	ldr	r3, [r3, #12]
 8004adc:	4916      	ldr	r1, [pc, #88]	; (8004b38 <HAL_RCC_ClockConfig+0x1c4>)
 8004ade:	4313      	orrs	r3, r2
 8004ae0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f003 0308 	and.w	r3, r3, #8
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d009      	beq.n	8004b02 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004aee:	4b12      	ldr	r3, [pc, #72]	; (8004b38 <HAL_RCC_ClockConfig+0x1c4>)
 8004af0:	685b      	ldr	r3, [r3, #4]
 8004af2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	691b      	ldr	r3, [r3, #16]
 8004afa:	00db      	lsls	r3, r3, #3
 8004afc:	490e      	ldr	r1, [pc, #56]	; (8004b38 <HAL_RCC_ClockConfig+0x1c4>)
 8004afe:	4313      	orrs	r3, r2
 8004b00:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004b02:	f000 f821 	bl	8004b48 <HAL_RCC_GetSysClockFreq>
 8004b06:	4601      	mov	r1, r0
 8004b08:	4b0b      	ldr	r3, [pc, #44]	; (8004b38 <HAL_RCC_ClockConfig+0x1c4>)
 8004b0a:	685b      	ldr	r3, [r3, #4]
 8004b0c:	091b      	lsrs	r3, r3, #4
 8004b0e:	f003 030f 	and.w	r3, r3, #15
 8004b12:	4a0a      	ldr	r2, [pc, #40]	; (8004b3c <HAL_RCC_ClockConfig+0x1c8>)
 8004b14:	5cd3      	ldrb	r3, [r2, r3]
 8004b16:	fa21 f303 	lsr.w	r3, r1, r3
 8004b1a:	4a09      	ldr	r2, [pc, #36]	; (8004b40 <HAL_RCC_ClockConfig+0x1cc>)
 8004b1c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004b1e:	4b09      	ldr	r3, [pc, #36]	; (8004b44 <HAL_RCC_ClockConfig+0x1d0>)
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	4618      	mov	r0, r3
 8004b24:	f7fd fba4 	bl	8002270 <HAL_InitTick>

  return HAL_OK;
 8004b28:	2300      	movs	r3, #0
}
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	3710      	adds	r7, #16
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	bd80      	pop	{r7, pc}
 8004b32:	bf00      	nop
 8004b34:	40022000 	.word	0x40022000
 8004b38:	40021000 	.word	0x40021000
 8004b3c:	080083fc 	.word	0x080083fc
 8004b40:	20000004 	.word	0x20000004
 8004b44:	20000008 	.word	0x20000008

08004b48 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b48:	b490      	push	{r4, r7}
 8004b4a:	b08a      	sub	sp, #40	; 0x28
 8004b4c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004b4e:	4b2a      	ldr	r3, [pc, #168]	; (8004bf8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004b50:	1d3c      	adds	r4, r7, #4
 8004b52:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004b54:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004b58:	4b28      	ldr	r3, [pc, #160]	; (8004bfc <HAL_RCC_GetSysClockFreq+0xb4>)
 8004b5a:	881b      	ldrh	r3, [r3, #0]
 8004b5c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004b5e:	2300      	movs	r3, #0
 8004b60:	61fb      	str	r3, [r7, #28]
 8004b62:	2300      	movs	r3, #0
 8004b64:	61bb      	str	r3, [r7, #24]
 8004b66:	2300      	movs	r3, #0
 8004b68:	627b      	str	r3, [r7, #36]	; 0x24
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004b6e:	2300      	movs	r3, #0
 8004b70:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004b72:	4b23      	ldr	r3, [pc, #140]	; (8004c00 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004b74:	685b      	ldr	r3, [r3, #4]
 8004b76:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004b78:	69fb      	ldr	r3, [r7, #28]
 8004b7a:	f003 030c 	and.w	r3, r3, #12
 8004b7e:	2b04      	cmp	r3, #4
 8004b80:	d002      	beq.n	8004b88 <HAL_RCC_GetSysClockFreq+0x40>
 8004b82:	2b08      	cmp	r3, #8
 8004b84:	d003      	beq.n	8004b8e <HAL_RCC_GetSysClockFreq+0x46>
 8004b86:	e02d      	b.n	8004be4 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004b88:	4b1e      	ldr	r3, [pc, #120]	; (8004c04 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004b8a:	623b      	str	r3, [r7, #32]
      break;
 8004b8c:	e02d      	b.n	8004bea <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004b8e:	69fb      	ldr	r3, [r7, #28]
 8004b90:	0c9b      	lsrs	r3, r3, #18
 8004b92:	f003 030f 	and.w	r3, r3, #15
 8004b96:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004b9a:	4413      	add	r3, r2
 8004b9c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004ba0:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004ba2:	69fb      	ldr	r3, [r7, #28]
 8004ba4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d013      	beq.n	8004bd4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004bac:	4b14      	ldr	r3, [pc, #80]	; (8004c00 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004bae:	685b      	ldr	r3, [r3, #4]
 8004bb0:	0c5b      	lsrs	r3, r3, #17
 8004bb2:	f003 0301 	and.w	r3, r3, #1
 8004bb6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004bba:	4413      	add	r3, r2
 8004bbc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004bc0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004bc2:	697b      	ldr	r3, [r7, #20]
 8004bc4:	4a0f      	ldr	r2, [pc, #60]	; (8004c04 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004bc6:	fb02 f203 	mul.w	r2, r2, r3
 8004bca:	69bb      	ldr	r3, [r7, #24]
 8004bcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bd0:	627b      	str	r3, [r7, #36]	; 0x24
 8004bd2:	e004      	b.n	8004bde <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004bd4:	697b      	ldr	r3, [r7, #20]
 8004bd6:	4a0c      	ldr	r2, [pc, #48]	; (8004c08 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004bd8:	fb02 f303 	mul.w	r3, r2, r3
 8004bdc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8004bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004be0:	623b      	str	r3, [r7, #32]
      break;
 8004be2:	e002      	b.n	8004bea <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004be4:	4b07      	ldr	r3, [pc, #28]	; (8004c04 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004be6:	623b      	str	r3, [r7, #32]
      break;
 8004be8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004bea:	6a3b      	ldr	r3, [r7, #32]
}
 8004bec:	4618      	mov	r0, r3
 8004bee:	3728      	adds	r7, #40	; 0x28
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	bc90      	pop	{r4, r7}
 8004bf4:	4770      	bx	lr
 8004bf6:	bf00      	nop
 8004bf8:	080083d4 	.word	0x080083d4
 8004bfc:	080083e4 	.word	0x080083e4
 8004c00:	40021000 	.word	0x40021000
 8004c04:	007a1200 	.word	0x007a1200
 8004c08:	003d0900 	.word	0x003d0900

08004c0c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c0c:	b480      	push	{r7}
 8004c0e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004c10:	4b02      	ldr	r3, [pc, #8]	; (8004c1c <HAL_RCC_GetHCLKFreq+0x10>)
 8004c12:	681b      	ldr	r3, [r3, #0]
}
 8004c14:	4618      	mov	r0, r3
 8004c16:	46bd      	mov	sp, r7
 8004c18:	bc80      	pop	{r7}
 8004c1a:	4770      	bx	lr
 8004c1c:	20000004 	.word	0x20000004

08004c20 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c20:	b580      	push	{r7, lr}
 8004c22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004c24:	f7ff fff2 	bl	8004c0c <HAL_RCC_GetHCLKFreq>
 8004c28:	4601      	mov	r1, r0
 8004c2a:	4b05      	ldr	r3, [pc, #20]	; (8004c40 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004c2c:	685b      	ldr	r3, [r3, #4]
 8004c2e:	0a1b      	lsrs	r3, r3, #8
 8004c30:	f003 0307 	and.w	r3, r3, #7
 8004c34:	4a03      	ldr	r2, [pc, #12]	; (8004c44 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004c36:	5cd3      	ldrb	r3, [r2, r3]
 8004c38:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	bd80      	pop	{r7, pc}
 8004c40:	40021000 	.word	0x40021000
 8004c44:	0800840c 	.word	0x0800840c

08004c48 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004c4c:	f7ff ffde 	bl	8004c0c <HAL_RCC_GetHCLKFreq>
 8004c50:	4601      	mov	r1, r0
 8004c52:	4b05      	ldr	r3, [pc, #20]	; (8004c68 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004c54:	685b      	ldr	r3, [r3, #4]
 8004c56:	0adb      	lsrs	r3, r3, #11
 8004c58:	f003 0307 	and.w	r3, r3, #7
 8004c5c:	4a03      	ldr	r2, [pc, #12]	; (8004c6c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004c5e:	5cd3      	ldrb	r3, [r2, r3]
 8004c60:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004c64:	4618      	mov	r0, r3
 8004c66:	bd80      	pop	{r7, pc}
 8004c68:	40021000 	.word	0x40021000
 8004c6c:	0800840c 	.word	0x0800840c

08004c70 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004c70:	b480      	push	{r7}
 8004c72:	b085      	sub	sp, #20
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004c78:	4b0a      	ldr	r3, [pc, #40]	; (8004ca4 <RCC_Delay+0x34>)
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	4a0a      	ldr	r2, [pc, #40]	; (8004ca8 <RCC_Delay+0x38>)
 8004c7e:	fba2 2303 	umull	r2, r3, r2, r3
 8004c82:	0a5b      	lsrs	r3, r3, #9
 8004c84:	687a      	ldr	r2, [r7, #4]
 8004c86:	fb02 f303 	mul.w	r3, r2, r3
 8004c8a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004c8c:	bf00      	nop
  }
  while (Delay --);
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	1e5a      	subs	r2, r3, #1
 8004c92:	60fa      	str	r2, [r7, #12]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d1f9      	bne.n	8004c8c <RCC_Delay+0x1c>
}
 8004c98:	bf00      	nop
 8004c9a:	3714      	adds	r7, #20
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	bc80      	pop	{r7}
 8004ca0:	4770      	bx	lr
 8004ca2:	bf00      	nop
 8004ca4:	20000004 	.word	0x20000004
 8004ca8:	10624dd3 	.word	0x10624dd3

08004cac <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b086      	sub	sp, #24
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	613b      	str	r3, [r7, #16]
 8004cb8:	2300      	movs	r3, #0
 8004cba:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f003 0301 	and.w	r3, r3, #1
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d07d      	beq.n	8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8004cc8:	2300      	movs	r3, #0
 8004cca:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004ccc:	4b4f      	ldr	r3, [pc, #316]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004cce:	69db      	ldr	r3, [r3, #28]
 8004cd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d10d      	bne.n	8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004cd8:	4b4c      	ldr	r3, [pc, #304]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004cda:	69db      	ldr	r3, [r3, #28]
 8004cdc:	4a4b      	ldr	r2, [pc, #300]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004cde:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ce2:	61d3      	str	r3, [r2, #28]
 8004ce4:	4b49      	ldr	r3, [pc, #292]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ce6:	69db      	ldr	r3, [r3, #28]
 8004ce8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cec:	60bb      	str	r3, [r7, #8]
 8004cee:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004cf0:	2301      	movs	r3, #1
 8004cf2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cf4:	4b46      	ldr	r3, [pc, #280]	; (8004e10 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d118      	bne.n	8004d32 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004d00:	4b43      	ldr	r3, [pc, #268]	; (8004e10 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	4a42      	ldr	r2, [pc, #264]	; (8004e10 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004d06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d0a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d0c:	f7fd faf2 	bl	80022f4 <HAL_GetTick>
 8004d10:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d12:	e008      	b.n	8004d26 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d14:	f7fd faee 	bl	80022f4 <HAL_GetTick>
 8004d18:	4602      	mov	r2, r0
 8004d1a:	693b      	ldr	r3, [r7, #16]
 8004d1c:	1ad3      	subs	r3, r2, r3
 8004d1e:	2b64      	cmp	r3, #100	; 0x64
 8004d20:	d901      	bls.n	8004d26 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004d22:	2303      	movs	r3, #3
 8004d24:	e06d      	b.n	8004e02 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d26:	4b3a      	ldr	r3, [pc, #232]	; (8004e10 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d0f0      	beq.n	8004d14 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004d32:	4b36      	ldr	r3, [pc, #216]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d34:	6a1b      	ldr	r3, [r3, #32]
 8004d36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d3a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d02e      	beq.n	8004da0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	685b      	ldr	r3, [r3, #4]
 8004d46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d4a:	68fa      	ldr	r2, [r7, #12]
 8004d4c:	429a      	cmp	r2, r3
 8004d4e:	d027      	beq.n	8004da0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004d50:	4b2e      	ldr	r3, [pc, #184]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d52:	6a1b      	ldr	r3, [r3, #32]
 8004d54:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d58:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004d5a:	4b2e      	ldr	r3, [pc, #184]	; (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004d5c:	2201      	movs	r2, #1
 8004d5e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004d60:	4b2c      	ldr	r3, [pc, #176]	; (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004d62:	2200      	movs	r2, #0
 8004d64:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004d66:	4a29      	ldr	r2, [pc, #164]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	f003 0301 	and.w	r3, r3, #1
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d014      	beq.n	8004da0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d76:	f7fd fabd 	bl	80022f4 <HAL_GetTick>
 8004d7a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d7c:	e00a      	b.n	8004d94 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d7e:	f7fd fab9 	bl	80022f4 <HAL_GetTick>
 8004d82:	4602      	mov	r2, r0
 8004d84:	693b      	ldr	r3, [r7, #16]
 8004d86:	1ad3      	subs	r3, r2, r3
 8004d88:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d901      	bls.n	8004d94 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004d90:	2303      	movs	r3, #3
 8004d92:	e036      	b.n	8004e02 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d94:	4b1d      	ldr	r3, [pc, #116]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d96:	6a1b      	ldr	r3, [r3, #32]
 8004d98:	f003 0302 	and.w	r3, r3, #2
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d0ee      	beq.n	8004d7e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004da0:	4b1a      	ldr	r3, [pc, #104]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004da2:	6a1b      	ldr	r3, [r3, #32]
 8004da4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	685b      	ldr	r3, [r3, #4]
 8004dac:	4917      	ldr	r1, [pc, #92]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004dae:	4313      	orrs	r3, r2
 8004db0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004db2:	7dfb      	ldrb	r3, [r7, #23]
 8004db4:	2b01      	cmp	r3, #1
 8004db6:	d105      	bne.n	8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004db8:	4b14      	ldr	r3, [pc, #80]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004dba:	69db      	ldr	r3, [r3, #28]
 8004dbc:	4a13      	ldr	r2, [pc, #76]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004dbe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004dc2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f003 0302 	and.w	r3, r3, #2
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d008      	beq.n	8004de2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004dd0:	4b0e      	ldr	r3, [pc, #56]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004dd2:	685b      	ldr	r3, [r3, #4]
 8004dd4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	689b      	ldr	r3, [r3, #8]
 8004ddc:	490b      	ldr	r1, [pc, #44]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004dde:	4313      	orrs	r3, r2
 8004de0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f003 0310 	and.w	r3, r3, #16
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d008      	beq.n	8004e00 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004dee:	4b07      	ldr	r3, [pc, #28]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004df0:	685b      	ldr	r3, [r3, #4]
 8004df2:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	68db      	ldr	r3, [r3, #12]
 8004dfa:	4904      	ldr	r1, [pc, #16]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004dfc:	4313      	orrs	r3, r2
 8004dfe:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004e00:	2300      	movs	r3, #0
}
 8004e02:	4618      	mov	r0, r3
 8004e04:	3718      	adds	r7, #24
 8004e06:	46bd      	mov	sp, r7
 8004e08:	bd80      	pop	{r7, pc}
 8004e0a:	bf00      	nop
 8004e0c:	40021000 	.word	0x40021000
 8004e10:	40007000 	.word	0x40007000
 8004e14:	42420440 	.word	0x42420440

08004e18 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004e18:	b590      	push	{r4, r7, lr}
 8004e1a:	b08d      	sub	sp, #52	; 0x34
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004e20:	4b55      	ldr	r3, [pc, #340]	; (8004f78 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8004e22:	f107 040c 	add.w	r4, r7, #12
 8004e26:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004e28:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004e2c:	4b53      	ldr	r3, [pc, #332]	; (8004f7c <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8004e2e:	881b      	ldrh	r3, [r3, #0]
 8004e30:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8004e32:	2300      	movs	r3, #0
 8004e34:	627b      	str	r3, [r7, #36]	; 0x24
 8004e36:	2300      	movs	r3, #0
 8004e38:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8004e3e:	2300      	movs	r3, #0
 8004e40:	61fb      	str	r3, [r7, #28]
 8004e42:	2300      	movs	r3, #0
 8004e44:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2b02      	cmp	r3, #2
 8004e4a:	d07f      	beq.n	8004f4c <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8004e4c:	2b10      	cmp	r3, #16
 8004e4e:	d002      	beq.n	8004e56 <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
 8004e50:	2b01      	cmp	r3, #1
 8004e52:	d048      	beq.n	8004ee6 <HAL_RCCEx_GetPeriphCLKFreq+0xce>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8004e54:	e08b      	b.n	8004f6e <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      temp_reg = RCC->CFGR;
 8004e56:	4b4a      	ldr	r3, [pc, #296]	; (8004f80 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8004e58:	685b      	ldr	r3, [r3, #4]
 8004e5a:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8004e5c:	4b48      	ldr	r3, [pc, #288]	; (8004f80 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d07f      	beq.n	8004f68 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004e68:	69fb      	ldr	r3, [r7, #28]
 8004e6a:	0c9b      	lsrs	r3, r3, #18
 8004e6c:	f003 030f 	and.w	r3, r3, #15
 8004e70:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8004e74:	4413      	add	r3, r2
 8004e76:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004e7a:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004e7c:	69fb      	ldr	r3, [r7, #28]
 8004e7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d018      	beq.n	8004eb8 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004e86:	4b3e      	ldr	r3, [pc, #248]	; (8004f80 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8004e88:	685b      	ldr	r3, [r3, #4]
 8004e8a:	0c5b      	lsrs	r3, r3, #17
 8004e8c:	f003 0301 	and.w	r3, r3, #1
 8004e90:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8004e94:	4413      	add	r3, r2
 8004e96:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004e9a:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004e9c:	69fb      	ldr	r3, [r7, #28]
 8004e9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d00d      	beq.n	8004ec2 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8004ea6:	4a37      	ldr	r2, [pc, #220]	; (8004f84 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 8004ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eaa:	fbb2 f2f3 	udiv	r2, r2, r3
 8004eae:	6a3b      	ldr	r3, [r7, #32]
 8004eb0:	fb02 f303 	mul.w	r3, r2, r3
 8004eb4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004eb6:	e004      	b.n	8004ec2 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004eb8:	6a3b      	ldr	r3, [r7, #32]
 8004eba:	4a33      	ldr	r2, [pc, #204]	; (8004f88 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8004ebc:	fb02 f303 	mul.w	r3, r2, r3
 8004ec0:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8004ec2:	4b2f      	ldr	r3, [pc, #188]	; (8004f80 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8004ec4:	685b      	ldr	r3, [r3, #4]
 8004ec6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004eca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004ece:	d102      	bne.n	8004ed6 <HAL_RCCEx_GetPeriphCLKFreq+0xbe>
          frequency = pllclk;
 8004ed0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ed2:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8004ed4:	e048      	b.n	8004f68 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
          frequency = (pllclk * 2) / 3;
 8004ed6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ed8:	005b      	lsls	r3, r3, #1
 8004eda:	4a2c      	ldr	r2, [pc, #176]	; (8004f8c <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8004edc:	fba2 2303 	umull	r2, r3, r2, r3
 8004ee0:	085b      	lsrs	r3, r3, #1
 8004ee2:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8004ee4:	e040      	b.n	8004f68 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
      temp_reg = RCC->BDCR;
 8004ee6:	4b26      	ldr	r3, [pc, #152]	; (8004f80 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8004ee8:	6a1b      	ldr	r3, [r3, #32]
 8004eea:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8004eec:	69fb      	ldr	r3, [r7, #28]
 8004eee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ef2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ef6:	d108      	bne.n	8004f0a <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 8004ef8:	69fb      	ldr	r3, [r7, #28]
 8004efa:	f003 0302 	and.w	r3, r3, #2
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d003      	beq.n	8004f0a <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
        frequency = LSE_VALUE;
 8004f02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004f06:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f08:	e01f      	b.n	8004f4a <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8004f0a:	69fb      	ldr	r3, [r7, #28]
 8004f0c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f14:	d109      	bne.n	8004f2a <HAL_RCCEx_GetPeriphCLKFreq+0x112>
 8004f16:	4b1a      	ldr	r3, [pc, #104]	; (8004f80 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8004f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f1a:	f003 0302 	and.w	r3, r3, #2
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d003      	beq.n	8004f2a <HAL_RCCEx_GetPeriphCLKFreq+0x112>
        frequency = LSI_VALUE;
 8004f22:	f649 4340 	movw	r3, #40000	; 0x9c40
 8004f26:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f28:	e00f      	b.n	8004f4a <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8004f2a:	69fb      	ldr	r3, [r7, #28]
 8004f2c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f30:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004f34:	d11a      	bne.n	8004f6c <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8004f36:	4b12      	ldr	r3, [pc, #72]	; (8004f80 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d014      	beq.n	8004f6c <HAL_RCCEx_GetPeriphCLKFreq+0x154>
        frequency = HSE_VALUE / 128U;
 8004f42:	f24f 4324 	movw	r3, #62500	; 0xf424
 8004f46:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8004f48:	e010      	b.n	8004f6c <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8004f4a:	e00f      	b.n	8004f6c <HAL_RCCEx_GetPeriphCLKFreq+0x154>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8004f4c:	f7ff fe7c 	bl	8004c48 <HAL_RCC_GetPCLK2Freq>
 8004f50:	4602      	mov	r2, r0
 8004f52:	4b0b      	ldr	r3, [pc, #44]	; (8004f80 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8004f54:	685b      	ldr	r3, [r3, #4]
 8004f56:	0b9b      	lsrs	r3, r3, #14
 8004f58:	f003 0303 	and.w	r3, r3, #3
 8004f5c:	3301      	adds	r3, #1
 8004f5e:	005b      	lsls	r3, r3, #1
 8004f60:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f64:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8004f66:	e002      	b.n	8004f6e <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 8004f68:	bf00      	nop
 8004f6a:	e000      	b.n	8004f6e <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 8004f6c:	bf00      	nop
    }
  }
  return (frequency);
 8004f6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8004f70:	4618      	mov	r0, r3
 8004f72:	3734      	adds	r7, #52	; 0x34
 8004f74:	46bd      	mov	sp, r7
 8004f76:	bd90      	pop	{r4, r7, pc}
 8004f78:	080083e8 	.word	0x080083e8
 8004f7c:	080083f8 	.word	0x080083f8
 8004f80:	40021000 	.word	0x40021000
 8004f84:	007a1200 	.word	0x007a1200
 8004f88:	003d0900 	.word	0x003d0900
 8004f8c:	aaaaaaab 	.word	0xaaaaaaab

08004f90 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	b082      	sub	sp, #8
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d101      	bne.n	8004fa2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004f9e:	2301      	movs	r3, #1
 8004fa0:	e03f      	b.n	8005022 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004fa8:	b2db      	uxtb	r3, r3
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d106      	bne.n	8004fbc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004fb6:	6878      	ldr	r0, [r7, #4]
 8004fb8:	f7fd f848 	bl	800204c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2224      	movs	r2, #36	; 0x24
 8004fc0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	68da      	ldr	r2, [r3, #12]
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004fd2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004fd4:	6878      	ldr	r0, [r7, #4]
 8004fd6:	f000 f829 	bl	800502c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	691a      	ldr	r2, [r3, #16]
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004fe8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	695a      	ldr	r2, [r3, #20]
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004ff8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	68da      	ldr	r2, [r3, #12]
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005008:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	2200      	movs	r2, #0
 800500e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2220      	movs	r2, #32
 8005014:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2220      	movs	r2, #32
 800501c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8005020:	2300      	movs	r3, #0
}
 8005022:	4618      	mov	r0, r3
 8005024:	3708      	adds	r7, #8
 8005026:	46bd      	mov	sp, r7
 8005028:	bd80      	pop	{r7, pc}
	...

0800502c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800502c:	b580      	push	{r7, lr}
 800502e:	b084      	sub	sp, #16
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	691b      	ldr	r3, [r3, #16]
 800503a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	68da      	ldr	r2, [r3, #12]
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	430a      	orrs	r2, r1
 8005048:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	689a      	ldr	r2, [r3, #8]
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	691b      	ldr	r3, [r3, #16]
 8005052:	431a      	orrs	r2, r3
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	695b      	ldr	r3, [r3, #20]
 8005058:	4313      	orrs	r3, r2
 800505a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	68db      	ldr	r3, [r3, #12]
 8005062:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8005066:	f023 030c 	bic.w	r3, r3, #12
 800506a:	687a      	ldr	r2, [r7, #4]
 800506c:	6812      	ldr	r2, [r2, #0]
 800506e:	68f9      	ldr	r1, [r7, #12]
 8005070:	430b      	orrs	r3, r1
 8005072:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	695b      	ldr	r3, [r3, #20]
 800507a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	699a      	ldr	r2, [r3, #24]
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	430a      	orrs	r2, r1
 8005088:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	4a52      	ldr	r2, [pc, #328]	; (80051d8 <UART_SetConfig+0x1ac>)
 8005090:	4293      	cmp	r3, r2
 8005092:	d14e      	bne.n	8005132 <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005094:	f7ff fdd8 	bl	8004c48 <HAL_RCC_GetPCLK2Freq>
 8005098:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800509a:	68ba      	ldr	r2, [r7, #8]
 800509c:	4613      	mov	r3, r2
 800509e:	009b      	lsls	r3, r3, #2
 80050a0:	4413      	add	r3, r2
 80050a2:	009a      	lsls	r2, r3, #2
 80050a4:	441a      	add	r2, r3
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	685b      	ldr	r3, [r3, #4]
 80050aa:	009b      	lsls	r3, r3, #2
 80050ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80050b0:	4a4a      	ldr	r2, [pc, #296]	; (80051dc <UART_SetConfig+0x1b0>)
 80050b2:	fba2 2303 	umull	r2, r3, r2, r3
 80050b6:	095b      	lsrs	r3, r3, #5
 80050b8:	0119      	lsls	r1, r3, #4
 80050ba:	68ba      	ldr	r2, [r7, #8]
 80050bc:	4613      	mov	r3, r2
 80050be:	009b      	lsls	r3, r3, #2
 80050c0:	4413      	add	r3, r2
 80050c2:	009a      	lsls	r2, r3, #2
 80050c4:	441a      	add	r2, r3
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	685b      	ldr	r3, [r3, #4]
 80050ca:	009b      	lsls	r3, r3, #2
 80050cc:	fbb2 f2f3 	udiv	r2, r2, r3
 80050d0:	4b42      	ldr	r3, [pc, #264]	; (80051dc <UART_SetConfig+0x1b0>)
 80050d2:	fba3 0302 	umull	r0, r3, r3, r2
 80050d6:	095b      	lsrs	r3, r3, #5
 80050d8:	2064      	movs	r0, #100	; 0x64
 80050da:	fb00 f303 	mul.w	r3, r0, r3
 80050de:	1ad3      	subs	r3, r2, r3
 80050e0:	011b      	lsls	r3, r3, #4
 80050e2:	3332      	adds	r3, #50	; 0x32
 80050e4:	4a3d      	ldr	r2, [pc, #244]	; (80051dc <UART_SetConfig+0x1b0>)
 80050e6:	fba2 2303 	umull	r2, r3, r2, r3
 80050ea:	095b      	lsrs	r3, r3, #5
 80050ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80050f0:	4419      	add	r1, r3
 80050f2:	68ba      	ldr	r2, [r7, #8]
 80050f4:	4613      	mov	r3, r2
 80050f6:	009b      	lsls	r3, r3, #2
 80050f8:	4413      	add	r3, r2
 80050fa:	009a      	lsls	r2, r3, #2
 80050fc:	441a      	add	r2, r3
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	685b      	ldr	r3, [r3, #4]
 8005102:	009b      	lsls	r3, r3, #2
 8005104:	fbb2 f2f3 	udiv	r2, r2, r3
 8005108:	4b34      	ldr	r3, [pc, #208]	; (80051dc <UART_SetConfig+0x1b0>)
 800510a:	fba3 0302 	umull	r0, r3, r3, r2
 800510e:	095b      	lsrs	r3, r3, #5
 8005110:	2064      	movs	r0, #100	; 0x64
 8005112:	fb00 f303 	mul.w	r3, r0, r3
 8005116:	1ad3      	subs	r3, r2, r3
 8005118:	011b      	lsls	r3, r3, #4
 800511a:	3332      	adds	r3, #50	; 0x32
 800511c:	4a2f      	ldr	r2, [pc, #188]	; (80051dc <UART_SetConfig+0x1b0>)
 800511e:	fba2 2303 	umull	r2, r3, r2, r3
 8005122:	095b      	lsrs	r3, r3, #5
 8005124:	f003 020f 	and.w	r2, r3, #15
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	440a      	add	r2, r1
 800512e:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8005130:	e04d      	b.n	80051ce <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 8005132:	f7ff fd75 	bl	8004c20 <HAL_RCC_GetPCLK1Freq>
 8005136:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005138:	68ba      	ldr	r2, [r7, #8]
 800513a:	4613      	mov	r3, r2
 800513c:	009b      	lsls	r3, r3, #2
 800513e:	4413      	add	r3, r2
 8005140:	009a      	lsls	r2, r3, #2
 8005142:	441a      	add	r2, r3
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	685b      	ldr	r3, [r3, #4]
 8005148:	009b      	lsls	r3, r3, #2
 800514a:	fbb2 f3f3 	udiv	r3, r2, r3
 800514e:	4a23      	ldr	r2, [pc, #140]	; (80051dc <UART_SetConfig+0x1b0>)
 8005150:	fba2 2303 	umull	r2, r3, r2, r3
 8005154:	095b      	lsrs	r3, r3, #5
 8005156:	0119      	lsls	r1, r3, #4
 8005158:	68ba      	ldr	r2, [r7, #8]
 800515a:	4613      	mov	r3, r2
 800515c:	009b      	lsls	r3, r3, #2
 800515e:	4413      	add	r3, r2
 8005160:	009a      	lsls	r2, r3, #2
 8005162:	441a      	add	r2, r3
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	685b      	ldr	r3, [r3, #4]
 8005168:	009b      	lsls	r3, r3, #2
 800516a:	fbb2 f2f3 	udiv	r2, r2, r3
 800516e:	4b1b      	ldr	r3, [pc, #108]	; (80051dc <UART_SetConfig+0x1b0>)
 8005170:	fba3 0302 	umull	r0, r3, r3, r2
 8005174:	095b      	lsrs	r3, r3, #5
 8005176:	2064      	movs	r0, #100	; 0x64
 8005178:	fb00 f303 	mul.w	r3, r0, r3
 800517c:	1ad3      	subs	r3, r2, r3
 800517e:	011b      	lsls	r3, r3, #4
 8005180:	3332      	adds	r3, #50	; 0x32
 8005182:	4a16      	ldr	r2, [pc, #88]	; (80051dc <UART_SetConfig+0x1b0>)
 8005184:	fba2 2303 	umull	r2, r3, r2, r3
 8005188:	095b      	lsrs	r3, r3, #5
 800518a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800518e:	4419      	add	r1, r3
 8005190:	68ba      	ldr	r2, [r7, #8]
 8005192:	4613      	mov	r3, r2
 8005194:	009b      	lsls	r3, r3, #2
 8005196:	4413      	add	r3, r2
 8005198:	009a      	lsls	r2, r3, #2
 800519a:	441a      	add	r2, r3
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	685b      	ldr	r3, [r3, #4]
 80051a0:	009b      	lsls	r3, r3, #2
 80051a2:	fbb2 f2f3 	udiv	r2, r2, r3
 80051a6:	4b0d      	ldr	r3, [pc, #52]	; (80051dc <UART_SetConfig+0x1b0>)
 80051a8:	fba3 0302 	umull	r0, r3, r3, r2
 80051ac:	095b      	lsrs	r3, r3, #5
 80051ae:	2064      	movs	r0, #100	; 0x64
 80051b0:	fb00 f303 	mul.w	r3, r0, r3
 80051b4:	1ad3      	subs	r3, r2, r3
 80051b6:	011b      	lsls	r3, r3, #4
 80051b8:	3332      	adds	r3, #50	; 0x32
 80051ba:	4a08      	ldr	r2, [pc, #32]	; (80051dc <UART_SetConfig+0x1b0>)
 80051bc:	fba2 2303 	umull	r2, r3, r2, r3
 80051c0:	095b      	lsrs	r3, r3, #5
 80051c2:	f003 020f 	and.w	r2, r3, #15
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	440a      	add	r2, r1
 80051cc:	609a      	str	r2, [r3, #8]
}
 80051ce:	bf00      	nop
 80051d0:	3710      	adds	r7, #16
 80051d2:	46bd      	mov	sp, r7
 80051d4:	bd80      	pop	{r7, pc}
 80051d6:	bf00      	nop
 80051d8:	40013800 	.word	0x40013800
 80051dc:	51eb851f 	.word	0x51eb851f

080051e0 <__errno>:
 80051e0:	4b01      	ldr	r3, [pc, #4]	; (80051e8 <__errno+0x8>)
 80051e2:	6818      	ldr	r0, [r3, #0]
 80051e4:	4770      	bx	lr
 80051e6:	bf00      	nop
 80051e8:	20000010 	.word	0x20000010

080051ec <__libc_init_array>:
 80051ec:	b570      	push	{r4, r5, r6, lr}
 80051ee:	2500      	movs	r5, #0
 80051f0:	4e0c      	ldr	r6, [pc, #48]	; (8005224 <__libc_init_array+0x38>)
 80051f2:	4c0d      	ldr	r4, [pc, #52]	; (8005228 <__libc_init_array+0x3c>)
 80051f4:	1ba4      	subs	r4, r4, r6
 80051f6:	10a4      	asrs	r4, r4, #2
 80051f8:	42a5      	cmp	r5, r4
 80051fa:	d109      	bne.n	8005210 <__libc_init_array+0x24>
 80051fc:	f003 f89c 	bl	8008338 <_init>
 8005200:	2500      	movs	r5, #0
 8005202:	4e0a      	ldr	r6, [pc, #40]	; (800522c <__libc_init_array+0x40>)
 8005204:	4c0a      	ldr	r4, [pc, #40]	; (8005230 <__libc_init_array+0x44>)
 8005206:	1ba4      	subs	r4, r4, r6
 8005208:	10a4      	asrs	r4, r4, #2
 800520a:	42a5      	cmp	r5, r4
 800520c:	d105      	bne.n	800521a <__libc_init_array+0x2e>
 800520e:	bd70      	pop	{r4, r5, r6, pc}
 8005210:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005214:	4798      	blx	r3
 8005216:	3501      	adds	r5, #1
 8005218:	e7ee      	b.n	80051f8 <__libc_init_array+0xc>
 800521a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800521e:	4798      	blx	r3
 8005220:	3501      	adds	r5, #1
 8005222:	e7f2      	b.n	800520a <__libc_init_array+0x1e>
 8005224:	080086b8 	.word	0x080086b8
 8005228:	080086b8 	.word	0x080086b8
 800522c:	080086b8 	.word	0x080086b8
 8005230:	080086bc 	.word	0x080086bc

08005234 <memcpy>:
 8005234:	b510      	push	{r4, lr}
 8005236:	1e43      	subs	r3, r0, #1
 8005238:	440a      	add	r2, r1
 800523a:	4291      	cmp	r1, r2
 800523c:	d100      	bne.n	8005240 <memcpy+0xc>
 800523e:	bd10      	pop	{r4, pc}
 8005240:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005244:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005248:	e7f7      	b.n	800523a <memcpy+0x6>

0800524a <memset>:
 800524a:	4603      	mov	r3, r0
 800524c:	4402      	add	r2, r0
 800524e:	4293      	cmp	r3, r2
 8005250:	d100      	bne.n	8005254 <memset+0xa>
 8005252:	4770      	bx	lr
 8005254:	f803 1b01 	strb.w	r1, [r3], #1
 8005258:	e7f9      	b.n	800524e <memset+0x4>

0800525a <__cvt>:
 800525a:	2b00      	cmp	r3, #0
 800525c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005260:	461e      	mov	r6, r3
 8005262:	bfbb      	ittet	lt
 8005264:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8005268:	461e      	movlt	r6, r3
 800526a:	2300      	movge	r3, #0
 800526c:	232d      	movlt	r3, #45	; 0x2d
 800526e:	b088      	sub	sp, #32
 8005270:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8005272:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 8005276:	f027 0720 	bic.w	r7, r7, #32
 800527a:	2f46      	cmp	r7, #70	; 0x46
 800527c:	4614      	mov	r4, r2
 800527e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8005280:	700b      	strb	r3, [r1, #0]
 8005282:	d004      	beq.n	800528e <__cvt+0x34>
 8005284:	2f45      	cmp	r7, #69	; 0x45
 8005286:	d100      	bne.n	800528a <__cvt+0x30>
 8005288:	3501      	adds	r5, #1
 800528a:	2302      	movs	r3, #2
 800528c:	e000      	b.n	8005290 <__cvt+0x36>
 800528e:	2303      	movs	r3, #3
 8005290:	aa07      	add	r2, sp, #28
 8005292:	9204      	str	r2, [sp, #16]
 8005294:	aa06      	add	r2, sp, #24
 8005296:	e9cd a202 	strd	sl, r2, [sp, #8]
 800529a:	e9cd 3500 	strd	r3, r5, [sp]
 800529e:	4622      	mov	r2, r4
 80052a0:	4633      	mov	r3, r6
 80052a2:	f000 fced 	bl	8005c80 <_dtoa_r>
 80052a6:	2f47      	cmp	r7, #71	; 0x47
 80052a8:	4680      	mov	r8, r0
 80052aa:	d102      	bne.n	80052b2 <__cvt+0x58>
 80052ac:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80052ae:	07db      	lsls	r3, r3, #31
 80052b0:	d526      	bpl.n	8005300 <__cvt+0xa6>
 80052b2:	2f46      	cmp	r7, #70	; 0x46
 80052b4:	eb08 0905 	add.w	r9, r8, r5
 80052b8:	d111      	bne.n	80052de <__cvt+0x84>
 80052ba:	f898 3000 	ldrb.w	r3, [r8]
 80052be:	2b30      	cmp	r3, #48	; 0x30
 80052c0:	d10a      	bne.n	80052d8 <__cvt+0x7e>
 80052c2:	2200      	movs	r2, #0
 80052c4:	2300      	movs	r3, #0
 80052c6:	4620      	mov	r0, r4
 80052c8:	4631      	mov	r1, r6
 80052ca:	f7fb fb6d 	bl	80009a8 <__aeabi_dcmpeq>
 80052ce:	b918      	cbnz	r0, 80052d8 <__cvt+0x7e>
 80052d0:	f1c5 0501 	rsb	r5, r5, #1
 80052d4:	f8ca 5000 	str.w	r5, [sl]
 80052d8:	f8da 3000 	ldr.w	r3, [sl]
 80052dc:	4499      	add	r9, r3
 80052de:	2200      	movs	r2, #0
 80052e0:	2300      	movs	r3, #0
 80052e2:	4620      	mov	r0, r4
 80052e4:	4631      	mov	r1, r6
 80052e6:	f7fb fb5f 	bl	80009a8 <__aeabi_dcmpeq>
 80052ea:	b938      	cbnz	r0, 80052fc <__cvt+0xa2>
 80052ec:	2230      	movs	r2, #48	; 0x30
 80052ee:	9b07      	ldr	r3, [sp, #28]
 80052f0:	454b      	cmp	r3, r9
 80052f2:	d205      	bcs.n	8005300 <__cvt+0xa6>
 80052f4:	1c59      	adds	r1, r3, #1
 80052f6:	9107      	str	r1, [sp, #28]
 80052f8:	701a      	strb	r2, [r3, #0]
 80052fa:	e7f8      	b.n	80052ee <__cvt+0x94>
 80052fc:	f8cd 901c 	str.w	r9, [sp, #28]
 8005300:	4640      	mov	r0, r8
 8005302:	9b07      	ldr	r3, [sp, #28]
 8005304:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8005306:	eba3 0308 	sub.w	r3, r3, r8
 800530a:	6013      	str	r3, [r2, #0]
 800530c:	b008      	add	sp, #32
 800530e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08005312 <__exponent>:
 8005312:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005314:	2900      	cmp	r1, #0
 8005316:	bfb4      	ite	lt
 8005318:	232d      	movlt	r3, #45	; 0x2d
 800531a:	232b      	movge	r3, #43	; 0x2b
 800531c:	4604      	mov	r4, r0
 800531e:	bfb8      	it	lt
 8005320:	4249      	neglt	r1, r1
 8005322:	2909      	cmp	r1, #9
 8005324:	f804 2b02 	strb.w	r2, [r4], #2
 8005328:	7043      	strb	r3, [r0, #1]
 800532a:	dd21      	ble.n	8005370 <__exponent+0x5e>
 800532c:	f10d 0307 	add.w	r3, sp, #7
 8005330:	461f      	mov	r7, r3
 8005332:	260a      	movs	r6, #10
 8005334:	fb91 f5f6 	sdiv	r5, r1, r6
 8005338:	fb06 1115 	mls	r1, r6, r5, r1
 800533c:	2d09      	cmp	r5, #9
 800533e:	f101 0130 	add.w	r1, r1, #48	; 0x30
 8005342:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005346:	f103 32ff 	add.w	r2, r3, #4294967295
 800534a:	4629      	mov	r1, r5
 800534c:	dc09      	bgt.n	8005362 <__exponent+0x50>
 800534e:	3130      	adds	r1, #48	; 0x30
 8005350:	3b02      	subs	r3, #2
 8005352:	f802 1c01 	strb.w	r1, [r2, #-1]
 8005356:	42bb      	cmp	r3, r7
 8005358:	4622      	mov	r2, r4
 800535a:	d304      	bcc.n	8005366 <__exponent+0x54>
 800535c:	1a10      	subs	r0, r2, r0
 800535e:	b003      	add	sp, #12
 8005360:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005362:	4613      	mov	r3, r2
 8005364:	e7e6      	b.n	8005334 <__exponent+0x22>
 8005366:	f813 2b01 	ldrb.w	r2, [r3], #1
 800536a:	f804 2b01 	strb.w	r2, [r4], #1
 800536e:	e7f2      	b.n	8005356 <__exponent+0x44>
 8005370:	2330      	movs	r3, #48	; 0x30
 8005372:	4419      	add	r1, r3
 8005374:	7083      	strb	r3, [r0, #2]
 8005376:	1d02      	adds	r2, r0, #4
 8005378:	70c1      	strb	r1, [r0, #3]
 800537a:	e7ef      	b.n	800535c <__exponent+0x4a>

0800537c <_printf_float>:
 800537c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005380:	b091      	sub	sp, #68	; 0x44
 8005382:	460c      	mov	r4, r1
 8005384:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8005386:	4693      	mov	fp, r2
 8005388:	461e      	mov	r6, r3
 800538a:	4605      	mov	r5, r0
 800538c:	f001 fa2c 	bl	80067e8 <_localeconv_r>
 8005390:	6803      	ldr	r3, [r0, #0]
 8005392:	4618      	mov	r0, r3
 8005394:	9309      	str	r3, [sp, #36]	; 0x24
 8005396:	f7fa fedb 	bl	8000150 <strlen>
 800539a:	2300      	movs	r3, #0
 800539c:	930e      	str	r3, [sp, #56]	; 0x38
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	900a      	str	r0, [sp, #40]	; 0x28
 80053a2:	3307      	adds	r3, #7
 80053a4:	f023 0307 	bic.w	r3, r3, #7
 80053a8:	f103 0208 	add.w	r2, r3, #8
 80053ac:	f894 8018 	ldrb.w	r8, [r4, #24]
 80053b0:	f8d4 a000 	ldr.w	sl, [r4]
 80053b4:	603a      	str	r2, [r7, #0]
 80053b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053ba:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80053be:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 80053c2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80053c6:	930b      	str	r3, [sp, #44]	; 0x2c
 80053c8:	f04f 32ff 	mov.w	r2, #4294967295
 80053cc:	4ba6      	ldr	r3, [pc, #664]	; (8005668 <_printf_float+0x2ec>)
 80053ce:	4638      	mov	r0, r7
 80053d0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80053d2:	f7fb fb1b 	bl	8000a0c <__aeabi_dcmpun>
 80053d6:	bb68      	cbnz	r0, 8005434 <_printf_float+0xb8>
 80053d8:	f04f 32ff 	mov.w	r2, #4294967295
 80053dc:	4ba2      	ldr	r3, [pc, #648]	; (8005668 <_printf_float+0x2ec>)
 80053de:	4638      	mov	r0, r7
 80053e0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80053e2:	f7fb faf5 	bl	80009d0 <__aeabi_dcmple>
 80053e6:	bb28      	cbnz	r0, 8005434 <_printf_float+0xb8>
 80053e8:	2200      	movs	r2, #0
 80053ea:	2300      	movs	r3, #0
 80053ec:	4638      	mov	r0, r7
 80053ee:	4649      	mov	r1, r9
 80053f0:	f7fb fae4 	bl	80009bc <__aeabi_dcmplt>
 80053f4:	b110      	cbz	r0, 80053fc <_printf_float+0x80>
 80053f6:	232d      	movs	r3, #45	; 0x2d
 80053f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80053fc:	4f9b      	ldr	r7, [pc, #620]	; (800566c <_printf_float+0x2f0>)
 80053fe:	4b9c      	ldr	r3, [pc, #624]	; (8005670 <_printf_float+0x2f4>)
 8005400:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005404:	bf98      	it	ls
 8005406:	461f      	movls	r7, r3
 8005408:	2303      	movs	r3, #3
 800540a:	f04f 0900 	mov.w	r9, #0
 800540e:	6123      	str	r3, [r4, #16]
 8005410:	f02a 0304 	bic.w	r3, sl, #4
 8005414:	6023      	str	r3, [r4, #0]
 8005416:	9600      	str	r6, [sp, #0]
 8005418:	465b      	mov	r3, fp
 800541a:	aa0f      	add	r2, sp, #60	; 0x3c
 800541c:	4621      	mov	r1, r4
 800541e:	4628      	mov	r0, r5
 8005420:	f000 f9e2 	bl	80057e8 <_printf_common>
 8005424:	3001      	adds	r0, #1
 8005426:	f040 8090 	bne.w	800554a <_printf_float+0x1ce>
 800542a:	f04f 30ff 	mov.w	r0, #4294967295
 800542e:	b011      	add	sp, #68	; 0x44
 8005430:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005434:	463a      	mov	r2, r7
 8005436:	464b      	mov	r3, r9
 8005438:	4638      	mov	r0, r7
 800543a:	4649      	mov	r1, r9
 800543c:	f7fb fae6 	bl	8000a0c <__aeabi_dcmpun>
 8005440:	b110      	cbz	r0, 8005448 <_printf_float+0xcc>
 8005442:	4f8c      	ldr	r7, [pc, #560]	; (8005674 <_printf_float+0x2f8>)
 8005444:	4b8c      	ldr	r3, [pc, #560]	; (8005678 <_printf_float+0x2fc>)
 8005446:	e7db      	b.n	8005400 <_printf_float+0x84>
 8005448:	6863      	ldr	r3, [r4, #4]
 800544a:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 800544e:	1c59      	adds	r1, r3, #1
 8005450:	a80d      	add	r0, sp, #52	; 0x34
 8005452:	a90e      	add	r1, sp, #56	; 0x38
 8005454:	d140      	bne.n	80054d8 <_printf_float+0x15c>
 8005456:	2306      	movs	r3, #6
 8005458:	6063      	str	r3, [r4, #4]
 800545a:	f04f 0c00 	mov.w	ip, #0
 800545e:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 8005462:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8005466:	6863      	ldr	r3, [r4, #4]
 8005468:	6022      	str	r2, [r4, #0]
 800546a:	e9cd 0803 	strd	r0, r8, [sp, #12]
 800546e:	9300      	str	r3, [sp, #0]
 8005470:	463a      	mov	r2, r7
 8005472:	464b      	mov	r3, r9
 8005474:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8005478:	4628      	mov	r0, r5
 800547a:	f7ff feee 	bl	800525a <__cvt>
 800547e:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 8005482:	2b47      	cmp	r3, #71	; 0x47
 8005484:	4607      	mov	r7, r0
 8005486:	d109      	bne.n	800549c <_printf_float+0x120>
 8005488:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800548a:	1cd8      	adds	r0, r3, #3
 800548c:	db02      	blt.n	8005494 <_printf_float+0x118>
 800548e:	6862      	ldr	r2, [r4, #4]
 8005490:	4293      	cmp	r3, r2
 8005492:	dd47      	ble.n	8005524 <_printf_float+0x1a8>
 8005494:	f1a8 0802 	sub.w	r8, r8, #2
 8005498:	fa5f f888 	uxtb.w	r8, r8
 800549c:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 80054a0:	990d      	ldr	r1, [sp, #52]	; 0x34
 80054a2:	d824      	bhi.n	80054ee <_printf_float+0x172>
 80054a4:	3901      	subs	r1, #1
 80054a6:	4642      	mov	r2, r8
 80054a8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80054ac:	910d      	str	r1, [sp, #52]	; 0x34
 80054ae:	f7ff ff30 	bl	8005312 <__exponent>
 80054b2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80054b4:	4681      	mov	r9, r0
 80054b6:	1813      	adds	r3, r2, r0
 80054b8:	2a01      	cmp	r2, #1
 80054ba:	6123      	str	r3, [r4, #16]
 80054bc:	dc02      	bgt.n	80054c4 <_printf_float+0x148>
 80054be:	6822      	ldr	r2, [r4, #0]
 80054c0:	07d1      	lsls	r1, r2, #31
 80054c2:	d501      	bpl.n	80054c8 <_printf_float+0x14c>
 80054c4:	3301      	adds	r3, #1
 80054c6:	6123      	str	r3, [r4, #16]
 80054c8:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d0a2      	beq.n	8005416 <_printf_float+0x9a>
 80054d0:	232d      	movs	r3, #45	; 0x2d
 80054d2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80054d6:	e79e      	b.n	8005416 <_printf_float+0x9a>
 80054d8:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 80054dc:	f000 816e 	beq.w	80057bc <_printf_float+0x440>
 80054e0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80054e4:	d1b9      	bne.n	800545a <_printf_float+0xde>
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d1b7      	bne.n	800545a <_printf_float+0xde>
 80054ea:	2301      	movs	r3, #1
 80054ec:	e7b4      	b.n	8005458 <_printf_float+0xdc>
 80054ee:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 80054f2:	d119      	bne.n	8005528 <_printf_float+0x1ac>
 80054f4:	2900      	cmp	r1, #0
 80054f6:	6863      	ldr	r3, [r4, #4]
 80054f8:	dd0c      	ble.n	8005514 <_printf_float+0x198>
 80054fa:	6121      	str	r1, [r4, #16]
 80054fc:	b913      	cbnz	r3, 8005504 <_printf_float+0x188>
 80054fe:	6822      	ldr	r2, [r4, #0]
 8005500:	07d2      	lsls	r2, r2, #31
 8005502:	d502      	bpl.n	800550a <_printf_float+0x18e>
 8005504:	3301      	adds	r3, #1
 8005506:	440b      	add	r3, r1
 8005508:	6123      	str	r3, [r4, #16]
 800550a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800550c:	f04f 0900 	mov.w	r9, #0
 8005510:	65a3      	str	r3, [r4, #88]	; 0x58
 8005512:	e7d9      	b.n	80054c8 <_printf_float+0x14c>
 8005514:	b913      	cbnz	r3, 800551c <_printf_float+0x1a0>
 8005516:	6822      	ldr	r2, [r4, #0]
 8005518:	07d0      	lsls	r0, r2, #31
 800551a:	d501      	bpl.n	8005520 <_printf_float+0x1a4>
 800551c:	3302      	adds	r3, #2
 800551e:	e7f3      	b.n	8005508 <_printf_float+0x18c>
 8005520:	2301      	movs	r3, #1
 8005522:	e7f1      	b.n	8005508 <_printf_float+0x18c>
 8005524:	f04f 0867 	mov.w	r8, #103	; 0x67
 8005528:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 800552c:	4293      	cmp	r3, r2
 800552e:	db05      	blt.n	800553c <_printf_float+0x1c0>
 8005530:	6822      	ldr	r2, [r4, #0]
 8005532:	6123      	str	r3, [r4, #16]
 8005534:	07d1      	lsls	r1, r2, #31
 8005536:	d5e8      	bpl.n	800550a <_printf_float+0x18e>
 8005538:	3301      	adds	r3, #1
 800553a:	e7e5      	b.n	8005508 <_printf_float+0x18c>
 800553c:	2b00      	cmp	r3, #0
 800553e:	bfcc      	ite	gt
 8005540:	2301      	movgt	r3, #1
 8005542:	f1c3 0302 	rsble	r3, r3, #2
 8005546:	4413      	add	r3, r2
 8005548:	e7de      	b.n	8005508 <_printf_float+0x18c>
 800554a:	6823      	ldr	r3, [r4, #0]
 800554c:	055a      	lsls	r2, r3, #21
 800554e:	d407      	bmi.n	8005560 <_printf_float+0x1e4>
 8005550:	6923      	ldr	r3, [r4, #16]
 8005552:	463a      	mov	r2, r7
 8005554:	4659      	mov	r1, fp
 8005556:	4628      	mov	r0, r5
 8005558:	47b0      	blx	r6
 800555a:	3001      	adds	r0, #1
 800555c:	d129      	bne.n	80055b2 <_printf_float+0x236>
 800555e:	e764      	b.n	800542a <_printf_float+0xae>
 8005560:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8005564:	f240 80d7 	bls.w	8005716 <_printf_float+0x39a>
 8005568:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800556c:	2200      	movs	r2, #0
 800556e:	2300      	movs	r3, #0
 8005570:	f7fb fa1a 	bl	80009a8 <__aeabi_dcmpeq>
 8005574:	b388      	cbz	r0, 80055da <_printf_float+0x25e>
 8005576:	2301      	movs	r3, #1
 8005578:	4a40      	ldr	r2, [pc, #256]	; (800567c <_printf_float+0x300>)
 800557a:	4659      	mov	r1, fp
 800557c:	4628      	mov	r0, r5
 800557e:	47b0      	blx	r6
 8005580:	3001      	adds	r0, #1
 8005582:	f43f af52 	beq.w	800542a <_printf_float+0xae>
 8005586:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800558a:	429a      	cmp	r2, r3
 800558c:	db02      	blt.n	8005594 <_printf_float+0x218>
 800558e:	6823      	ldr	r3, [r4, #0]
 8005590:	07d8      	lsls	r0, r3, #31
 8005592:	d50e      	bpl.n	80055b2 <_printf_float+0x236>
 8005594:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005598:	4659      	mov	r1, fp
 800559a:	4628      	mov	r0, r5
 800559c:	47b0      	blx	r6
 800559e:	3001      	adds	r0, #1
 80055a0:	f43f af43 	beq.w	800542a <_printf_float+0xae>
 80055a4:	2700      	movs	r7, #0
 80055a6:	f104 081a 	add.w	r8, r4, #26
 80055aa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80055ac:	3b01      	subs	r3, #1
 80055ae:	42bb      	cmp	r3, r7
 80055b0:	dc09      	bgt.n	80055c6 <_printf_float+0x24a>
 80055b2:	6823      	ldr	r3, [r4, #0]
 80055b4:	079f      	lsls	r7, r3, #30
 80055b6:	f100 80fd 	bmi.w	80057b4 <_printf_float+0x438>
 80055ba:	68e0      	ldr	r0, [r4, #12]
 80055bc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80055be:	4298      	cmp	r0, r3
 80055c0:	bfb8      	it	lt
 80055c2:	4618      	movlt	r0, r3
 80055c4:	e733      	b.n	800542e <_printf_float+0xb2>
 80055c6:	2301      	movs	r3, #1
 80055c8:	4642      	mov	r2, r8
 80055ca:	4659      	mov	r1, fp
 80055cc:	4628      	mov	r0, r5
 80055ce:	47b0      	blx	r6
 80055d0:	3001      	adds	r0, #1
 80055d2:	f43f af2a 	beq.w	800542a <_printf_float+0xae>
 80055d6:	3701      	adds	r7, #1
 80055d8:	e7e7      	b.n	80055aa <_printf_float+0x22e>
 80055da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80055dc:	2b00      	cmp	r3, #0
 80055de:	dc2b      	bgt.n	8005638 <_printf_float+0x2bc>
 80055e0:	2301      	movs	r3, #1
 80055e2:	4a26      	ldr	r2, [pc, #152]	; (800567c <_printf_float+0x300>)
 80055e4:	4659      	mov	r1, fp
 80055e6:	4628      	mov	r0, r5
 80055e8:	47b0      	blx	r6
 80055ea:	3001      	adds	r0, #1
 80055ec:	f43f af1d 	beq.w	800542a <_printf_float+0xae>
 80055f0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80055f2:	b923      	cbnz	r3, 80055fe <_printf_float+0x282>
 80055f4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80055f6:	b913      	cbnz	r3, 80055fe <_printf_float+0x282>
 80055f8:	6823      	ldr	r3, [r4, #0]
 80055fa:	07d9      	lsls	r1, r3, #31
 80055fc:	d5d9      	bpl.n	80055b2 <_printf_float+0x236>
 80055fe:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005602:	4659      	mov	r1, fp
 8005604:	4628      	mov	r0, r5
 8005606:	47b0      	blx	r6
 8005608:	3001      	adds	r0, #1
 800560a:	f43f af0e 	beq.w	800542a <_printf_float+0xae>
 800560e:	f04f 0800 	mov.w	r8, #0
 8005612:	f104 091a 	add.w	r9, r4, #26
 8005616:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005618:	425b      	negs	r3, r3
 800561a:	4543      	cmp	r3, r8
 800561c:	dc01      	bgt.n	8005622 <_printf_float+0x2a6>
 800561e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005620:	e797      	b.n	8005552 <_printf_float+0x1d6>
 8005622:	2301      	movs	r3, #1
 8005624:	464a      	mov	r2, r9
 8005626:	4659      	mov	r1, fp
 8005628:	4628      	mov	r0, r5
 800562a:	47b0      	blx	r6
 800562c:	3001      	adds	r0, #1
 800562e:	f43f aefc 	beq.w	800542a <_printf_float+0xae>
 8005632:	f108 0801 	add.w	r8, r8, #1
 8005636:	e7ee      	b.n	8005616 <_printf_float+0x29a>
 8005638:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800563a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800563c:	429a      	cmp	r2, r3
 800563e:	bfa8      	it	ge
 8005640:	461a      	movge	r2, r3
 8005642:	2a00      	cmp	r2, #0
 8005644:	4690      	mov	r8, r2
 8005646:	dd07      	ble.n	8005658 <_printf_float+0x2dc>
 8005648:	4613      	mov	r3, r2
 800564a:	4659      	mov	r1, fp
 800564c:	463a      	mov	r2, r7
 800564e:	4628      	mov	r0, r5
 8005650:	47b0      	blx	r6
 8005652:	3001      	adds	r0, #1
 8005654:	f43f aee9 	beq.w	800542a <_printf_float+0xae>
 8005658:	f104 031a 	add.w	r3, r4, #26
 800565c:	f04f 0a00 	mov.w	sl, #0
 8005660:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 8005664:	930b      	str	r3, [sp, #44]	; 0x2c
 8005666:	e015      	b.n	8005694 <_printf_float+0x318>
 8005668:	7fefffff 	.word	0x7fefffff
 800566c:	08008418 	.word	0x08008418
 8005670:	08008414 	.word	0x08008414
 8005674:	08008420 	.word	0x08008420
 8005678:	0800841c 	.word	0x0800841c
 800567c:	08008424 	.word	0x08008424
 8005680:	2301      	movs	r3, #1
 8005682:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005684:	4659      	mov	r1, fp
 8005686:	4628      	mov	r0, r5
 8005688:	47b0      	blx	r6
 800568a:	3001      	adds	r0, #1
 800568c:	f43f aecd 	beq.w	800542a <_printf_float+0xae>
 8005690:	f10a 0a01 	add.w	sl, sl, #1
 8005694:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8005698:	eba9 0308 	sub.w	r3, r9, r8
 800569c:	4553      	cmp	r3, sl
 800569e:	dcef      	bgt.n	8005680 <_printf_float+0x304>
 80056a0:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80056a4:	429a      	cmp	r2, r3
 80056a6:	444f      	add	r7, r9
 80056a8:	db14      	blt.n	80056d4 <_printf_float+0x358>
 80056aa:	6823      	ldr	r3, [r4, #0]
 80056ac:	07da      	lsls	r2, r3, #31
 80056ae:	d411      	bmi.n	80056d4 <_printf_float+0x358>
 80056b0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80056b2:	990d      	ldr	r1, [sp, #52]	; 0x34
 80056b4:	eba3 0209 	sub.w	r2, r3, r9
 80056b8:	eba3 0901 	sub.w	r9, r3, r1
 80056bc:	4591      	cmp	r9, r2
 80056be:	bfa8      	it	ge
 80056c0:	4691      	movge	r9, r2
 80056c2:	f1b9 0f00 	cmp.w	r9, #0
 80056c6:	dc0d      	bgt.n	80056e4 <_printf_float+0x368>
 80056c8:	2700      	movs	r7, #0
 80056ca:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80056ce:	f104 081a 	add.w	r8, r4, #26
 80056d2:	e018      	b.n	8005706 <_printf_float+0x38a>
 80056d4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80056d8:	4659      	mov	r1, fp
 80056da:	4628      	mov	r0, r5
 80056dc:	47b0      	blx	r6
 80056de:	3001      	adds	r0, #1
 80056e0:	d1e6      	bne.n	80056b0 <_printf_float+0x334>
 80056e2:	e6a2      	b.n	800542a <_printf_float+0xae>
 80056e4:	464b      	mov	r3, r9
 80056e6:	463a      	mov	r2, r7
 80056e8:	4659      	mov	r1, fp
 80056ea:	4628      	mov	r0, r5
 80056ec:	47b0      	blx	r6
 80056ee:	3001      	adds	r0, #1
 80056f0:	d1ea      	bne.n	80056c8 <_printf_float+0x34c>
 80056f2:	e69a      	b.n	800542a <_printf_float+0xae>
 80056f4:	2301      	movs	r3, #1
 80056f6:	4642      	mov	r2, r8
 80056f8:	4659      	mov	r1, fp
 80056fa:	4628      	mov	r0, r5
 80056fc:	47b0      	blx	r6
 80056fe:	3001      	adds	r0, #1
 8005700:	f43f ae93 	beq.w	800542a <_printf_float+0xae>
 8005704:	3701      	adds	r7, #1
 8005706:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800570a:	1a9b      	subs	r3, r3, r2
 800570c:	eba3 0309 	sub.w	r3, r3, r9
 8005710:	42bb      	cmp	r3, r7
 8005712:	dcef      	bgt.n	80056f4 <_printf_float+0x378>
 8005714:	e74d      	b.n	80055b2 <_printf_float+0x236>
 8005716:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005718:	2a01      	cmp	r2, #1
 800571a:	dc01      	bgt.n	8005720 <_printf_float+0x3a4>
 800571c:	07db      	lsls	r3, r3, #31
 800571e:	d538      	bpl.n	8005792 <_printf_float+0x416>
 8005720:	2301      	movs	r3, #1
 8005722:	463a      	mov	r2, r7
 8005724:	4659      	mov	r1, fp
 8005726:	4628      	mov	r0, r5
 8005728:	47b0      	blx	r6
 800572a:	3001      	adds	r0, #1
 800572c:	f43f ae7d 	beq.w	800542a <_printf_float+0xae>
 8005730:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005734:	4659      	mov	r1, fp
 8005736:	4628      	mov	r0, r5
 8005738:	47b0      	blx	r6
 800573a:	3001      	adds	r0, #1
 800573c:	f107 0701 	add.w	r7, r7, #1
 8005740:	f43f ae73 	beq.w	800542a <_printf_float+0xae>
 8005744:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005748:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800574a:	2200      	movs	r2, #0
 800574c:	f103 38ff 	add.w	r8, r3, #4294967295
 8005750:	2300      	movs	r3, #0
 8005752:	f7fb f929 	bl	80009a8 <__aeabi_dcmpeq>
 8005756:	b9c0      	cbnz	r0, 800578a <_printf_float+0x40e>
 8005758:	4643      	mov	r3, r8
 800575a:	463a      	mov	r2, r7
 800575c:	4659      	mov	r1, fp
 800575e:	4628      	mov	r0, r5
 8005760:	47b0      	blx	r6
 8005762:	3001      	adds	r0, #1
 8005764:	d10d      	bne.n	8005782 <_printf_float+0x406>
 8005766:	e660      	b.n	800542a <_printf_float+0xae>
 8005768:	2301      	movs	r3, #1
 800576a:	4642      	mov	r2, r8
 800576c:	4659      	mov	r1, fp
 800576e:	4628      	mov	r0, r5
 8005770:	47b0      	blx	r6
 8005772:	3001      	adds	r0, #1
 8005774:	f43f ae59 	beq.w	800542a <_printf_float+0xae>
 8005778:	3701      	adds	r7, #1
 800577a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800577c:	3b01      	subs	r3, #1
 800577e:	42bb      	cmp	r3, r7
 8005780:	dcf2      	bgt.n	8005768 <_printf_float+0x3ec>
 8005782:	464b      	mov	r3, r9
 8005784:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005788:	e6e4      	b.n	8005554 <_printf_float+0x1d8>
 800578a:	2700      	movs	r7, #0
 800578c:	f104 081a 	add.w	r8, r4, #26
 8005790:	e7f3      	b.n	800577a <_printf_float+0x3fe>
 8005792:	2301      	movs	r3, #1
 8005794:	e7e1      	b.n	800575a <_printf_float+0x3de>
 8005796:	2301      	movs	r3, #1
 8005798:	4642      	mov	r2, r8
 800579a:	4659      	mov	r1, fp
 800579c:	4628      	mov	r0, r5
 800579e:	47b0      	blx	r6
 80057a0:	3001      	adds	r0, #1
 80057a2:	f43f ae42 	beq.w	800542a <_printf_float+0xae>
 80057a6:	3701      	adds	r7, #1
 80057a8:	68e3      	ldr	r3, [r4, #12]
 80057aa:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80057ac:	1a9b      	subs	r3, r3, r2
 80057ae:	42bb      	cmp	r3, r7
 80057b0:	dcf1      	bgt.n	8005796 <_printf_float+0x41a>
 80057b2:	e702      	b.n	80055ba <_printf_float+0x23e>
 80057b4:	2700      	movs	r7, #0
 80057b6:	f104 0819 	add.w	r8, r4, #25
 80057ba:	e7f5      	b.n	80057a8 <_printf_float+0x42c>
 80057bc:	2b00      	cmp	r3, #0
 80057be:	f43f ae94 	beq.w	80054ea <_printf_float+0x16e>
 80057c2:	f04f 0c00 	mov.w	ip, #0
 80057c6:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 80057ca:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 80057ce:	6022      	str	r2, [r4, #0]
 80057d0:	e9cd 0803 	strd	r0, r8, [sp, #12]
 80057d4:	e9cd 2101 	strd	r2, r1, [sp, #4]
 80057d8:	9300      	str	r3, [sp, #0]
 80057da:	463a      	mov	r2, r7
 80057dc:	464b      	mov	r3, r9
 80057de:	4628      	mov	r0, r5
 80057e0:	f7ff fd3b 	bl	800525a <__cvt>
 80057e4:	4607      	mov	r7, r0
 80057e6:	e64f      	b.n	8005488 <_printf_float+0x10c>

080057e8 <_printf_common>:
 80057e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80057ec:	4691      	mov	r9, r2
 80057ee:	461f      	mov	r7, r3
 80057f0:	688a      	ldr	r2, [r1, #8]
 80057f2:	690b      	ldr	r3, [r1, #16]
 80057f4:	4606      	mov	r6, r0
 80057f6:	4293      	cmp	r3, r2
 80057f8:	bfb8      	it	lt
 80057fa:	4613      	movlt	r3, r2
 80057fc:	f8c9 3000 	str.w	r3, [r9]
 8005800:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005804:	460c      	mov	r4, r1
 8005806:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800580a:	b112      	cbz	r2, 8005812 <_printf_common+0x2a>
 800580c:	3301      	adds	r3, #1
 800580e:	f8c9 3000 	str.w	r3, [r9]
 8005812:	6823      	ldr	r3, [r4, #0]
 8005814:	0699      	lsls	r1, r3, #26
 8005816:	bf42      	ittt	mi
 8005818:	f8d9 3000 	ldrmi.w	r3, [r9]
 800581c:	3302      	addmi	r3, #2
 800581e:	f8c9 3000 	strmi.w	r3, [r9]
 8005822:	6825      	ldr	r5, [r4, #0]
 8005824:	f015 0506 	ands.w	r5, r5, #6
 8005828:	d107      	bne.n	800583a <_printf_common+0x52>
 800582a:	f104 0a19 	add.w	sl, r4, #25
 800582e:	68e3      	ldr	r3, [r4, #12]
 8005830:	f8d9 2000 	ldr.w	r2, [r9]
 8005834:	1a9b      	subs	r3, r3, r2
 8005836:	42ab      	cmp	r3, r5
 8005838:	dc29      	bgt.n	800588e <_printf_common+0xa6>
 800583a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800583e:	6822      	ldr	r2, [r4, #0]
 8005840:	3300      	adds	r3, #0
 8005842:	bf18      	it	ne
 8005844:	2301      	movne	r3, #1
 8005846:	0692      	lsls	r2, r2, #26
 8005848:	d42e      	bmi.n	80058a8 <_printf_common+0xc0>
 800584a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800584e:	4639      	mov	r1, r7
 8005850:	4630      	mov	r0, r6
 8005852:	47c0      	blx	r8
 8005854:	3001      	adds	r0, #1
 8005856:	d021      	beq.n	800589c <_printf_common+0xb4>
 8005858:	6823      	ldr	r3, [r4, #0]
 800585a:	68e5      	ldr	r5, [r4, #12]
 800585c:	f003 0306 	and.w	r3, r3, #6
 8005860:	2b04      	cmp	r3, #4
 8005862:	bf18      	it	ne
 8005864:	2500      	movne	r5, #0
 8005866:	f8d9 2000 	ldr.w	r2, [r9]
 800586a:	f04f 0900 	mov.w	r9, #0
 800586e:	bf08      	it	eq
 8005870:	1aad      	subeq	r5, r5, r2
 8005872:	68a3      	ldr	r3, [r4, #8]
 8005874:	6922      	ldr	r2, [r4, #16]
 8005876:	bf08      	it	eq
 8005878:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800587c:	4293      	cmp	r3, r2
 800587e:	bfc4      	itt	gt
 8005880:	1a9b      	subgt	r3, r3, r2
 8005882:	18ed      	addgt	r5, r5, r3
 8005884:	341a      	adds	r4, #26
 8005886:	454d      	cmp	r5, r9
 8005888:	d11a      	bne.n	80058c0 <_printf_common+0xd8>
 800588a:	2000      	movs	r0, #0
 800588c:	e008      	b.n	80058a0 <_printf_common+0xb8>
 800588e:	2301      	movs	r3, #1
 8005890:	4652      	mov	r2, sl
 8005892:	4639      	mov	r1, r7
 8005894:	4630      	mov	r0, r6
 8005896:	47c0      	blx	r8
 8005898:	3001      	adds	r0, #1
 800589a:	d103      	bne.n	80058a4 <_printf_common+0xbc>
 800589c:	f04f 30ff 	mov.w	r0, #4294967295
 80058a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058a4:	3501      	adds	r5, #1
 80058a6:	e7c2      	b.n	800582e <_printf_common+0x46>
 80058a8:	2030      	movs	r0, #48	; 0x30
 80058aa:	18e1      	adds	r1, r4, r3
 80058ac:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80058b0:	1c5a      	adds	r2, r3, #1
 80058b2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80058b6:	4422      	add	r2, r4
 80058b8:	3302      	adds	r3, #2
 80058ba:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80058be:	e7c4      	b.n	800584a <_printf_common+0x62>
 80058c0:	2301      	movs	r3, #1
 80058c2:	4622      	mov	r2, r4
 80058c4:	4639      	mov	r1, r7
 80058c6:	4630      	mov	r0, r6
 80058c8:	47c0      	blx	r8
 80058ca:	3001      	adds	r0, #1
 80058cc:	d0e6      	beq.n	800589c <_printf_common+0xb4>
 80058ce:	f109 0901 	add.w	r9, r9, #1
 80058d2:	e7d8      	b.n	8005886 <_printf_common+0x9e>

080058d4 <_printf_i>:
 80058d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80058d8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80058dc:	460c      	mov	r4, r1
 80058de:	7e09      	ldrb	r1, [r1, #24]
 80058e0:	b085      	sub	sp, #20
 80058e2:	296e      	cmp	r1, #110	; 0x6e
 80058e4:	4617      	mov	r7, r2
 80058e6:	4606      	mov	r6, r0
 80058e8:	4698      	mov	r8, r3
 80058ea:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80058ec:	f000 80b3 	beq.w	8005a56 <_printf_i+0x182>
 80058f0:	d822      	bhi.n	8005938 <_printf_i+0x64>
 80058f2:	2963      	cmp	r1, #99	; 0x63
 80058f4:	d036      	beq.n	8005964 <_printf_i+0x90>
 80058f6:	d80a      	bhi.n	800590e <_printf_i+0x3a>
 80058f8:	2900      	cmp	r1, #0
 80058fa:	f000 80b9 	beq.w	8005a70 <_printf_i+0x19c>
 80058fe:	2958      	cmp	r1, #88	; 0x58
 8005900:	f000 8083 	beq.w	8005a0a <_printf_i+0x136>
 8005904:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005908:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800590c:	e032      	b.n	8005974 <_printf_i+0xa0>
 800590e:	2964      	cmp	r1, #100	; 0x64
 8005910:	d001      	beq.n	8005916 <_printf_i+0x42>
 8005912:	2969      	cmp	r1, #105	; 0x69
 8005914:	d1f6      	bne.n	8005904 <_printf_i+0x30>
 8005916:	6820      	ldr	r0, [r4, #0]
 8005918:	6813      	ldr	r3, [r2, #0]
 800591a:	0605      	lsls	r5, r0, #24
 800591c:	f103 0104 	add.w	r1, r3, #4
 8005920:	d52a      	bpl.n	8005978 <_printf_i+0xa4>
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	6011      	str	r1, [r2, #0]
 8005926:	2b00      	cmp	r3, #0
 8005928:	da03      	bge.n	8005932 <_printf_i+0x5e>
 800592a:	222d      	movs	r2, #45	; 0x2d
 800592c:	425b      	negs	r3, r3
 800592e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8005932:	486f      	ldr	r0, [pc, #444]	; (8005af0 <_printf_i+0x21c>)
 8005934:	220a      	movs	r2, #10
 8005936:	e039      	b.n	80059ac <_printf_i+0xd8>
 8005938:	2973      	cmp	r1, #115	; 0x73
 800593a:	f000 809d 	beq.w	8005a78 <_printf_i+0x1a4>
 800593e:	d808      	bhi.n	8005952 <_printf_i+0x7e>
 8005940:	296f      	cmp	r1, #111	; 0x6f
 8005942:	d020      	beq.n	8005986 <_printf_i+0xb2>
 8005944:	2970      	cmp	r1, #112	; 0x70
 8005946:	d1dd      	bne.n	8005904 <_printf_i+0x30>
 8005948:	6823      	ldr	r3, [r4, #0]
 800594a:	f043 0320 	orr.w	r3, r3, #32
 800594e:	6023      	str	r3, [r4, #0]
 8005950:	e003      	b.n	800595a <_printf_i+0x86>
 8005952:	2975      	cmp	r1, #117	; 0x75
 8005954:	d017      	beq.n	8005986 <_printf_i+0xb2>
 8005956:	2978      	cmp	r1, #120	; 0x78
 8005958:	d1d4      	bne.n	8005904 <_printf_i+0x30>
 800595a:	2378      	movs	r3, #120	; 0x78
 800595c:	4865      	ldr	r0, [pc, #404]	; (8005af4 <_printf_i+0x220>)
 800595e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005962:	e055      	b.n	8005a10 <_printf_i+0x13c>
 8005964:	6813      	ldr	r3, [r2, #0]
 8005966:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800596a:	1d19      	adds	r1, r3, #4
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	6011      	str	r1, [r2, #0]
 8005970:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005974:	2301      	movs	r3, #1
 8005976:	e08c      	b.n	8005a92 <_printf_i+0x1be>
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800597e:	6011      	str	r1, [r2, #0]
 8005980:	bf18      	it	ne
 8005982:	b21b      	sxthne	r3, r3
 8005984:	e7cf      	b.n	8005926 <_printf_i+0x52>
 8005986:	6813      	ldr	r3, [r2, #0]
 8005988:	6825      	ldr	r5, [r4, #0]
 800598a:	1d18      	adds	r0, r3, #4
 800598c:	6010      	str	r0, [r2, #0]
 800598e:	0628      	lsls	r0, r5, #24
 8005990:	d501      	bpl.n	8005996 <_printf_i+0xc2>
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	e002      	b.n	800599c <_printf_i+0xc8>
 8005996:	0668      	lsls	r0, r5, #25
 8005998:	d5fb      	bpl.n	8005992 <_printf_i+0xbe>
 800599a:	881b      	ldrh	r3, [r3, #0]
 800599c:	296f      	cmp	r1, #111	; 0x6f
 800599e:	bf14      	ite	ne
 80059a0:	220a      	movne	r2, #10
 80059a2:	2208      	moveq	r2, #8
 80059a4:	4852      	ldr	r0, [pc, #328]	; (8005af0 <_printf_i+0x21c>)
 80059a6:	2100      	movs	r1, #0
 80059a8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80059ac:	6865      	ldr	r5, [r4, #4]
 80059ae:	2d00      	cmp	r5, #0
 80059b0:	60a5      	str	r5, [r4, #8]
 80059b2:	f2c0 8095 	blt.w	8005ae0 <_printf_i+0x20c>
 80059b6:	6821      	ldr	r1, [r4, #0]
 80059b8:	f021 0104 	bic.w	r1, r1, #4
 80059bc:	6021      	str	r1, [r4, #0]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d13d      	bne.n	8005a3e <_printf_i+0x16a>
 80059c2:	2d00      	cmp	r5, #0
 80059c4:	f040 808e 	bne.w	8005ae4 <_printf_i+0x210>
 80059c8:	4665      	mov	r5, ip
 80059ca:	2a08      	cmp	r2, #8
 80059cc:	d10b      	bne.n	80059e6 <_printf_i+0x112>
 80059ce:	6823      	ldr	r3, [r4, #0]
 80059d0:	07db      	lsls	r3, r3, #31
 80059d2:	d508      	bpl.n	80059e6 <_printf_i+0x112>
 80059d4:	6923      	ldr	r3, [r4, #16]
 80059d6:	6862      	ldr	r2, [r4, #4]
 80059d8:	429a      	cmp	r2, r3
 80059da:	bfde      	ittt	le
 80059dc:	2330      	movle	r3, #48	; 0x30
 80059de:	f805 3c01 	strble.w	r3, [r5, #-1]
 80059e2:	f105 35ff 	addle.w	r5, r5, #4294967295
 80059e6:	ebac 0305 	sub.w	r3, ip, r5
 80059ea:	6123      	str	r3, [r4, #16]
 80059ec:	f8cd 8000 	str.w	r8, [sp]
 80059f0:	463b      	mov	r3, r7
 80059f2:	aa03      	add	r2, sp, #12
 80059f4:	4621      	mov	r1, r4
 80059f6:	4630      	mov	r0, r6
 80059f8:	f7ff fef6 	bl	80057e8 <_printf_common>
 80059fc:	3001      	adds	r0, #1
 80059fe:	d14d      	bne.n	8005a9c <_printf_i+0x1c8>
 8005a00:	f04f 30ff 	mov.w	r0, #4294967295
 8005a04:	b005      	add	sp, #20
 8005a06:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005a0a:	4839      	ldr	r0, [pc, #228]	; (8005af0 <_printf_i+0x21c>)
 8005a0c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8005a10:	6813      	ldr	r3, [r2, #0]
 8005a12:	6821      	ldr	r1, [r4, #0]
 8005a14:	1d1d      	adds	r5, r3, #4
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	6015      	str	r5, [r2, #0]
 8005a1a:	060a      	lsls	r2, r1, #24
 8005a1c:	d50b      	bpl.n	8005a36 <_printf_i+0x162>
 8005a1e:	07ca      	lsls	r2, r1, #31
 8005a20:	bf44      	itt	mi
 8005a22:	f041 0120 	orrmi.w	r1, r1, #32
 8005a26:	6021      	strmi	r1, [r4, #0]
 8005a28:	b91b      	cbnz	r3, 8005a32 <_printf_i+0x15e>
 8005a2a:	6822      	ldr	r2, [r4, #0]
 8005a2c:	f022 0220 	bic.w	r2, r2, #32
 8005a30:	6022      	str	r2, [r4, #0]
 8005a32:	2210      	movs	r2, #16
 8005a34:	e7b7      	b.n	80059a6 <_printf_i+0xd2>
 8005a36:	064d      	lsls	r5, r1, #25
 8005a38:	bf48      	it	mi
 8005a3a:	b29b      	uxthmi	r3, r3
 8005a3c:	e7ef      	b.n	8005a1e <_printf_i+0x14a>
 8005a3e:	4665      	mov	r5, ip
 8005a40:	fbb3 f1f2 	udiv	r1, r3, r2
 8005a44:	fb02 3311 	mls	r3, r2, r1, r3
 8005a48:	5cc3      	ldrb	r3, [r0, r3]
 8005a4a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8005a4e:	460b      	mov	r3, r1
 8005a50:	2900      	cmp	r1, #0
 8005a52:	d1f5      	bne.n	8005a40 <_printf_i+0x16c>
 8005a54:	e7b9      	b.n	80059ca <_printf_i+0xf6>
 8005a56:	6813      	ldr	r3, [r2, #0]
 8005a58:	6825      	ldr	r5, [r4, #0]
 8005a5a:	1d18      	adds	r0, r3, #4
 8005a5c:	6961      	ldr	r1, [r4, #20]
 8005a5e:	6010      	str	r0, [r2, #0]
 8005a60:	0628      	lsls	r0, r5, #24
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	d501      	bpl.n	8005a6a <_printf_i+0x196>
 8005a66:	6019      	str	r1, [r3, #0]
 8005a68:	e002      	b.n	8005a70 <_printf_i+0x19c>
 8005a6a:	066a      	lsls	r2, r5, #25
 8005a6c:	d5fb      	bpl.n	8005a66 <_printf_i+0x192>
 8005a6e:	8019      	strh	r1, [r3, #0]
 8005a70:	2300      	movs	r3, #0
 8005a72:	4665      	mov	r5, ip
 8005a74:	6123      	str	r3, [r4, #16]
 8005a76:	e7b9      	b.n	80059ec <_printf_i+0x118>
 8005a78:	6813      	ldr	r3, [r2, #0]
 8005a7a:	1d19      	adds	r1, r3, #4
 8005a7c:	6011      	str	r1, [r2, #0]
 8005a7e:	681d      	ldr	r5, [r3, #0]
 8005a80:	6862      	ldr	r2, [r4, #4]
 8005a82:	2100      	movs	r1, #0
 8005a84:	4628      	mov	r0, r5
 8005a86:	f000 fec5 	bl	8006814 <memchr>
 8005a8a:	b108      	cbz	r0, 8005a90 <_printf_i+0x1bc>
 8005a8c:	1b40      	subs	r0, r0, r5
 8005a8e:	6060      	str	r0, [r4, #4]
 8005a90:	6863      	ldr	r3, [r4, #4]
 8005a92:	6123      	str	r3, [r4, #16]
 8005a94:	2300      	movs	r3, #0
 8005a96:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005a9a:	e7a7      	b.n	80059ec <_printf_i+0x118>
 8005a9c:	6923      	ldr	r3, [r4, #16]
 8005a9e:	462a      	mov	r2, r5
 8005aa0:	4639      	mov	r1, r7
 8005aa2:	4630      	mov	r0, r6
 8005aa4:	47c0      	blx	r8
 8005aa6:	3001      	adds	r0, #1
 8005aa8:	d0aa      	beq.n	8005a00 <_printf_i+0x12c>
 8005aaa:	6823      	ldr	r3, [r4, #0]
 8005aac:	079b      	lsls	r3, r3, #30
 8005aae:	d413      	bmi.n	8005ad8 <_printf_i+0x204>
 8005ab0:	68e0      	ldr	r0, [r4, #12]
 8005ab2:	9b03      	ldr	r3, [sp, #12]
 8005ab4:	4298      	cmp	r0, r3
 8005ab6:	bfb8      	it	lt
 8005ab8:	4618      	movlt	r0, r3
 8005aba:	e7a3      	b.n	8005a04 <_printf_i+0x130>
 8005abc:	2301      	movs	r3, #1
 8005abe:	464a      	mov	r2, r9
 8005ac0:	4639      	mov	r1, r7
 8005ac2:	4630      	mov	r0, r6
 8005ac4:	47c0      	blx	r8
 8005ac6:	3001      	adds	r0, #1
 8005ac8:	d09a      	beq.n	8005a00 <_printf_i+0x12c>
 8005aca:	3501      	adds	r5, #1
 8005acc:	68e3      	ldr	r3, [r4, #12]
 8005ace:	9a03      	ldr	r2, [sp, #12]
 8005ad0:	1a9b      	subs	r3, r3, r2
 8005ad2:	42ab      	cmp	r3, r5
 8005ad4:	dcf2      	bgt.n	8005abc <_printf_i+0x1e8>
 8005ad6:	e7eb      	b.n	8005ab0 <_printf_i+0x1dc>
 8005ad8:	2500      	movs	r5, #0
 8005ada:	f104 0919 	add.w	r9, r4, #25
 8005ade:	e7f5      	b.n	8005acc <_printf_i+0x1f8>
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d1ac      	bne.n	8005a3e <_printf_i+0x16a>
 8005ae4:	7803      	ldrb	r3, [r0, #0]
 8005ae6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005aea:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005aee:	e76c      	b.n	80059ca <_printf_i+0xf6>
 8005af0:	08008426 	.word	0x08008426
 8005af4:	08008437 	.word	0x08008437

08005af8 <sniprintf>:
 8005af8:	b40c      	push	{r2, r3}
 8005afa:	b530      	push	{r4, r5, lr}
 8005afc:	4b17      	ldr	r3, [pc, #92]	; (8005b5c <sniprintf+0x64>)
 8005afe:	1e0c      	subs	r4, r1, #0
 8005b00:	b09d      	sub	sp, #116	; 0x74
 8005b02:	681d      	ldr	r5, [r3, #0]
 8005b04:	da08      	bge.n	8005b18 <sniprintf+0x20>
 8005b06:	238b      	movs	r3, #139	; 0x8b
 8005b08:	f04f 30ff 	mov.w	r0, #4294967295
 8005b0c:	602b      	str	r3, [r5, #0]
 8005b0e:	b01d      	add	sp, #116	; 0x74
 8005b10:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005b14:	b002      	add	sp, #8
 8005b16:	4770      	bx	lr
 8005b18:	f44f 7302 	mov.w	r3, #520	; 0x208
 8005b1c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005b20:	bf0c      	ite	eq
 8005b22:	4623      	moveq	r3, r4
 8005b24:	f104 33ff 	addne.w	r3, r4, #4294967295
 8005b28:	9304      	str	r3, [sp, #16]
 8005b2a:	9307      	str	r3, [sp, #28]
 8005b2c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005b30:	9002      	str	r0, [sp, #8]
 8005b32:	9006      	str	r0, [sp, #24]
 8005b34:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005b38:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005b3a:	ab21      	add	r3, sp, #132	; 0x84
 8005b3c:	a902      	add	r1, sp, #8
 8005b3e:	4628      	mov	r0, r5
 8005b40:	9301      	str	r3, [sp, #4]
 8005b42:	f001 fa5f 	bl	8007004 <_svfiprintf_r>
 8005b46:	1c43      	adds	r3, r0, #1
 8005b48:	bfbc      	itt	lt
 8005b4a:	238b      	movlt	r3, #139	; 0x8b
 8005b4c:	602b      	strlt	r3, [r5, #0]
 8005b4e:	2c00      	cmp	r4, #0
 8005b50:	d0dd      	beq.n	8005b0e <sniprintf+0x16>
 8005b52:	2200      	movs	r2, #0
 8005b54:	9b02      	ldr	r3, [sp, #8]
 8005b56:	701a      	strb	r2, [r3, #0]
 8005b58:	e7d9      	b.n	8005b0e <sniprintf+0x16>
 8005b5a:	bf00      	nop
 8005b5c:	20000010 	.word	0x20000010

08005b60 <quorem>:
 8005b60:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b64:	6903      	ldr	r3, [r0, #16]
 8005b66:	690c      	ldr	r4, [r1, #16]
 8005b68:	4680      	mov	r8, r0
 8005b6a:	42a3      	cmp	r3, r4
 8005b6c:	f2c0 8084 	blt.w	8005c78 <quorem+0x118>
 8005b70:	3c01      	subs	r4, #1
 8005b72:	f101 0714 	add.w	r7, r1, #20
 8005b76:	f100 0614 	add.w	r6, r0, #20
 8005b7a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8005b7e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8005b82:	3501      	adds	r5, #1
 8005b84:	fbb0 f5f5 	udiv	r5, r0, r5
 8005b88:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8005b8c:	eb06 030c 	add.w	r3, r6, ip
 8005b90:	eb07 090c 	add.w	r9, r7, ip
 8005b94:	9301      	str	r3, [sp, #4]
 8005b96:	b39d      	cbz	r5, 8005c00 <quorem+0xa0>
 8005b98:	f04f 0a00 	mov.w	sl, #0
 8005b9c:	4638      	mov	r0, r7
 8005b9e:	46b6      	mov	lr, r6
 8005ba0:	46d3      	mov	fp, sl
 8005ba2:	f850 2b04 	ldr.w	r2, [r0], #4
 8005ba6:	b293      	uxth	r3, r2
 8005ba8:	fb05 a303 	mla	r3, r5, r3, sl
 8005bac:	0c12      	lsrs	r2, r2, #16
 8005bae:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005bb2:	fb05 a202 	mla	r2, r5, r2, sl
 8005bb6:	b29b      	uxth	r3, r3
 8005bb8:	ebab 0303 	sub.w	r3, fp, r3
 8005bbc:	f8de b000 	ldr.w	fp, [lr]
 8005bc0:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8005bc4:	fa1f fb8b 	uxth.w	fp, fp
 8005bc8:	445b      	add	r3, fp
 8005bca:	fa1f fb82 	uxth.w	fp, r2
 8005bce:	f8de 2000 	ldr.w	r2, [lr]
 8005bd2:	4581      	cmp	r9, r0
 8005bd4:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8005bd8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005bdc:	b29b      	uxth	r3, r3
 8005bde:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005be2:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8005be6:	f84e 3b04 	str.w	r3, [lr], #4
 8005bea:	d2da      	bcs.n	8005ba2 <quorem+0x42>
 8005bec:	f856 300c 	ldr.w	r3, [r6, ip]
 8005bf0:	b933      	cbnz	r3, 8005c00 <quorem+0xa0>
 8005bf2:	9b01      	ldr	r3, [sp, #4]
 8005bf4:	3b04      	subs	r3, #4
 8005bf6:	429e      	cmp	r6, r3
 8005bf8:	461a      	mov	r2, r3
 8005bfa:	d331      	bcc.n	8005c60 <quorem+0x100>
 8005bfc:	f8c8 4010 	str.w	r4, [r8, #16]
 8005c00:	4640      	mov	r0, r8
 8005c02:	f001 f829 	bl	8006c58 <__mcmp>
 8005c06:	2800      	cmp	r0, #0
 8005c08:	db26      	blt.n	8005c58 <quorem+0xf8>
 8005c0a:	4630      	mov	r0, r6
 8005c0c:	f04f 0c00 	mov.w	ip, #0
 8005c10:	3501      	adds	r5, #1
 8005c12:	f857 1b04 	ldr.w	r1, [r7], #4
 8005c16:	f8d0 e000 	ldr.w	lr, [r0]
 8005c1a:	b28b      	uxth	r3, r1
 8005c1c:	ebac 0303 	sub.w	r3, ip, r3
 8005c20:	fa1f f28e 	uxth.w	r2, lr
 8005c24:	4413      	add	r3, r2
 8005c26:	0c0a      	lsrs	r2, r1, #16
 8005c28:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005c2c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005c30:	b29b      	uxth	r3, r3
 8005c32:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005c36:	45b9      	cmp	r9, r7
 8005c38:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005c3c:	f840 3b04 	str.w	r3, [r0], #4
 8005c40:	d2e7      	bcs.n	8005c12 <quorem+0xb2>
 8005c42:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8005c46:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8005c4a:	b92a      	cbnz	r2, 8005c58 <quorem+0xf8>
 8005c4c:	3b04      	subs	r3, #4
 8005c4e:	429e      	cmp	r6, r3
 8005c50:	461a      	mov	r2, r3
 8005c52:	d30b      	bcc.n	8005c6c <quorem+0x10c>
 8005c54:	f8c8 4010 	str.w	r4, [r8, #16]
 8005c58:	4628      	mov	r0, r5
 8005c5a:	b003      	add	sp, #12
 8005c5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c60:	6812      	ldr	r2, [r2, #0]
 8005c62:	3b04      	subs	r3, #4
 8005c64:	2a00      	cmp	r2, #0
 8005c66:	d1c9      	bne.n	8005bfc <quorem+0x9c>
 8005c68:	3c01      	subs	r4, #1
 8005c6a:	e7c4      	b.n	8005bf6 <quorem+0x96>
 8005c6c:	6812      	ldr	r2, [r2, #0]
 8005c6e:	3b04      	subs	r3, #4
 8005c70:	2a00      	cmp	r2, #0
 8005c72:	d1ef      	bne.n	8005c54 <quorem+0xf4>
 8005c74:	3c01      	subs	r4, #1
 8005c76:	e7ea      	b.n	8005c4e <quorem+0xee>
 8005c78:	2000      	movs	r0, #0
 8005c7a:	e7ee      	b.n	8005c5a <quorem+0xfa>
 8005c7c:	0000      	movs	r0, r0
	...

08005c80 <_dtoa_r>:
 8005c80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c84:	4616      	mov	r6, r2
 8005c86:	461f      	mov	r7, r3
 8005c88:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005c8a:	b095      	sub	sp, #84	; 0x54
 8005c8c:	4604      	mov	r4, r0
 8005c8e:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 8005c92:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8005c96:	b93d      	cbnz	r5, 8005ca8 <_dtoa_r+0x28>
 8005c98:	2010      	movs	r0, #16
 8005c9a:	f000 fdb3 	bl	8006804 <malloc>
 8005c9e:	6260      	str	r0, [r4, #36]	; 0x24
 8005ca0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005ca4:	6005      	str	r5, [r0, #0]
 8005ca6:	60c5      	str	r5, [r0, #12]
 8005ca8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005caa:	6819      	ldr	r1, [r3, #0]
 8005cac:	b151      	cbz	r1, 8005cc4 <_dtoa_r+0x44>
 8005cae:	685a      	ldr	r2, [r3, #4]
 8005cb0:	2301      	movs	r3, #1
 8005cb2:	4093      	lsls	r3, r2
 8005cb4:	604a      	str	r2, [r1, #4]
 8005cb6:	608b      	str	r3, [r1, #8]
 8005cb8:	4620      	mov	r0, r4
 8005cba:	f000 fded 	bl	8006898 <_Bfree>
 8005cbe:	2200      	movs	r2, #0
 8005cc0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005cc2:	601a      	str	r2, [r3, #0]
 8005cc4:	1e3b      	subs	r3, r7, #0
 8005cc6:	bfaf      	iteee	ge
 8005cc8:	2300      	movge	r3, #0
 8005cca:	2201      	movlt	r2, #1
 8005ccc:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005cd0:	9303      	strlt	r3, [sp, #12]
 8005cd2:	bfac      	ite	ge
 8005cd4:	f8c8 3000 	strge.w	r3, [r8]
 8005cd8:	f8c8 2000 	strlt.w	r2, [r8]
 8005cdc:	4bae      	ldr	r3, [pc, #696]	; (8005f98 <_dtoa_r+0x318>)
 8005cde:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8005ce2:	ea33 0308 	bics.w	r3, r3, r8
 8005ce6:	d11b      	bne.n	8005d20 <_dtoa_r+0xa0>
 8005ce8:	f242 730f 	movw	r3, #9999	; 0x270f
 8005cec:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005cee:	6013      	str	r3, [r2, #0]
 8005cf0:	9b02      	ldr	r3, [sp, #8]
 8005cf2:	b923      	cbnz	r3, 8005cfe <_dtoa_r+0x7e>
 8005cf4:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8005cf8:	2800      	cmp	r0, #0
 8005cfa:	f000 8545 	beq.w	8006788 <_dtoa_r+0xb08>
 8005cfe:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005d00:	b953      	cbnz	r3, 8005d18 <_dtoa_r+0x98>
 8005d02:	4ba6      	ldr	r3, [pc, #664]	; (8005f9c <_dtoa_r+0x31c>)
 8005d04:	e021      	b.n	8005d4a <_dtoa_r+0xca>
 8005d06:	4ba6      	ldr	r3, [pc, #664]	; (8005fa0 <_dtoa_r+0x320>)
 8005d08:	9306      	str	r3, [sp, #24]
 8005d0a:	3308      	adds	r3, #8
 8005d0c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8005d0e:	6013      	str	r3, [r2, #0]
 8005d10:	9806      	ldr	r0, [sp, #24]
 8005d12:	b015      	add	sp, #84	; 0x54
 8005d14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d18:	4ba0      	ldr	r3, [pc, #640]	; (8005f9c <_dtoa_r+0x31c>)
 8005d1a:	9306      	str	r3, [sp, #24]
 8005d1c:	3303      	adds	r3, #3
 8005d1e:	e7f5      	b.n	8005d0c <_dtoa_r+0x8c>
 8005d20:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005d24:	2200      	movs	r2, #0
 8005d26:	2300      	movs	r3, #0
 8005d28:	4630      	mov	r0, r6
 8005d2a:	4639      	mov	r1, r7
 8005d2c:	f7fa fe3c 	bl	80009a8 <__aeabi_dcmpeq>
 8005d30:	4682      	mov	sl, r0
 8005d32:	b160      	cbz	r0, 8005d4e <_dtoa_r+0xce>
 8005d34:	2301      	movs	r3, #1
 8005d36:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005d38:	6013      	str	r3, [r2, #0]
 8005d3a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	f000 8520 	beq.w	8006782 <_dtoa_r+0xb02>
 8005d42:	4b98      	ldr	r3, [pc, #608]	; (8005fa4 <_dtoa_r+0x324>)
 8005d44:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8005d46:	6013      	str	r3, [r2, #0]
 8005d48:	3b01      	subs	r3, #1
 8005d4a:	9306      	str	r3, [sp, #24]
 8005d4c:	e7e0      	b.n	8005d10 <_dtoa_r+0x90>
 8005d4e:	ab12      	add	r3, sp, #72	; 0x48
 8005d50:	9301      	str	r3, [sp, #4]
 8005d52:	ab13      	add	r3, sp, #76	; 0x4c
 8005d54:	9300      	str	r3, [sp, #0]
 8005d56:	4632      	mov	r2, r6
 8005d58:	463b      	mov	r3, r7
 8005d5a:	4620      	mov	r0, r4
 8005d5c:	f000 fff4 	bl	8006d48 <__d2b>
 8005d60:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8005d64:	4683      	mov	fp, r0
 8005d66:	2d00      	cmp	r5, #0
 8005d68:	d07d      	beq.n	8005e66 <_dtoa_r+0x1e6>
 8005d6a:	46b0      	mov	r8, r6
 8005d6c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005d70:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 8005d74:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 8005d78:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005d7c:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 8005d80:	2200      	movs	r2, #0
 8005d82:	4b89      	ldr	r3, [pc, #548]	; (8005fa8 <_dtoa_r+0x328>)
 8005d84:	4640      	mov	r0, r8
 8005d86:	4649      	mov	r1, r9
 8005d88:	f7fa f9ee 	bl	8000168 <__aeabi_dsub>
 8005d8c:	a37c      	add	r3, pc, #496	; (adr r3, 8005f80 <_dtoa_r+0x300>)
 8005d8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d92:	f7fa fba1 	bl	80004d8 <__aeabi_dmul>
 8005d96:	a37c      	add	r3, pc, #496	; (adr r3, 8005f88 <_dtoa_r+0x308>)
 8005d98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d9c:	f7fa f9e6 	bl	800016c <__adddf3>
 8005da0:	4606      	mov	r6, r0
 8005da2:	4628      	mov	r0, r5
 8005da4:	460f      	mov	r7, r1
 8005da6:	f7fa fb2d 	bl	8000404 <__aeabi_i2d>
 8005daa:	a379      	add	r3, pc, #484	; (adr r3, 8005f90 <_dtoa_r+0x310>)
 8005dac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005db0:	f7fa fb92 	bl	80004d8 <__aeabi_dmul>
 8005db4:	4602      	mov	r2, r0
 8005db6:	460b      	mov	r3, r1
 8005db8:	4630      	mov	r0, r6
 8005dba:	4639      	mov	r1, r7
 8005dbc:	f7fa f9d6 	bl	800016c <__adddf3>
 8005dc0:	4606      	mov	r6, r0
 8005dc2:	460f      	mov	r7, r1
 8005dc4:	f7fa fe38 	bl	8000a38 <__aeabi_d2iz>
 8005dc8:	2200      	movs	r2, #0
 8005dca:	4682      	mov	sl, r0
 8005dcc:	2300      	movs	r3, #0
 8005dce:	4630      	mov	r0, r6
 8005dd0:	4639      	mov	r1, r7
 8005dd2:	f7fa fdf3 	bl	80009bc <__aeabi_dcmplt>
 8005dd6:	b148      	cbz	r0, 8005dec <_dtoa_r+0x16c>
 8005dd8:	4650      	mov	r0, sl
 8005dda:	f7fa fb13 	bl	8000404 <__aeabi_i2d>
 8005dde:	4632      	mov	r2, r6
 8005de0:	463b      	mov	r3, r7
 8005de2:	f7fa fde1 	bl	80009a8 <__aeabi_dcmpeq>
 8005de6:	b908      	cbnz	r0, 8005dec <_dtoa_r+0x16c>
 8005de8:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005dec:	f1ba 0f16 	cmp.w	sl, #22
 8005df0:	d85a      	bhi.n	8005ea8 <_dtoa_r+0x228>
 8005df2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005df6:	496d      	ldr	r1, [pc, #436]	; (8005fac <_dtoa_r+0x32c>)
 8005df8:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8005dfc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005e00:	f7fa fdfa 	bl	80009f8 <__aeabi_dcmpgt>
 8005e04:	2800      	cmp	r0, #0
 8005e06:	d051      	beq.n	8005eac <_dtoa_r+0x22c>
 8005e08:	2300      	movs	r3, #0
 8005e0a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005e0e:	930d      	str	r3, [sp, #52]	; 0x34
 8005e10:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005e12:	1b5d      	subs	r5, r3, r5
 8005e14:	1e6b      	subs	r3, r5, #1
 8005e16:	9307      	str	r3, [sp, #28]
 8005e18:	bf43      	ittte	mi
 8005e1a:	2300      	movmi	r3, #0
 8005e1c:	f1c5 0901 	rsbmi	r9, r5, #1
 8005e20:	9307      	strmi	r3, [sp, #28]
 8005e22:	f04f 0900 	movpl.w	r9, #0
 8005e26:	f1ba 0f00 	cmp.w	sl, #0
 8005e2a:	db41      	blt.n	8005eb0 <_dtoa_r+0x230>
 8005e2c:	9b07      	ldr	r3, [sp, #28]
 8005e2e:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8005e32:	4453      	add	r3, sl
 8005e34:	9307      	str	r3, [sp, #28]
 8005e36:	2300      	movs	r3, #0
 8005e38:	9308      	str	r3, [sp, #32]
 8005e3a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005e3c:	2b09      	cmp	r3, #9
 8005e3e:	f200 808f 	bhi.w	8005f60 <_dtoa_r+0x2e0>
 8005e42:	2b05      	cmp	r3, #5
 8005e44:	bfc4      	itt	gt
 8005e46:	3b04      	subgt	r3, #4
 8005e48:	931e      	strgt	r3, [sp, #120]	; 0x78
 8005e4a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005e4c:	bfc8      	it	gt
 8005e4e:	2500      	movgt	r5, #0
 8005e50:	f1a3 0302 	sub.w	r3, r3, #2
 8005e54:	bfd8      	it	le
 8005e56:	2501      	movle	r5, #1
 8005e58:	2b03      	cmp	r3, #3
 8005e5a:	f200 808d 	bhi.w	8005f78 <_dtoa_r+0x2f8>
 8005e5e:	e8df f003 	tbb	[pc, r3]
 8005e62:	7d7b      	.short	0x7d7b
 8005e64:	6f2f      	.short	0x6f2f
 8005e66:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8005e6a:	441d      	add	r5, r3
 8005e6c:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8005e70:	2820      	cmp	r0, #32
 8005e72:	dd13      	ble.n	8005e9c <_dtoa_r+0x21c>
 8005e74:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8005e78:	9b02      	ldr	r3, [sp, #8]
 8005e7a:	fa08 f800 	lsl.w	r8, r8, r0
 8005e7e:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8005e82:	fa23 f000 	lsr.w	r0, r3, r0
 8005e86:	ea48 0000 	orr.w	r0, r8, r0
 8005e8a:	f7fa faab 	bl	80003e4 <__aeabi_ui2d>
 8005e8e:	2301      	movs	r3, #1
 8005e90:	4680      	mov	r8, r0
 8005e92:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 8005e96:	3d01      	subs	r5, #1
 8005e98:	9310      	str	r3, [sp, #64]	; 0x40
 8005e9a:	e771      	b.n	8005d80 <_dtoa_r+0x100>
 8005e9c:	9b02      	ldr	r3, [sp, #8]
 8005e9e:	f1c0 0020 	rsb	r0, r0, #32
 8005ea2:	fa03 f000 	lsl.w	r0, r3, r0
 8005ea6:	e7f0      	b.n	8005e8a <_dtoa_r+0x20a>
 8005ea8:	2301      	movs	r3, #1
 8005eaa:	e7b0      	b.n	8005e0e <_dtoa_r+0x18e>
 8005eac:	900d      	str	r0, [sp, #52]	; 0x34
 8005eae:	e7af      	b.n	8005e10 <_dtoa_r+0x190>
 8005eb0:	f1ca 0300 	rsb	r3, sl, #0
 8005eb4:	9308      	str	r3, [sp, #32]
 8005eb6:	2300      	movs	r3, #0
 8005eb8:	eba9 090a 	sub.w	r9, r9, sl
 8005ebc:	930c      	str	r3, [sp, #48]	; 0x30
 8005ebe:	e7bc      	b.n	8005e3a <_dtoa_r+0x1ba>
 8005ec0:	2301      	movs	r3, #1
 8005ec2:	9309      	str	r3, [sp, #36]	; 0x24
 8005ec4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	dd74      	ble.n	8005fb4 <_dtoa_r+0x334>
 8005eca:	4698      	mov	r8, r3
 8005ecc:	9304      	str	r3, [sp, #16]
 8005ece:	2200      	movs	r2, #0
 8005ed0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005ed2:	6072      	str	r2, [r6, #4]
 8005ed4:	2204      	movs	r2, #4
 8005ed6:	f102 0014 	add.w	r0, r2, #20
 8005eda:	4298      	cmp	r0, r3
 8005edc:	6871      	ldr	r1, [r6, #4]
 8005ede:	d96e      	bls.n	8005fbe <_dtoa_r+0x33e>
 8005ee0:	4620      	mov	r0, r4
 8005ee2:	f000 fca5 	bl	8006830 <_Balloc>
 8005ee6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005ee8:	6030      	str	r0, [r6, #0]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f1b8 0f0e 	cmp.w	r8, #14
 8005ef0:	9306      	str	r3, [sp, #24]
 8005ef2:	f200 80ed 	bhi.w	80060d0 <_dtoa_r+0x450>
 8005ef6:	2d00      	cmp	r5, #0
 8005ef8:	f000 80ea 	beq.w	80060d0 <_dtoa_r+0x450>
 8005efc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005f00:	f1ba 0f00 	cmp.w	sl, #0
 8005f04:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8005f08:	dd77      	ble.n	8005ffa <_dtoa_r+0x37a>
 8005f0a:	4a28      	ldr	r2, [pc, #160]	; (8005fac <_dtoa_r+0x32c>)
 8005f0c:	f00a 030f 	and.w	r3, sl, #15
 8005f10:	ea4f 162a 	mov.w	r6, sl, asr #4
 8005f14:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005f18:	06f0      	lsls	r0, r6, #27
 8005f1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f1e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8005f22:	d568      	bpl.n	8005ff6 <_dtoa_r+0x376>
 8005f24:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8005f28:	4b21      	ldr	r3, [pc, #132]	; (8005fb0 <_dtoa_r+0x330>)
 8005f2a:	2503      	movs	r5, #3
 8005f2c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005f30:	f7fa fbfc 	bl	800072c <__aeabi_ddiv>
 8005f34:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005f38:	f006 060f 	and.w	r6, r6, #15
 8005f3c:	4f1c      	ldr	r7, [pc, #112]	; (8005fb0 <_dtoa_r+0x330>)
 8005f3e:	e04f      	b.n	8005fe0 <_dtoa_r+0x360>
 8005f40:	2301      	movs	r3, #1
 8005f42:	9309      	str	r3, [sp, #36]	; 0x24
 8005f44:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005f46:	4453      	add	r3, sl
 8005f48:	f103 0801 	add.w	r8, r3, #1
 8005f4c:	9304      	str	r3, [sp, #16]
 8005f4e:	4643      	mov	r3, r8
 8005f50:	2b01      	cmp	r3, #1
 8005f52:	bfb8      	it	lt
 8005f54:	2301      	movlt	r3, #1
 8005f56:	e7ba      	b.n	8005ece <_dtoa_r+0x24e>
 8005f58:	2300      	movs	r3, #0
 8005f5a:	e7b2      	b.n	8005ec2 <_dtoa_r+0x242>
 8005f5c:	2300      	movs	r3, #0
 8005f5e:	e7f0      	b.n	8005f42 <_dtoa_r+0x2c2>
 8005f60:	2501      	movs	r5, #1
 8005f62:	2300      	movs	r3, #0
 8005f64:	9509      	str	r5, [sp, #36]	; 0x24
 8005f66:	931e      	str	r3, [sp, #120]	; 0x78
 8005f68:	f04f 33ff 	mov.w	r3, #4294967295
 8005f6c:	2200      	movs	r2, #0
 8005f6e:	9304      	str	r3, [sp, #16]
 8005f70:	4698      	mov	r8, r3
 8005f72:	2312      	movs	r3, #18
 8005f74:	921f      	str	r2, [sp, #124]	; 0x7c
 8005f76:	e7aa      	b.n	8005ece <_dtoa_r+0x24e>
 8005f78:	2301      	movs	r3, #1
 8005f7a:	9309      	str	r3, [sp, #36]	; 0x24
 8005f7c:	e7f4      	b.n	8005f68 <_dtoa_r+0x2e8>
 8005f7e:	bf00      	nop
 8005f80:	636f4361 	.word	0x636f4361
 8005f84:	3fd287a7 	.word	0x3fd287a7
 8005f88:	8b60c8b3 	.word	0x8b60c8b3
 8005f8c:	3fc68a28 	.word	0x3fc68a28
 8005f90:	509f79fb 	.word	0x509f79fb
 8005f94:	3fd34413 	.word	0x3fd34413
 8005f98:	7ff00000 	.word	0x7ff00000
 8005f9c:	08008451 	.word	0x08008451
 8005fa0:	08008448 	.word	0x08008448
 8005fa4:	08008425 	.word	0x08008425
 8005fa8:	3ff80000 	.word	0x3ff80000
 8005fac:	08008480 	.word	0x08008480
 8005fb0:	08008458 	.word	0x08008458
 8005fb4:	2301      	movs	r3, #1
 8005fb6:	9304      	str	r3, [sp, #16]
 8005fb8:	4698      	mov	r8, r3
 8005fba:	461a      	mov	r2, r3
 8005fbc:	e7da      	b.n	8005f74 <_dtoa_r+0x2f4>
 8005fbe:	3101      	adds	r1, #1
 8005fc0:	6071      	str	r1, [r6, #4]
 8005fc2:	0052      	lsls	r2, r2, #1
 8005fc4:	e787      	b.n	8005ed6 <_dtoa_r+0x256>
 8005fc6:	07f1      	lsls	r1, r6, #31
 8005fc8:	d508      	bpl.n	8005fdc <_dtoa_r+0x35c>
 8005fca:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005fce:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005fd2:	f7fa fa81 	bl	80004d8 <__aeabi_dmul>
 8005fd6:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005fda:	3501      	adds	r5, #1
 8005fdc:	1076      	asrs	r6, r6, #1
 8005fde:	3708      	adds	r7, #8
 8005fe0:	2e00      	cmp	r6, #0
 8005fe2:	d1f0      	bne.n	8005fc6 <_dtoa_r+0x346>
 8005fe4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005fe8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005fec:	f7fa fb9e 	bl	800072c <__aeabi_ddiv>
 8005ff0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005ff4:	e01b      	b.n	800602e <_dtoa_r+0x3ae>
 8005ff6:	2502      	movs	r5, #2
 8005ff8:	e7a0      	b.n	8005f3c <_dtoa_r+0x2bc>
 8005ffa:	f000 80a4 	beq.w	8006146 <_dtoa_r+0x4c6>
 8005ffe:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8006002:	f1ca 0600 	rsb	r6, sl, #0
 8006006:	4ba0      	ldr	r3, [pc, #640]	; (8006288 <_dtoa_r+0x608>)
 8006008:	f006 020f 	and.w	r2, r6, #15
 800600c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006010:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006014:	f7fa fa60 	bl	80004d8 <__aeabi_dmul>
 8006018:	2502      	movs	r5, #2
 800601a:	2300      	movs	r3, #0
 800601c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006020:	4f9a      	ldr	r7, [pc, #616]	; (800628c <_dtoa_r+0x60c>)
 8006022:	1136      	asrs	r6, r6, #4
 8006024:	2e00      	cmp	r6, #0
 8006026:	f040 8083 	bne.w	8006130 <_dtoa_r+0x4b0>
 800602a:	2b00      	cmp	r3, #0
 800602c:	d1e0      	bne.n	8005ff0 <_dtoa_r+0x370>
 800602e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006030:	2b00      	cmp	r3, #0
 8006032:	f000 808a 	beq.w	800614a <_dtoa_r+0x4ca>
 8006036:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800603a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800603e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006042:	2200      	movs	r2, #0
 8006044:	4b92      	ldr	r3, [pc, #584]	; (8006290 <_dtoa_r+0x610>)
 8006046:	f7fa fcb9 	bl	80009bc <__aeabi_dcmplt>
 800604a:	2800      	cmp	r0, #0
 800604c:	d07d      	beq.n	800614a <_dtoa_r+0x4ca>
 800604e:	f1b8 0f00 	cmp.w	r8, #0
 8006052:	d07a      	beq.n	800614a <_dtoa_r+0x4ca>
 8006054:	9b04      	ldr	r3, [sp, #16]
 8006056:	2b00      	cmp	r3, #0
 8006058:	dd36      	ble.n	80060c8 <_dtoa_r+0x448>
 800605a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800605e:	2200      	movs	r2, #0
 8006060:	4b8c      	ldr	r3, [pc, #560]	; (8006294 <_dtoa_r+0x614>)
 8006062:	f7fa fa39 	bl	80004d8 <__aeabi_dmul>
 8006066:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800606a:	9e04      	ldr	r6, [sp, #16]
 800606c:	f10a 37ff 	add.w	r7, sl, #4294967295
 8006070:	3501      	adds	r5, #1
 8006072:	4628      	mov	r0, r5
 8006074:	f7fa f9c6 	bl	8000404 <__aeabi_i2d>
 8006078:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800607c:	f7fa fa2c 	bl	80004d8 <__aeabi_dmul>
 8006080:	2200      	movs	r2, #0
 8006082:	4b85      	ldr	r3, [pc, #532]	; (8006298 <_dtoa_r+0x618>)
 8006084:	f7fa f872 	bl	800016c <__adddf3>
 8006088:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 800608c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006090:	950b      	str	r5, [sp, #44]	; 0x2c
 8006092:	2e00      	cmp	r6, #0
 8006094:	d15c      	bne.n	8006150 <_dtoa_r+0x4d0>
 8006096:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800609a:	2200      	movs	r2, #0
 800609c:	4b7f      	ldr	r3, [pc, #508]	; (800629c <_dtoa_r+0x61c>)
 800609e:	f7fa f863 	bl	8000168 <__aeabi_dsub>
 80060a2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80060a4:	462b      	mov	r3, r5
 80060a6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80060aa:	f7fa fca5 	bl	80009f8 <__aeabi_dcmpgt>
 80060ae:	2800      	cmp	r0, #0
 80060b0:	f040 8281 	bne.w	80065b6 <_dtoa_r+0x936>
 80060b4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80060b8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80060ba:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80060be:	f7fa fc7d 	bl	80009bc <__aeabi_dcmplt>
 80060c2:	2800      	cmp	r0, #0
 80060c4:	f040 8275 	bne.w	80065b2 <_dtoa_r+0x932>
 80060c8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80060cc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80060d0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	f2c0 814b 	blt.w	800636e <_dtoa_r+0x6ee>
 80060d8:	f1ba 0f0e 	cmp.w	sl, #14
 80060dc:	f300 8147 	bgt.w	800636e <_dtoa_r+0x6ee>
 80060e0:	4b69      	ldr	r3, [pc, #420]	; (8006288 <_dtoa_r+0x608>)
 80060e2:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80060e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060ea:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80060ee:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	f280 80d7 	bge.w	80062a4 <_dtoa_r+0x624>
 80060f6:	f1b8 0f00 	cmp.w	r8, #0
 80060fa:	f300 80d3 	bgt.w	80062a4 <_dtoa_r+0x624>
 80060fe:	f040 8257 	bne.w	80065b0 <_dtoa_r+0x930>
 8006102:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006106:	2200      	movs	r2, #0
 8006108:	4b64      	ldr	r3, [pc, #400]	; (800629c <_dtoa_r+0x61c>)
 800610a:	f7fa f9e5 	bl	80004d8 <__aeabi_dmul>
 800610e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006112:	f7fa fc67 	bl	80009e4 <__aeabi_dcmpge>
 8006116:	4646      	mov	r6, r8
 8006118:	4647      	mov	r7, r8
 800611a:	2800      	cmp	r0, #0
 800611c:	f040 822d 	bne.w	800657a <_dtoa_r+0x8fa>
 8006120:	9b06      	ldr	r3, [sp, #24]
 8006122:	9a06      	ldr	r2, [sp, #24]
 8006124:	1c5d      	adds	r5, r3, #1
 8006126:	2331      	movs	r3, #49	; 0x31
 8006128:	f10a 0a01 	add.w	sl, sl, #1
 800612c:	7013      	strb	r3, [r2, #0]
 800612e:	e228      	b.n	8006582 <_dtoa_r+0x902>
 8006130:	07f2      	lsls	r2, r6, #31
 8006132:	d505      	bpl.n	8006140 <_dtoa_r+0x4c0>
 8006134:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006138:	f7fa f9ce 	bl	80004d8 <__aeabi_dmul>
 800613c:	2301      	movs	r3, #1
 800613e:	3501      	adds	r5, #1
 8006140:	1076      	asrs	r6, r6, #1
 8006142:	3708      	adds	r7, #8
 8006144:	e76e      	b.n	8006024 <_dtoa_r+0x3a4>
 8006146:	2502      	movs	r5, #2
 8006148:	e771      	b.n	800602e <_dtoa_r+0x3ae>
 800614a:	4657      	mov	r7, sl
 800614c:	4646      	mov	r6, r8
 800614e:	e790      	b.n	8006072 <_dtoa_r+0x3f2>
 8006150:	4b4d      	ldr	r3, [pc, #308]	; (8006288 <_dtoa_r+0x608>)
 8006152:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006156:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800615a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800615c:	2b00      	cmp	r3, #0
 800615e:	d048      	beq.n	80061f2 <_dtoa_r+0x572>
 8006160:	4602      	mov	r2, r0
 8006162:	460b      	mov	r3, r1
 8006164:	2000      	movs	r0, #0
 8006166:	494e      	ldr	r1, [pc, #312]	; (80062a0 <_dtoa_r+0x620>)
 8006168:	f7fa fae0 	bl	800072c <__aeabi_ddiv>
 800616c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006170:	f7f9 fffa 	bl	8000168 <__aeabi_dsub>
 8006174:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006178:	9d06      	ldr	r5, [sp, #24]
 800617a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800617e:	f7fa fc5b 	bl	8000a38 <__aeabi_d2iz>
 8006182:	9011      	str	r0, [sp, #68]	; 0x44
 8006184:	f7fa f93e 	bl	8000404 <__aeabi_i2d>
 8006188:	4602      	mov	r2, r0
 800618a:	460b      	mov	r3, r1
 800618c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006190:	f7f9 ffea 	bl	8000168 <__aeabi_dsub>
 8006194:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006196:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800619a:	3330      	adds	r3, #48	; 0x30
 800619c:	f805 3b01 	strb.w	r3, [r5], #1
 80061a0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80061a4:	f7fa fc0a 	bl	80009bc <__aeabi_dcmplt>
 80061a8:	2800      	cmp	r0, #0
 80061aa:	d163      	bne.n	8006274 <_dtoa_r+0x5f4>
 80061ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80061b0:	2000      	movs	r0, #0
 80061b2:	4937      	ldr	r1, [pc, #220]	; (8006290 <_dtoa_r+0x610>)
 80061b4:	f7f9 ffd8 	bl	8000168 <__aeabi_dsub>
 80061b8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80061bc:	f7fa fbfe 	bl	80009bc <__aeabi_dcmplt>
 80061c0:	2800      	cmp	r0, #0
 80061c2:	f040 80b5 	bne.w	8006330 <_dtoa_r+0x6b0>
 80061c6:	9b06      	ldr	r3, [sp, #24]
 80061c8:	1aeb      	subs	r3, r5, r3
 80061ca:	429e      	cmp	r6, r3
 80061cc:	f77f af7c 	ble.w	80060c8 <_dtoa_r+0x448>
 80061d0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80061d4:	2200      	movs	r2, #0
 80061d6:	4b2f      	ldr	r3, [pc, #188]	; (8006294 <_dtoa_r+0x614>)
 80061d8:	f7fa f97e 	bl	80004d8 <__aeabi_dmul>
 80061dc:	2200      	movs	r2, #0
 80061de:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80061e2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80061e6:	4b2b      	ldr	r3, [pc, #172]	; (8006294 <_dtoa_r+0x614>)
 80061e8:	f7fa f976 	bl	80004d8 <__aeabi_dmul>
 80061ec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80061f0:	e7c3      	b.n	800617a <_dtoa_r+0x4fa>
 80061f2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80061f6:	f7fa f96f 	bl	80004d8 <__aeabi_dmul>
 80061fa:	9b06      	ldr	r3, [sp, #24]
 80061fc:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006200:	199d      	adds	r5, r3, r6
 8006202:	461e      	mov	r6, r3
 8006204:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006208:	f7fa fc16 	bl	8000a38 <__aeabi_d2iz>
 800620c:	9011      	str	r0, [sp, #68]	; 0x44
 800620e:	f7fa f8f9 	bl	8000404 <__aeabi_i2d>
 8006212:	4602      	mov	r2, r0
 8006214:	460b      	mov	r3, r1
 8006216:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800621a:	f7f9 ffa5 	bl	8000168 <__aeabi_dsub>
 800621e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006220:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006224:	3330      	adds	r3, #48	; 0x30
 8006226:	f806 3b01 	strb.w	r3, [r6], #1
 800622a:	42ae      	cmp	r6, r5
 800622c:	f04f 0200 	mov.w	r2, #0
 8006230:	d124      	bne.n	800627c <_dtoa_r+0x5fc>
 8006232:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006236:	4b1a      	ldr	r3, [pc, #104]	; (80062a0 <_dtoa_r+0x620>)
 8006238:	f7f9 ff98 	bl	800016c <__adddf3>
 800623c:	4602      	mov	r2, r0
 800623e:	460b      	mov	r3, r1
 8006240:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006244:	f7fa fbd8 	bl	80009f8 <__aeabi_dcmpgt>
 8006248:	2800      	cmp	r0, #0
 800624a:	d171      	bne.n	8006330 <_dtoa_r+0x6b0>
 800624c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006250:	2000      	movs	r0, #0
 8006252:	4913      	ldr	r1, [pc, #76]	; (80062a0 <_dtoa_r+0x620>)
 8006254:	f7f9 ff88 	bl	8000168 <__aeabi_dsub>
 8006258:	4602      	mov	r2, r0
 800625a:	460b      	mov	r3, r1
 800625c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006260:	f7fa fbac 	bl	80009bc <__aeabi_dcmplt>
 8006264:	2800      	cmp	r0, #0
 8006266:	f43f af2f 	beq.w	80060c8 <_dtoa_r+0x448>
 800626a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800626e:	1e6a      	subs	r2, r5, #1
 8006270:	2b30      	cmp	r3, #48	; 0x30
 8006272:	d001      	beq.n	8006278 <_dtoa_r+0x5f8>
 8006274:	46ba      	mov	sl, r7
 8006276:	e04a      	b.n	800630e <_dtoa_r+0x68e>
 8006278:	4615      	mov	r5, r2
 800627a:	e7f6      	b.n	800626a <_dtoa_r+0x5ea>
 800627c:	4b05      	ldr	r3, [pc, #20]	; (8006294 <_dtoa_r+0x614>)
 800627e:	f7fa f92b 	bl	80004d8 <__aeabi_dmul>
 8006282:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006286:	e7bd      	b.n	8006204 <_dtoa_r+0x584>
 8006288:	08008480 	.word	0x08008480
 800628c:	08008458 	.word	0x08008458
 8006290:	3ff00000 	.word	0x3ff00000
 8006294:	40240000 	.word	0x40240000
 8006298:	401c0000 	.word	0x401c0000
 800629c:	40140000 	.word	0x40140000
 80062a0:	3fe00000 	.word	0x3fe00000
 80062a4:	9d06      	ldr	r5, [sp, #24]
 80062a6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80062aa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80062ae:	4630      	mov	r0, r6
 80062b0:	4639      	mov	r1, r7
 80062b2:	f7fa fa3b 	bl	800072c <__aeabi_ddiv>
 80062b6:	f7fa fbbf 	bl	8000a38 <__aeabi_d2iz>
 80062ba:	4681      	mov	r9, r0
 80062bc:	f7fa f8a2 	bl	8000404 <__aeabi_i2d>
 80062c0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80062c4:	f7fa f908 	bl	80004d8 <__aeabi_dmul>
 80062c8:	4602      	mov	r2, r0
 80062ca:	460b      	mov	r3, r1
 80062cc:	4630      	mov	r0, r6
 80062ce:	4639      	mov	r1, r7
 80062d0:	f7f9 ff4a 	bl	8000168 <__aeabi_dsub>
 80062d4:	f109 0630 	add.w	r6, r9, #48	; 0x30
 80062d8:	f805 6b01 	strb.w	r6, [r5], #1
 80062dc:	9e06      	ldr	r6, [sp, #24]
 80062de:	4602      	mov	r2, r0
 80062e0:	1bae      	subs	r6, r5, r6
 80062e2:	45b0      	cmp	r8, r6
 80062e4:	460b      	mov	r3, r1
 80062e6:	d135      	bne.n	8006354 <_dtoa_r+0x6d4>
 80062e8:	f7f9 ff40 	bl	800016c <__adddf3>
 80062ec:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80062f0:	4606      	mov	r6, r0
 80062f2:	460f      	mov	r7, r1
 80062f4:	f7fa fb80 	bl	80009f8 <__aeabi_dcmpgt>
 80062f8:	b9c8      	cbnz	r0, 800632e <_dtoa_r+0x6ae>
 80062fa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80062fe:	4630      	mov	r0, r6
 8006300:	4639      	mov	r1, r7
 8006302:	f7fa fb51 	bl	80009a8 <__aeabi_dcmpeq>
 8006306:	b110      	cbz	r0, 800630e <_dtoa_r+0x68e>
 8006308:	f019 0f01 	tst.w	r9, #1
 800630c:	d10f      	bne.n	800632e <_dtoa_r+0x6ae>
 800630e:	4659      	mov	r1, fp
 8006310:	4620      	mov	r0, r4
 8006312:	f000 fac1 	bl	8006898 <_Bfree>
 8006316:	2300      	movs	r3, #0
 8006318:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800631a:	702b      	strb	r3, [r5, #0]
 800631c:	f10a 0301 	add.w	r3, sl, #1
 8006320:	6013      	str	r3, [r2, #0]
 8006322:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006324:	2b00      	cmp	r3, #0
 8006326:	f43f acf3 	beq.w	8005d10 <_dtoa_r+0x90>
 800632a:	601d      	str	r5, [r3, #0]
 800632c:	e4f0      	b.n	8005d10 <_dtoa_r+0x90>
 800632e:	4657      	mov	r7, sl
 8006330:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006334:	1e6b      	subs	r3, r5, #1
 8006336:	2a39      	cmp	r2, #57	; 0x39
 8006338:	d106      	bne.n	8006348 <_dtoa_r+0x6c8>
 800633a:	9a06      	ldr	r2, [sp, #24]
 800633c:	429a      	cmp	r2, r3
 800633e:	d107      	bne.n	8006350 <_dtoa_r+0x6d0>
 8006340:	2330      	movs	r3, #48	; 0x30
 8006342:	7013      	strb	r3, [r2, #0]
 8006344:	4613      	mov	r3, r2
 8006346:	3701      	adds	r7, #1
 8006348:	781a      	ldrb	r2, [r3, #0]
 800634a:	3201      	adds	r2, #1
 800634c:	701a      	strb	r2, [r3, #0]
 800634e:	e791      	b.n	8006274 <_dtoa_r+0x5f4>
 8006350:	461d      	mov	r5, r3
 8006352:	e7ed      	b.n	8006330 <_dtoa_r+0x6b0>
 8006354:	2200      	movs	r2, #0
 8006356:	4b99      	ldr	r3, [pc, #612]	; (80065bc <_dtoa_r+0x93c>)
 8006358:	f7fa f8be 	bl	80004d8 <__aeabi_dmul>
 800635c:	2200      	movs	r2, #0
 800635e:	2300      	movs	r3, #0
 8006360:	4606      	mov	r6, r0
 8006362:	460f      	mov	r7, r1
 8006364:	f7fa fb20 	bl	80009a8 <__aeabi_dcmpeq>
 8006368:	2800      	cmp	r0, #0
 800636a:	d09e      	beq.n	80062aa <_dtoa_r+0x62a>
 800636c:	e7cf      	b.n	800630e <_dtoa_r+0x68e>
 800636e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006370:	2a00      	cmp	r2, #0
 8006372:	f000 8088 	beq.w	8006486 <_dtoa_r+0x806>
 8006376:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8006378:	2a01      	cmp	r2, #1
 800637a:	dc6d      	bgt.n	8006458 <_dtoa_r+0x7d8>
 800637c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800637e:	2a00      	cmp	r2, #0
 8006380:	d066      	beq.n	8006450 <_dtoa_r+0x7d0>
 8006382:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006386:	464d      	mov	r5, r9
 8006388:	9e08      	ldr	r6, [sp, #32]
 800638a:	9a07      	ldr	r2, [sp, #28]
 800638c:	2101      	movs	r1, #1
 800638e:	441a      	add	r2, r3
 8006390:	4620      	mov	r0, r4
 8006392:	4499      	add	r9, r3
 8006394:	9207      	str	r2, [sp, #28]
 8006396:	f000 fb1f 	bl	80069d8 <__i2b>
 800639a:	4607      	mov	r7, r0
 800639c:	2d00      	cmp	r5, #0
 800639e:	dd0b      	ble.n	80063b8 <_dtoa_r+0x738>
 80063a0:	9b07      	ldr	r3, [sp, #28]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	dd08      	ble.n	80063b8 <_dtoa_r+0x738>
 80063a6:	42ab      	cmp	r3, r5
 80063a8:	bfa8      	it	ge
 80063aa:	462b      	movge	r3, r5
 80063ac:	9a07      	ldr	r2, [sp, #28]
 80063ae:	eba9 0903 	sub.w	r9, r9, r3
 80063b2:	1aed      	subs	r5, r5, r3
 80063b4:	1ad3      	subs	r3, r2, r3
 80063b6:	9307      	str	r3, [sp, #28]
 80063b8:	9b08      	ldr	r3, [sp, #32]
 80063ba:	b1eb      	cbz	r3, 80063f8 <_dtoa_r+0x778>
 80063bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d065      	beq.n	800648e <_dtoa_r+0x80e>
 80063c2:	b18e      	cbz	r6, 80063e8 <_dtoa_r+0x768>
 80063c4:	4639      	mov	r1, r7
 80063c6:	4632      	mov	r2, r6
 80063c8:	4620      	mov	r0, r4
 80063ca:	f000 fba3 	bl	8006b14 <__pow5mult>
 80063ce:	465a      	mov	r2, fp
 80063d0:	4601      	mov	r1, r0
 80063d2:	4607      	mov	r7, r0
 80063d4:	4620      	mov	r0, r4
 80063d6:	f000 fb08 	bl	80069ea <__multiply>
 80063da:	4659      	mov	r1, fp
 80063dc:	900a      	str	r0, [sp, #40]	; 0x28
 80063de:	4620      	mov	r0, r4
 80063e0:	f000 fa5a 	bl	8006898 <_Bfree>
 80063e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80063e6:	469b      	mov	fp, r3
 80063e8:	9b08      	ldr	r3, [sp, #32]
 80063ea:	1b9a      	subs	r2, r3, r6
 80063ec:	d004      	beq.n	80063f8 <_dtoa_r+0x778>
 80063ee:	4659      	mov	r1, fp
 80063f0:	4620      	mov	r0, r4
 80063f2:	f000 fb8f 	bl	8006b14 <__pow5mult>
 80063f6:	4683      	mov	fp, r0
 80063f8:	2101      	movs	r1, #1
 80063fa:	4620      	mov	r0, r4
 80063fc:	f000 faec 	bl	80069d8 <__i2b>
 8006400:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006402:	4606      	mov	r6, r0
 8006404:	2b00      	cmp	r3, #0
 8006406:	f000 81c6 	beq.w	8006796 <_dtoa_r+0xb16>
 800640a:	461a      	mov	r2, r3
 800640c:	4601      	mov	r1, r0
 800640e:	4620      	mov	r0, r4
 8006410:	f000 fb80 	bl	8006b14 <__pow5mult>
 8006414:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006416:	4606      	mov	r6, r0
 8006418:	2b01      	cmp	r3, #1
 800641a:	dc3e      	bgt.n	800649a <_dtoa_r+0x81a>
 800641c:	9b02      	ldr	r3, [sp, #8]
 800641e:	2b00      	cmp	r3, #0
 8006420:	d137      	bne.n	8006492 <_dtoa_r+0x812>
 8006422:	9b03      	ldr	r3, [sp, #12]
 8006424:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006428:	2b00      	cmp	r3, #0
 800642a:	d134      	bne.n	8006496 <_dtoa_r+0x816>
 800642c:	9b03      	ldr	r3, [sp, #12]
 800642e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006432:	0d1b      	lsrs	r3, r3, #20
 8006434:	051b      	lsls	r3, r3, #20
 8006436:	b12b      	cbz	r3, 8006444 <_dtoa_r+0x7c4>
 8006438:	9b07      	ldr	r3, [sp, #28]
 800643a:	f109 0901 	add.w	r9, r9, #1
 800643e:	3301      	adds	r3, #1
 8006440:	9307      	str	r3, [sp, #28]
 8006442:	2301      	movs	r3, #1
 8006444:	9308      	str	r3, [sp, #32]
 8006446:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006448:	2b00      	cmp	r3, #0
 800644a:	d128      	bne.n	800649e <_dtoa_r+0x81e>
 800644c:	2001      	movs	r0, #1
 800644e:	e02e      	b.n	80064ae <_dtoa_r+0x82e>
 8006450:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006452:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006456:	e796      	b.n	8006386 <_dtoa_r+0x706>
 8006458:	9b08      	ldr	r3, [sp, #32]
 800645a:	f108 36ff 	add.w	r6, r8, #4294967295
 800645e:	42b3      	cmp	r3, r6
 8006460:	bfb7      	itett	lt
 8006462:	9b08      	ldrlt	r3, [sp, #32]
 8006464:	1b9e      	subge	r6, r3, r6
 8006466:	1af2      	sublt	r2, r6, r3
 8006468:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 800646a:	bfbf      	itttt	lt
 800646c:	9608      	strlt	r6, [sp, #32]
 800646e:	189b      	addlt	r3, r3, r2
 8006470:	930c      	strlt	r3, [sp, #48]	; 0x30
 8006472:	2600      	movlt	r6, #0
 8006474:	f1b8 0f00 	cmp.w	r8, #0
 8006478:	bfb9      	ittee	lt
 800647a:	eba9 0508 	sublt.w	r5, r9, r8
 800647e:	2300      	movlt	r3, #0
 8006480:	464d      	movge	r5, r9
 8006482:	4643      	movge	r3, r8
 8006484:	e781      	b.n	800638a <_dtoa_r+0x70a>
 8006486:	9e08      	ldr	r6, [sp, #32]
 8006488:	464d      	mov	r5, r9
 800648a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800648c:	e786      	b.n	800639c <_dtoa_r+0x71c>
 800648e:	9a08      	ldr	r2, [sp, #32]
 8006490:	e7ad      	b.n	80063ee <_dtoa_r+0x76e>
 8006492:	2300      	movs	r3, #0
 8006494:	e7d6      	b.n	8006444 <_dtoa_r+0x7c4>
 8006496:	9b02      	ldr	r3, [sp, #8]
 8006498:	e7d4      	b.n	8006444 <_dtoa_r+0x7c4>
 800649a:	2300      	movs	r3, #0
 800649c:	9308      	str	r3, [sp, #32]
 800649e:	6933      	ldr	r3, [r6, #16]
 80064a0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80064a4:	6918      	ldr	r0, [r3, #16]
 80064a6:	f000 fa49 	bl	800693c <__hi0bits>
 80064aa:	f1c0 0020 	rsb	r0, r0, #32
 80064ae:	9b07      	ldr	r3, [sp, #28]
 80064b0:	4418      	add	r0, r3
 80064b2:	f010 001f 	ands.w	r0, r0, #31
 80064b6:	d047      	beq.n	8006548 <_dtoa_r+0x8c8>
 80064b8:	f1c0 0320 	rsb	r3, r0, #32
 80064bc:	2b04      	cmp	r3, #4
 80064be:	dd3b      	ble.n	8006538 <_dtoa_r+0x8b8>
 80064c0:	9b07      	ldr	r3, [sp, #28]
 80064c2:	f1c0 001c 	rsb	r0, r0, #28
 80064c6:	4481      	add	r9, r0
 80064c8:	4405      	add	r5, r0
 80064ca:	4403      	add	r3, r0
 80064cc:	9307      	str	r3, [sp, #28]
 80064ce:	f1b9 0f00 	cmp.w	r9, #0
 80064d2:	dd05      	ble.n	80064e0 <_dtoa_r+0x860>
 80064d4:	4659      	mov	r1, fp
 80064d6:	464a      	mov	r2, r9
 80064d8:	4620      	mov	r0, r4
 80064da:	f000 fb69 	bl	8006bb0 <__lshift>
 80064de:	4683      	mov	fp, r0
 80064e0:	9b07      	ldr	r3, [sp, #28]
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	dd05      	ble.n	80064f2 <_dtoa_r+0x872>
 80064e6:	4631      	mov	r1, r6
 80064e8:	461a      	mov	r2, r3
 80064ea:	4620      	mov	r0, r4
 80064ec:	f000 fb60 	bl	8006bb0 <__lshift>
 80064f0:	4606      	mov	r6, r0
 80064f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80064f4:	b353      	cbz	r3, 800654c <_dtoa_r+0x8cc>
 80064f6:	4631      	mov	r1, r6
 80064f8:	4658      	mov	r0, fp
 80064fa:	f000 fbad 	bl	8006c58 <__mcmp>
 80064fe:	2800      	cmp	r0, #0
 8006500:	da24      	bge.n	800654c <_dtoa_r+0x8cc>
 8006502:	2300      	movs	r3, #0
 8006504:	4659      	mov	r1, fp
 8006506:	220a      	movs	r2, #10
 8006508:	4620      	mov	r0, r4
 800650a:	f000 f9dc 	bl	80068c6 <__multadd>
 800650e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006510:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006514:	4683      	mov	fp, r0
 8006516:	2b00      	cmp	r3, #0
 8006518:	f000 8144 	beq.w	80067a4 <_dtoa_r+0xb24>
 800651c:	2300      	movs	r3, #0
 800651e:	4639      	mov	r1, r7
 8006520:	220a      	movs	r2, #10
 8006522:	4620      	mov	r0, r4
 8006524:	f000 f9cf 	bl	80068c6 <__multadd>
 8006528:	9b04      	ldr	r3, [sp, #16]
 800652a:	4607      	mov	r7, r0
 800652c:	2b00      	cmp	r3, #0
 800652e:	dc4d      	bgt.n	80065cc <_dtoa_r+0x94c>
 8006530:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006532:	2b02      	cmp	r3, #2
 8006534:	dd4a      	ble.n	80065cc <_dtoa_r+0x94c>
 8006536:	e011      	b.n	800655c <_dtoa_r+0x8dc>
 8006538:	d0c9      	beq.n	80064ce <_dtoa_r+0x84e>
 800653a:	9a07      	ldr	r2, [sp, #28]
 800653c:	331c      	adds	r3, #28
 800653e:	441a      	add	r2, r3
 8006540:	4499      	add	r9, r3
 8006542:	441d      	add	r5, r3
 8006544:	4613      	mov	r3, r2
 8006546:	e7c1      	b.n	80064cc <_dtoa_r+0x84c>
 8006548:	4603      	mov	r3, r0
 800654a:	e7f6      	b.n	800653a <_dtoa_r+0x8ba>
 800654c:	f1b8 0f00 	cmp.w	r8, #0
 8006550:	dc36      	bgt.n	80065c0 <_dtoa_r+0x940>
 8006552:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006554:	2b02      	cmp	r3, #2
 8006556:	dd33      	ble.n	80065c0 <_dtoa_r+0x940>
 8006558:	f8cd 8010 	str.w	r8, [sp, #16]
 800655c:	9b04      	ldr	r3, [sp, #16]
 800655e:	b963      	cbnz	r3, 800657a <_dtoa_r+0x8fa>
 8006560:	4631      	mov	r1, r6
 8006562:	2205      	movs	r2, #5
 8006564:	4620      	mov	r0, r4
 8006566:	f000 f9ae 	bl	80068c6 <__multadd>
 800656a:	4601      	mov	r1, r0
 800656c:	4606      	mov	r6, r0
 800656e:	4658      	mov	r0, fp
 8006570:	f000 fb72 	bl	8006c58 <__mcmp>
 8006574:	2800      	cmp	r0, #0
 8006576:	f73f add3 	bgt.w	8006120 <_dtoa_r+0x4a0>
 800657a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800657c:	9d06      	ldr	r5, [sp, #24]
 800657e:	ea6f 0a03 	mvn.w	sl, r3
 8006582:	f04f 0900 	mov.w	r9, #0
 8006586:	4631      	mov	r1, r6
 8006588:	4620      	mov	r0, r4
 800658a:	f000 f985 	bl	8006898 <_Bfree>
 800658e:	2f00      	cmp	r7, #0
 8006590:	f43f aebd 	beq.w	800630e <_dtoa_r+0x68e>
 8006594:	f1b9 0f00 	cmp.w	r9, #0
 8006598:	d005      	beq.n	80065a6 <_dtoa_r+0x926>
 800659a:	45b9      	cmp	r9, r7
 800659c:	d003      	beq.n	80065a6 <_dtoa_r+0x926>
 800659e:	4649      	mov	r1, r9
 80065a0:	4620      	mov	r0, r4
 80065a2:	f000 f979 	bl	8006898 <_Bfree>
 80065a6:	4639      	mov	r1, r7
 80065a8:	4620      	mov	r0, r4
 80065aa:	f000 f975 	bl	8006898 <_Bfree>
 80065ae:	e6ae      	b.n	800630e <_dtoa_r+0x68e>
 80065b0:	2600      	movs	r6, #0
 80065b2:	4637      	mov	r7, r6
 80065b4:	e7e1      	b.n	800657a <_dtoa_r+0x8fa>
 80065b6:	46ba      	mov	sl, r7
 80065b8:	4637      	mov	r7, r6
 80065ba:	e5b1      	b.n	8006120 <_dtoa_r+0x4a0>
 80065bc:	40240000 	.word	0x40240000
 80065c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80065c2:	f8cd 8010 	str.w	r8, [sp, #16]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	f000 80f3 	beq.w	80067b2 <_dtoa_r+0xb32>
 80065cc:	2d00      	cmp	r5, #0
 80065ce:	dd05      	ble.n	80065dc <_dtoa_r+0x95c>
 80065d0:	4639      	mov	r1, r7
 80065d2:	462a      	mov	r2, r5
 80065d4:	4620      	mov	r0, r4
 80065d6:	f000 faeb 	bl	8006bb0 <__lshift>
 80065da:	4607      	mov	r7, r0
 80065dc:	9b08      	ldr	r3, [sp, #32]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d04c      	beq.n	800667c <_dtoa_r+0x9fc>
 80065e2:	6879      	ldr	r1, [r7, #4]
 80065e4:	4620      	mov	r0, r4
 80065e6:	f000 f923 	bl	8006830 <_Balloc>
 80065ea:	4605      	mov	r5, r0
 80065ec:	693a      	ldr	r2, [r7, #16]
 80065ee:	f107 010c 	add.w	r1, r7, #12
 80065f2:	3202      	adds	r2, #2
 80065f4:	0092      	lsls	r2, r2, #2
 80065f6:	300c      	adds	r0, #12
 80065f8:	f7fe fe1c 	bl	8005234 <memcpy>
 80065fc:	2201      	movs	r2, #1
 80065fe:	4629      	mov	r1, r5
 8006600:	4620      	mov	r0, r4
 8006602:	f000 fad5 	bl	8006bb0 <__lshift>
 8006606:	46b9      	mov	r9, r7
 8006608:	4607      	mov	r7, r0
 800660a:	9b06      	ldr	r3, [sp, #24]
 800660c:	9307      	str	r3, [sp, #28]
 800660e:	9b02      	ldr	r3, [sp, #8]
 8006610:	f003 0301 	and.w	r3, r3, #1
 8006614:	9308      	str	r3, [sp, #32]
 8006616:	4631      	mov	r1, r6
 8006618:	4658      	mov	r0, fp
 800661a:	f7ff faa1 	bl	8005b60 <quorem>
 800661e:	4649      	mov	r1, r9
 8006620:	4605      	mov	r5, r0
 8006622:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8006626:	4658      	mov	r0, fp
 8006628:	f000 fb16 	bl	8006c58 <__mcmp>
 800662c:	463a      	mov	r2, r7
 800662e:	9002      	str	r0, [sp, #8]
 8006630:	4631      	mov	r1, r6
 8006632:	4620      	mov	r0, r4
 8006634:	f000 fb2a 	bl	8006c8c <__mdiff>
 8006638:	68c3      	ldr	r3, [r0, #12]
 800663a:	4602      	mov	r2, r0
 800663c:	bb03      	cbnz	r3, 8006680 <_dtoa_r+0xa00>
 800663e:	4601      	mov	r1, r0
 8006640:	9009      	str	r0, [sp, #36]	; 0x24
 8006642:	4658      	mov	r0, fp
 8006644:	f000 fb08 	bl	8006c58 <__mcmp>
 8006648:	4603      	mov	r3, r0
 800664a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800664c:	4611      	mov	r1, r2
 800664e:	4620      	mov	r0, r4
 8006650:	9309      	str	r3, [sp, #36]	; 0x24
 8006652:	f000 f921 	bl	8006898 <_Bfree>
 8006656:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006658:	b9a3      	cbnz	r3, 8006684 <_dtoa_r+0xa04>
 800665a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800665c:	b992      	cbnz	r2, 8006684 <_dtoa_r+0xa04>
 800665e:	9a08      	ldr	r2, [sp, #32]
 8006660:	b982      	cbnz	r2, 8006684 <_dtoa_r+0xa04>
 8006662:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8006666:	d029      	beq.n	80066bc <_dtoa_r+0xa3c>
 8006668:	9b02      	ldr	r3, [sp, #8]
 800666a:	2b00      	cmp	r3, #0
 800666c:	dd01      	ble.n	8006672 <_dtoa_r+0x9f2>
 800666e:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8006672:	9b07      	ldr	r3, [sp, #28]
 8006674:	1c5d      	adds	r5, r3, #1
 8006676:	f883 8000 	strb.w	r8, [r3]
 800667a:	e784      	b.n	8006586 <_dtoa_r+0x906>
 800667c:	4638      	mov	r0, r7
 800667e:	e7c2      	b.n	8006606 <_dtoa_r+0x986>
 8006680:	2301      	movs	r3, #1
 8006682:	e7e3      	b.n	800664c <_dtoa_r+0x9cc>
 8006684:	9a02      	ldr	r2, [sp, #8]
 8006686:	2a00      	cmp	r2, #0
 8006688:	db04      	blt.n	8006694 <_dtoa_r+0xa14>
 800668a:	d123      	bne.n	80066d4 <_dtoa_r+0xa54>
 800668c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800668e:	bb0a      	cbnz	r2, 80066d4 <_dtoa_r+0xa54>
 8006690:	9a08      	ldr	r2, [sp, #32]
 8006692:	b9fa      	cbnz	r2, 80066d4 <_dtoa_r+0xa54>
 8006694:	2b00      	cmp	r3, #0
 8006696:	ddec      	ble.n	8006672 <_dtoa_r+0x9f2>
 8006698:	4659      	mov	r1, fp
 800669a:	2201      	movs	r2, #1
 800669c:	4620      	mov	r0, r4
 800669e:	f000 fa87 	bl	8006bb0 <__lshift>
 80066a2:	4631      	mov	r1, r6
 80066a4:	4683      	mov	fp, r0
 80066a6:	f000 fad7 	bl	8006c58 <__mcmp>
 80066aa:	2800      	cmp	r0, #0
 80066ac:	dc03      	bgt.n	80066b6 <_dtoa_r+0xa36>
 80066ae:	d1e0      	bne.n	8006672 <_dtoa_r+0x9f2>
 80066b0:	f018 0f01 	tst.w	r8, #1
 80066b4:	d0dd      	beq.n	8006672 <_dtoa_r+0x9f2>
 80066b6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80066ba:	d1d8      	bne.n	800666e <_dtoa_r+0x9ee>
 80066bc:	9b07      	ldr	r3, [sp, #28]
 80066be:	9a07      	ldr	r2, [sp, #28]
 80066c0:	1c5d      	adds	r5, r3, #1
 80066c2:	2339      	movs	r3, #57	; 0x39
 80066c4:	7013      	strb	r3, [r2, #0]
 80066c6:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80066ca:	1e6a      	subs	r2, r5, #1
 80066cc:	2b39      	cmp	r3, #57	; 0x39
 80066ce:	d04d      	beq.n	800676c <_dtoa_r+0xaec>
 80066d0:	3301      	adds	r3, #1
 80066d2:	e052      	b.n	800677a <_dtoa_r+0xafa>
 80066d4:	9a07      	ldr	r2, [sp, #28]
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	f102 0501 	add.w	r5, r2, #1
 80066dc:	dd06      	ble.n	80066ec <_dtoa_r+0xa6c>
 80066de:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80066e2:	d0eb      	beq.n	80066bc <_dtoa_r+0xa3c>
 80066e4:	f108 0801 	add.w	r8, r8, #1
 80066e8:	9b07      	ldr	r3, [sp, #28]
 80066ea:	e7c4      	b.n	8006676 <_dtoa_r+0x9f6>
 80066ec:	9b06      	ldr	r3, [sp, #24]
 80066ee:	9a04      	ldr	r2, [sp, #16]
 80066f0:	1aeb      	subs	r3, r5, r3
 80066f2:	4293      	cmp	r3, r2
 80066f4:	f805 8c01 	strb.w	r8, [r5, #-1]
 80066f8:	d021      	beq.n	800673e <_dtoa_r+0xabe>
 80066fa:	4659      	mov	r1, fp
 80066fc:	2300      	movs	r3, #0
 80066fe:	220a      	movs	r2, #10
 8006700:	4620      	mov	r0, r4
 8006702:	f000 f8e0 	bl	80068c6 <__multadd>
 8006706:	45b9      	cmp	r9, r7
 8006708:	4683      	mov	fp, r0
 800670a:	f04f 0300 	mov.w	r3, #0
 800670e:	f04f 020a 	mov.w	r2, #10
 8006712:	4649      	mov	r1, r9
 8006714:	4620      	mov	r0, r4
 8006716:	d105      	bne.n	8006724 <_dtoa_r+0xaa4>
 8006718:	f000 f8d5 	bl	80068c6 <__multadd>
 800671c:	4681      	mov	r9, r0
 800671e:	4607      	mov	r7, r0
 8006720:	9507      	str	r5, [sp, #28]
 8006722:	e778      	b.n	8006616 <_dtoa_r+0x996>
 8006724:	f000 f8cf 	bl	80068c6 <__multadd>
 8006728:	4639      	mov	r1, r7
 800672a:	4681      	mov	r9, r0
 800672c:	2300      	movs	r3, #0
 800672e:	220a      	movs	r2, #10
 8006730:	4620      	mov	r0, r4
 8006732:	f000 f8c8 	bl	80068c6 <__multadd>
 8006736:	4607      	mov	r7, r0
 8006738:	e7f2      	b.n	8006720 <_dtoa_r+0xaa0>
 800673a:	f04f 0900 	mov.w	r9, #0
 800673e:	4659      	mov	r1, fp
 8006740:	2201      	movs	r2, #1
 8006742:	4620      	mov	r0, r4
 8006744:	f000 fa34 	bl	8006bb0 <__lshift>
 8006748:	4631      	mov	r1, r6
 800674a:	4683      	mov	fp, r0
 800674c:	f000 fa84 	bl	8006c58 <__mcmp>
 8006750:	2800      	cmp	r0, #0
 8006752:	dcb8      	bgt.n	80066c6 <_dtoa_r+0xa46>
 8006754:	d102      	bne.n	800675c <_dtoa_r+0xadc>
 8006756:	f018 0f01 	tst.w	r8, #1
 800675a:	d1b4      	bne.n	80066c6 <_dtoa_r+0xa46>
 800675c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006760:	1e6a      	subs	r2, r5, #1
 8006762:	2b30      	cmp	r3, #48	; 0x30
 8006764:	f47f af0f 	bne.w	8006586 <_dtoa_r+0x906>
 8006768:	4615      	mov	r5, r2
 800676a:	e7f7      	b.n	800675c <_dtoa_r+0xadc>
 800676c:	9b06      	ldr	r3, [sp, #24]
 800676e:	4293      	cmp	r3, r2
 8006770:	d105      	bne.n	800677e <_dtoa_r+0xafe>
 8006772:	2331      	movs	r3, #49	; 0x31
 8006774:	9a06      	ldr	r2, [sp, #24]
 8006776:	f10a 0a01 	add.w	sl, sl, #1
 800677a:	7013      	strb	r3, [r2, #0]
 800677c:	e703      	b.n	8006586 <_dtoa_r+0x906>
 800677e:	4615      	mov	r5, r2
 8006780:	e7a1      	b.n	80066c6 <_dtoa_r+0xa46>
 8006782:	4b17      	ldr	r3, [pc, #92]	; (80067e0 <_dtoa_r+0xb60>)
 8006784:	f7ff bae1 	b.w	8005d4a <_dtoa_r+0xca>
 8006788:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800678a:	2b00      	cmp	r3, #0
 800678c:	f47f aabb 	bne.w	8005d06 <_dtoa_r+0x86>
 8006790:	4b14      	ldr	r3, [pc, #80]	; (80067e4 <_dtoa_r+0xb64>)
 8006792:	f7ff bada 	b.w	8005d4a <_dtoa_r+0xca>
 8006796:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006798:	2b01      	cmp	r3, #1
 800679a:	f77f ae3f 	ble.w	800641c <_dtoa_r+0x79c>
 800679e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80067a0:	9308      	str	r3, [sp, #32]
 80067a2:	e653      	b.n	800644c <_dtoa_r+0x7cc>
 80067a4:	9b04      	ldr	r3, [sp, #16]
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	dc03      	bgt.n	80067b2 <_dtoa_r+0xb32>
 80067aa:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80067ac:	2b02      	cmp	r3, #2
 80067ae:	f73f aed5 	bgt.w	800655c <_dtoa_r+0x8dc>
 80067b2:	9d06      	ldr	r5, [sp, #24]
 80067b4:	4631      	mov	r1, r6
 80067b6:	4658      	mov	r0, fp
 80067b8:	f7ff f9d2 	bl	8005b60 <quorem>
 80067bc:	9b06      	ldr	r3, [sp, #24]
 80067be:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80067c2:	f805 8b01 	strb.w	r8, [r5], #1
 80067c6:	9a04      	ldr	r2, [sp, #16]
 80067c8:	1aeb      	subs	r3, r5, r3
 80067ca:	429a      	cmp	r2, r3
 80067cc:	ddb5      	ble.n	800673a <_dtoa_r+0xaba>
 80067ce:	4659      	mov	r1, fp
 80067d0:	2300      	movs	r3, #0
 80067d2:	220a      	movs	r2, #10
 80067d4:	4620      	mov	r0, r4
 80067d6:	f000 f876 	bl	80068c6 <__multadd>
 80067da:	4683      	mov	fp, r0
 80067dc:	e7ea      	b.n	80067b4 <_dtoa_r+0xb34>
 80067de:	bf00      	nop
 80067e0:	08008424 	.word	0x08008424
 80067e4:	08008448 	.word	0x08008448

080067e8 <_localeconv_r>:
 80067e8:	4b04      	ldr	r3, [pc, #16]	; (80067fc <_localeconv_r+0x14>)
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	6a18      	ldr	r0, [r3, #32]
 80067ee:	4b04      	ldr	r3, [pc, #16]	; (8006800 <_localeconv_r+0x18>)
 80067f0:	2800      	cmp	r0, #0
 80067f2:	bf08      	it	eq
 80067f4:	4618      	moveq	r0, r3
 80067f6:	30f0      	adds	r0, #240	; 0xf0
 80067f8:	4770      	bx	lr
 80067fa:	bf00      	nop
 80067fc:	20000010 	.word	0x20000010
 8006800:	20000074 	.word	0x20000074

08006804 <malloc>:
 8006804:	4b02      	ldr	r3, [pc, #8]	; (8006810 <malloc+0xc>)
 8006806:	4601      	mov	r1, r0
 8006808:	6818      	ldr	r0, [r3, #0]
 800680a:	f000 bb47 	b.w	8006e9c <_malloc_r>
 800680e:	bf00      	nop
 8006810:	20000010 	.word	0x20000010

08006814 <memchr>:
 8006814:	b510      	push	{r4, lr}
 8006816:	b2c9      	uxtb	r1, r1
 8006818:	4402      	add	r2, r0
 800681a:	4290      	cmp	r0, r2
 800681c:	4603      	mov	r3, r0
 800681e:	d101      	bne.n	8006824 <memchr+0x10>
 8006820:	2300      	movs	r3, #0
 8006822:	e003      	b.n	800682c <memchr+0x18>
 8006824:	781c      	ldrb	r4, [r3, #0]
 8006826:	3001      	adds	r0, #1
 8006828:	428c      	cmp	r4, r1
 800682a:	d1f6      	bne.n	800681a <memchr+0x6>
 800682c:	4618      	mov	r0, r3
 800682e:	bd10      	pop	{r4, pc}

08006830 <_Balloc>:
 8006830:	b570      	push	{r4, r5, r6, lr}
 8006832:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006834:	4604      	mov	r4, r0
 8006836:	460e      	mov	r6, r1
 8006838:	b93d      	cbnz	r5, 800684a <_Balloc+0x1a>
 800683a:	2010      	movs	r0, #16
 800683c:	f7ff ffe2 	bl	8006804 <malloc>
 8006840:	6260      	str	r0, [r4, #36]	; 0x24
 8006842:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006846:	6005      	str	r5, [r0, #0]
 8006848:	60c5      	str	r5, [r0, #12]
 800684a:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800684c:	68eb      	ldr	r3, [r5, #12]
 800684e:	b183      	cbz	r3, 8006872 <_Balloc+0x42>
 8006850:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006852:	68db      	ldr	r3, [r3, #12]
 8006854:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8006858:	b9b8      	cbnz	r0, 800688a <_Balloc+0x5a>
 800685a:	2101      	movs	r1, #1
 800685c:	fa01 f506 	lsl.w	r5, r1, r6
 8006860:	1d6a      	adds	r2, r5, #5
 8006862:	0092      	lsls	r2, r2, #2
 8006864:	4620      	mov	r0, r4
 8006866:	f000 fabe 	bl	8006de6 <_calloc_r>
 800686a:	b160      	cbz	r0, 8006886 <_Balloc+0x56>
 800686c:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8006870:	e00e      	b.n	8006890 <_Balloc+0x60>
 8006872:	2221      	movs	r2, #33	; 0x21
 8006874:	2104      	movs	r1, #4
 8006876:	4620      	mov	r0, r4
 8006878:	f000 fab5 	bl	8006de6 <_calloc_r>
 800687c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800687e:	60e8      	str	r0, [r5, #12]
 8006880:	68db      	ldr	r3, [r3, #12]
 8006882:	2b00      	cmp	r3, #0
 8006884:	d1e4      	bne.n	8006850 <_Balloc+0x20>
 8006886:	2000      	movs	r0, #0
 8006888:	bd70      	pop	{r4, r5, r6, pc}
 800688a:	6802      	ldr	r2, [r0, #0]
 800688c:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8006890:	2300      	movs	r3, #0
 8006892:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006896:	e7f7      	b.n	8006888 <_Balloc+0x58>

08006898 <_Bfree>:
 8006898:	b570      	push	{r4, r5, r6, lr}
 800689a:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800689c:	4606      	mov	r6, r0
 800689e:	460d      	mov	r5, r1
 80068a0:	b93c      	cbnz	r4, 80068b2 <_Bfree+0x1a>
 80068a2:	2010      	movs	r0, #16
 80068a4:	f7ff ffae 	bl	8006804 <malloc>
 80068a8:	6270      	str	r0, [r6, #36]	; 0x24
 80068aa:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80068ae:	6004      	str	r4, [r0, #0]
 80068b0:	60c4      	str	r4, [r0, #12]
 80068b2:	b13d      	cbz	r5, 80068c4 <_Bfree+0x2c>
 80068b4:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80068b6:	686a      	ldr	r2, [r5, #4]
 80068b8:	68db      	ldr	r3, [r3, #12]
 80068ba:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80068be:	6029      	str	r1, [r5, #0]
 80068c0:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80068c4:	bd70      	pop	{r4, r5, r6, pc}

080068c6 <__multadd>:
 80068c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80068ca:	461f      	mov	r7, r3
 80068cc:	4606      	mov	r6, r0
 80068ce:	460c      	mov	r4, r1
 80068d0:	2300      	movs	r3, #0
 80068d2:	690d      	ldr	r5, [r1, #16]
 80068d4:	f101 0c14 	add.w	ip, r1, #20
 80068d8:	f8dc 0000 	ldr.w	r0, [ip]
 80068dc:	3301      	adds	r3, #1
 80068de:	b281      	uxth	r1, r0
 80068e0:	fb02 7101 	mla	r1, r2, r1, r7
 80068e4:	0c00      	lsrs	r0, r0, #16
 80068e6:	0c0f      	lsrs	r7, r1, #16
 80068e8:	fb02 7000 	mla	r0, r2, r0, r7
 80068ec:	b289      	uxth	r1, r1
 80068ee:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80068f2:	429d      	cmp	r5, r3
 80068f4:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80068f8:	f84c 1b04 	str.w	r1, [ip], #4
 80068fc:	dcec      	bgt.n	80068d8 <__multadd+0x12>
 80068fe:	b1d7      	cbz	r7, 8006936 <__multadd+0x70>
 8006900:	68a3      	ldr	r3, [r4, #8]
 8006902:	42ab      	cmp	r3, r5
 8006904:	dc12      	bgt.n	800692c <__multadd+0x66>
 8006906:	6861      	ldr	r1, [r4, #4]
 8006908:	4630      	mov	r0, r6
 800690a:	3101      	adds	r1, #1
 800690c:	f7ff ff90 	bl	8006830 <_Balloc>
 8006910:	4680      	mov	r8, r0
 8006912:	6922      	ldr	r2, [r4, #16]
 8006914:	f104 010c 	add.w	r1, r4, #12
 8006918:	3202      	adds	r2, #2
 800691a:	0092      	lsls	r2, r2, #2
 800691c:	300c      	adds	r0, #12
 800691e:	f7fe fc89 	bl	8005234 <memcpy>
 8006922:	4621      	mov	r1, r4
 8006924:	4630      	mov	r0, r6
 8006926:	f7ff ffb7 	bl	8006898 <_Bfree>
 800692a:	4644      	mov	r4, r8
 800692c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006930:	3501      	adds	r5, #1
 8006932:	615f      	str	r7, [r3, #20]
 8006934:	6125      	str	r5, [r4, #16]
 8006936:	4620      	mov	r0, r4
 8006938:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800693c <__hi0bits>:
 800693c:	0c02      	lsrs	r2, r0, #16
 800693e:	0412      	lsls	r2, r2, #16
 8006940:	4603      	mov	r3, r0
 8006942:	b9b2      	cbnz	r2, 8006972 <__hi0bits+0x36>
 8006944:	0403      	lsls	r3, r0, #16
 8006946:	2010      	movs	r0, #16
 8006948:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800694c:	bf04      	itt	eq
 800694e:	021b      	lsleq	r3, r3, #8
 8006950:	3008      	addeq	r0, #8
 8006952:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8006956:	bf04      	itt	eq
 8006958:	011b      	lsleq	r3, r3, #4
 800695a:	3004      	addeq	r0, #4
 800695c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8006960:	bf04      	itt	eq
 8006962:	009b      	lsleq	r3, r3, #2
 8006964:	3002      	addeq	r0, #2
 8006966:	2b00      	cmp	r3, #0
 8006968:	db06      	blt.n	8006978 <__hi0bits+0x3c>
 800696a:	005b      	lsls	r3, r3, #1
 800696c:	d503      	bpl.n	8006976 <__hi0bits+0x3a>
 800696e:	3001      	adds	r0, #1
 8006970:	4770      	bx	lr
 8006972:	2000      	movs	r0, #0
 8006974:	e7e8      	b.n	8006948 <__hi0bits+0xc>
 8006976:	2020      	movs	r0, #32
 8006978:	4770      	bx	lr

0800697a <__lo0bits>:
 800697a:	6803      	ldr	r3, [r0, #0]
 800697c:	4601      	mov	r1, r0
 800697e:	f013 0207 	ands.w	r2, r3, #7
 8006982:	d00b      	beq.n	800699c <__lo0bits+0x22>
 8006984:	07da      	lsls	r2, r3, #31
 8006986:	d423      	bmi.n	80069d0 <__lo0bits+0x56>
 8006988:	0798      	lsls	r0, r3, #30
 800698a:	bf49      	itett	mi
 800698c:	085b      	lsrmi	r3, r3, #1
 800698e:	089b      	lsrpl	r3, r3, #2
 8006990:	2001      	movmi	r0, #1
 8006992:	600b      	strmi	r3, [r1, #0]
 8006994:	bf5c      	itt	pl
 8006996:	600b      	strpl	r3, [r1, #0]
 8006998:	2002      	movpl	r0, #2
 800699a:	4770      	bx	lr
 800699c:	b298      	uxth	r0, r3
 800699e:	b9a8      	cbnz	r0, 80069cc <__lo0bits+0x52>
 80069a0:	2010      	movs	r0, #16
 80069a2:	0c1b      	lsrs	r3, r3, #16
 80069a4:	f013 0fff 	tst.w	r3, #255	; 0xff
 80069a8:	bf04      	itt	eq
 80069aa:	0a1b      	lsreq	r3, r3, #8
 80069ac:	3008      	addeq	r0, #8
 80069ae:	071a      	lsls	r2, r3, #28
 80069b0:	bf04      	itt	eq
 80069b2:	091b      	lsreq	r3, r3, #4
 80069b4:	3004      	addeq	r0, #4
 80069b6:	079a      	lsls	r2, r3, #30
 80069b8:	bf04      	itt	eq
 80069ba:	089b      	lsreq	r3, r3, #2
 80069bc:	3002      	addeq	r0, #2
 80069be:	07da      	lsls	r2, r3, #31
 80069c0:	d402      	bmi.n	80069c8 <__lo0bits+0x4e>
 80069c2:	085b      	lsrs	r3, r3, #1
 80069c4:	d006      	beq.n	80069d4 <__lo0bits+0x5a>
 80069c6:	3001      	adds	r0, #1
 80069c8:	600b      	str	r3, [r1, #0]
 80069ca:	4770      	bx	lr
 80069cc:	4610      	mov	r0, r2
 80069ce:	e7e9      	b.n	80069a4 <__lo0bits+0x2a>
 80069d0:	2000      	movs	r0, #0
 80069d2:	4770      	bx	lr
 80069d4:	2020      	movs	r0, #32
 80069d6:	4770      	bx	lr

080069d8 <__i2b>:
 80069d8:	b510      	push	{r4, lr}
 80069da:	460c      	mov	r4, r1
 80069dc:	2101      	movs	r1, #1
 80069de:	f7ff ff27 	bl	8006830 <_Balloc>
 80069e2:	2201      	movs	r2, #1
 80069e4:	6144      	str	r4, [r0, #20]
 80069e6:	6102      	str	r2, [r0, #16]
 80069e8:	bd10      	pop	{r4, pc}

080069ea <__multiply>:
 80069ea:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069ee:	4614      	mov	r4, r2
 80069f0:	690a      	ldr	r2, [r1, #16]
 80069f2:	6923      	ldr	r3, [r4, #16]
 80069f4:	4688      	mov	r8, r1
 80069f6:	429a      	cmp	r2, r3
 80069f8:	bfbe      	ittt	lt
 80069fa:	460b      	movlt	r3, r1
 80069fc:	46a0      	movlt	r8, r4
 80069fe:	461c      	movlt	r4, r3
 8006a00:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8006a04:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8006a08:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006a0c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8006a10:	eb07 0609 	add.w	r6, r7, r9
 8006a14:	42b3      	cmp	r3, r6
 8006a16:	bfb8      	it	lt
 8006a18:	3101      	addlt	r1, #1
 8006a1a:	f7ff ff09 	bl	8006830 <_Balloc>
 8006a1e:	f100 0514 	add.w	r5, r0, #20
 8006a22:	462b      	mov	r3, r5
 8006a24:	2200      	movs	r2, #0
 8006a26:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8006a2a:	4573      	cmp	r3, lr
 8006a2c:	d316      	bcc.n	8006a5c <__multiply+0x72>
 8006a2e:	f104 0214 	add.w	r2, r4, #20
 8006a32:	f108 0114 	add.w	r1, r8, #20
 8006a36:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8006a3a:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8006a3e:	9300      	str	r3, [sp, #0]
 8006a40:	9b00      	ldr	r3, [sp, #0]
 8006a42:	9201      	str	r2, [sp, #4]
 8006a44:	4293      	cmp	r3, r2
 8006a46:	d80c      	bhi.n	8006a62 <__multiply+0x78>
 8006a48:	2e00      	cmp	r6, #0
 8006a4a:	dd03      	ble.n	8006a54 <__multiply+0x6a>
 8006a4c:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d05d      	beq.n	8006b10 <__multiply+0x126>
 8006a54:	6106      	str	r6, [r0, #16]
 8006a56:	b003      	add	sp, #12
 8006a58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a5c:	f843 2b04 	str.w	r2, [r3], #4
 8006a60:	e7e3      	b.n	8006a2a <__multiply+0x40>
 8006a62:	f8b2 b000 	ldrh.w	fp, [r2]
 8006a66:	f1bb 0f00 	cmp.w	fp, #0
 8006a6a:	d023      	beq.n	8006ab4 <__multiply+0xca>
 8006a6c:	4689      	mov	r9, r1
 8006a6e:	46ac      	mov	ip, r5
 8006a70:	f04f 0800 	mov.w	r8, #0
 8006a74:	f859 4b04 	ldr.w	r4, [r9], #4
 8006a78:	f8dc a000 	ldr.w	sl, [ip]
 8006a7c:	b2a3      	uxth	r3, r4
 8006a7e:	fa1f fa8a 	uxth.w	sl, sl
 8006a82:	fb0b a303 	mla	r3, fp, r3, sl
 8006a86:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8006a8a:	f8dc 4000 	ldr.w	r4, [ip]
 8006a8e:	4443      	add	r3, r8
 8006a90:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8006a94:	fb0b 840a 	mla	r4, fp, sl, r8
 8006a98:	46e2      	mov	sl, ip
 8006a9a:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8006a9e:	b29b      	uxth	r3, r3
 8006aa0:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8006aa4:	454f      	cmp	r7, r9
 8006aa6:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8006aaa:	f84a 3b04 	str.w	r3, [sl], #4
 8006aae:	d82b      	bhi.n	8006b08 <__multiply+0x11e>
 8006ab0:	f8cc 8004 	str.w	r8, [ip, #4]
 8006ab4:	9b01      	ldr	r3, [sp, #4]
 8006ab6:	3204      	adds	r2, #4
 8006ab8:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8006abc:	f1ba 0f00 	cmp.w	sl, #0
 8006ac0:	d020      	beq.n	8006b04 <__multiply+0x11a>
 8006ac2:	4689      	mov	r9, r1
 8006ac4:	46a8      	mov	r8, r5
 8006ac6:	f04f 0b00 	mov.w	fp, #0
 8006aca:	682b      	ldr	r3, [r5, #0]
 8006acc:	f8b9 c000 	ldrh.w	ip, [r9]
 8006ad0:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8006ad4:	b29b      	uxth	r3, r3
 8006ad6:	fb0a 440c 	mla	r4, sl, ip, r4
 8006ada:	46c4      	mov	ip, r8
 8006adc:	445c      	add	r4, fp
 8006ade:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8006ae2:	f84c 3b04 	str.w	r3, [ip], #4
 8006ae6:	f859 3b04 	ldr.w	r3, [r9], #4
 8006aea:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8006aee:	0c1b      	lsrs	r3, r3, #16
 8006af0:	fb0a b303 	mla	r3, sl, r3, fp
 8006af4:	454f      	cmp	r7, r9
 8006af6:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8006afa:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8006afe:	d805      	bhi.n	8006b0c <__multiply+0x122>
 8006b00:	f8c8 3004 	str.w	r3, [r8, #4]
 8006b04:	3504      	adds	r5, #4
 8006b06:	e79b      	b.n	8006a40 <__multiply+0x56>
 8006b08:	46d4      	mov	ip, sl
 8006b0a:	e7b3      	b.n	8006a74 <__multiply+0x8a>
 8006b0c:	46e0      	mov	r8, ip
 8006b0e:	e7dd      	b.n	8006acc <__multiply+0xe2>
 8006b10:	3e01      	subs	r6, #1
 8006b12:	e799      	b.n	8006a48 <__multiply+0x5e>

08006b14 <__pow5mult>:
 8006b14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006b18:	4615      	mov	r5, r2
 8006b1a:	f012 0203 	ands.w	r2, r2, #3
 8006b1e:	4606      	mov	r6, r0
 8006b20:	460f      	mov	r7, r1
 8006b22:	d007      	beq.n	8006b34 <__pow5mult+0x20>
 8006b24:	4c21      	ldr	r4, [pc, #132]	; (8006bac <__pow5mult+0x98>)
 8006b26:	3a01      	subs	r2, #1
 8006b28:	2300      	movs	r3, #0
 8006b2a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006b2e:	f7ff feca 	bl	80068c6 <__multadd>
 8006b32:	4607      	mov	r7, r0
 8006b34:	10ad      	asrs	r5, r5, #2
 8006b36:	d035      	beq.n	8006ba4 <__pow5mult+0x90>
 8006b38:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006b3a:	b93c      	cbnz	r4, 8006b4c <__pow5mult+0x38>
 8006b3c:	2010      	movs	r0, #16
 8006b3e:	f7ff fe61 	bl	8006804 <malloc>
 8006b42:	6270      	str	r0, [r6, #36]	; 0x24
 8006b44:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006b48:	6004      	str	r4, [r0, #0]
 8006b4a:	60c4      	str	r4, [r0, #12]
 8006b4c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006b50:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006b54:	b94c      	cbnz	r4, 8006b6a <__pow5mult+0x56>
 8006b56:	f240 2171 	movw	r1, #625	; 0x271
 8006b5a:	4630      	mov	r0, r6
 8006b5c:	f7ff ff3c 	bl	80069d8 <__i2b>
 8006b60:	2300      	movs	r3, #0
 8006b62:	4604      	mov	r4, r0
 8006b64:	f8c8 0008 	str.w	r0, [r8, #8]
 8006b68:	6003      	str	r3, [r0, #0]
 8006b6a:	f04f 0800 	mov.w	r8, #0
 8006b6e:	07eb      	lsls	r3, r5, #31
 8006b70:	d50a      	bpl.n	8006b88 <__pow5mult+0x74>
 8006b72:	4639      	mov	r1, r7
 8006b74:	4622      	mov	r2, r4
 8006b76:	4630      	mov	r0, r6
 8006b78:	f7ff ff37 	bl	80069ea <__multiply>
 8006b7c:	4681      	mov	r9, r0
 8006b7e:	4639      	mov	r1, r7
 8006b80:	4630      	mov	r0, r6
 8006b82:	f7ff fe89 	bl	8006898 <_Bfree>
 8006b86:	464f      	mov	r7, r9
 8006b88:	106d      	asrs	r5, r5, #1
 8006b8a:	d00b      	beq.n	8006ba4 <__pow5mult+0x90>
 8006b8c:	6820      	ldr	r0, [r4, #0]
 8006b8e:	b938      	cbnz	r0, 8006ba0 <__pow5mult+0x8c>
 8006b90:	4622      	mov	r2, r4
 8006b92:	4621      	mov	r1, r4
 8006b94:	4630      	mov	r0, r6
 8006b96:	f7ff ff28 	bl	80069ea <__multiply>
 8006b9a:	6020      	str	r0, [r4, #0]
 8006b9c:	f8c0 8000 	str.w	r8, [r0]
 8006ba0:	4604      	mov	r4, r0
 8006ba2:	e7e4      	b.n	8006b6e <__pow5mult+0x5a>
 8006ba4:	4638      	mov	r0, r7
 8006ba6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006baa:	bf00      	nop
 8006bac:	08008548 	.word	0x08008548

08006bb0 <__lshift>:
 8006bb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006bb4:	460c      	mov	r4, r1
 8006bb6:	4607      	mov	r7, r0
 8006bb8:	4616      	mov	r6, r2
 8006bba:	6923      	ldr	r3, [r4, #16]
 8006bbc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006bc0:	eb0a 0903 	add.w	r9, sl, r3
 8006bc4:	6849      	ldr	r1, [r1, #4]
 8006bc6:	68a3      	ldr	r3, [r4, #8]
 8006bc8:	f109 0501 	add.w	r5, r9, #1
 8006bcc:	42ab      	cmp	r3, r5
 8006bce:	db32      	blt.n	8006c36 <__lshift+0x86>
 8006bd0:	4638      	mov	r0, r7
 8006bd2:	f7ff fe2d 	bl	8006830 <_Balloc>
 8006bd6:	2300      	movs	r3, #0
 8006bd8:	4680      	mov	r8, r0
 8006bda:	461a      	mov	r2, r3
 8006bdc:	f100 0114 	add.w	r1, r0, #20
 8006be0:	4553      	cmp	r3, sl
 8006be2:	db2b      	blt.n	8006c3c <__lshift+0x8c>
 8006be4:	6920      	ldr	r0, [r4, #16]
 8006be6:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006bea:	f104 0314 	add.w	r3, r4, #20
 8006bee:	f016 021f 	ands.w	r2, r6, #31
 8006bf2:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006bf6:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006bfa:	d025      	beq.n	8006c48 <__lshift+0x98>
 8006bfc:	2000      	movs	r0, #0
 8006bfe:	f1c2 0e20 	rsb	lr, r2, #32
 8006c02:	468a      	mov	sl, r1
 8006c04:	681e      	ldr	r6, [r3, #0]
 8006c06:	4096      	lsls	r6, r2
 8006c08:	4330      	orrs	r0, r6
 8006c0a:	f84a 0b04 	str.w	r0, [sl], #4
 8006c0e:	f853 0b04 	ldr.w	r0, [r3], #4
 8006c12:	459c      	cmp	ip, r3
 8006c14:	fa20 f00e 	lsr.w	r0, r0, lr
 8006c18:	d814      	bhi.n	8006c44 <__lshift+0x94>
 8006c1a:	6048      	str	r0, [r1, #4]
 8006c1c:	b108      	cbz	r0, 8006c22 <__lshift+0x72>
 8006c1e:	f109 0502 	add.w	r5, r9, #2
 8006c22:	3d01      	subs	r5, #1
 8006c24:	4638      	mov	r0, r7
 8006c26:	f8c8 5010 	str.w	r5, [r8, #16]
 8006c2a:	4621      	mov	r1, r4
 8006c2c:	f7ff fe34 	bl	8006898 <_Bfree>
 8006c30:	4640      	mov	r0, r8
 8006c32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c36:	3101      	adds	r1, #1
 8006c38:	005b      	lsls	r3, r3, #1
 8006c3a:	e7c7      	b.n	8006bcc <__lshift+0x1c>
 8006c3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8006c40:	3301      	adds	r3, #1
 8006c42:	e7cd      	b.n	8006be0 <__lshift+0x30>
 8006c44:	4651      	mov	r1, sl
 8006c46:	e7dc      	b.n	8006c02 <__lshift+0x52>
 8006c48:	3904      	subs	r1, #4
 8006c4a:	f853 2b04 	ldr.w	r2, [r3], #4
 8006c4e:	459c      	cmp	ip, r3
 8006c50:	f841 2f04 	str.w	r2, [r1, #4]!
 8006c54:	d8f9      	bhi.n	8006c4a <__lshift+0x9a>
 8006c56:	e7e4      	b.n	8006c22 <__lshift+0x72>

08006c58 <__mcmp>:
 8006c58:	6903      	ldr	r3, [r0, #16]
 8006c5a:	690a      	ldr	r2, [r1, #16]
 8006c5c:	b530      	push	{r4, r5, lr}
 8006c5e:	1a9b      	subs	r3, r3, r2
 8006c60:	d10c      	bne.n	8006c7c <__mcmp+0x24>
 8006c62:	0092      	lsls	r2, r2, #2
 8006c64:	3014      	adds	r0, #20
 8006c66:	3114      	adds	r1, #20
 8006c68:	1884      	adds	r4, r0, r2
 8006c6a:	4411      	add	r1, r2
 8006c6c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006c70:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006c74:	4295      	cmp	r5, r2
 8006c76:	d003      	beq.n	8006c80 <__mcmp+0x28>
 8006c78:	d305      	bcc.n	8006c86 <__mcmp+0x2e>
 8006c7a:	2301      	movs	r3, #1
 8006c7c:	4618      	mov	r0, r3
 8006c7e:	bd30      	pop	{r4, r5, pc}
 8006c80:	42a0      	cmp	r0, r4
 8006c82:	d3f3      	bcc.n	8006c6c <__mcmp+0x14>
 8006c84:	e7fa      	b.n	8006c7c <__mcmp+0x24>
 8006c86:	f04f 33ff 	mov.w	r3, #4294967295
 8006c8a:	e7f7      	b.n	8006c7c <__mcmp+0x24>

08006c8c <__mdiff>:
 8006c8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006c90:	460d      	mov	r5, r1
 8006c92:	4607      	mov	r7, r0
 8006c94:	4611      	mov	r1, r2
 8006c96:	4628      	mov	r0, r5
 8006c98:	4614      	mov	r4, r2
 8006c9a:	f7ff ffdd 	bl	8006c58 <__mcmp>
 8006c9e:	1e06      	subs	r6, r0, #0
 8006ca0:	d108      	bne.n	8006cb4 <__mdiff+0x28>
 8006ca2:	4631      	mov	r1, r6
 8006ca4:	4638      	mov	r0, r7
 8006ca6:	f7ff fdc3 	bl	8006830 <_Balloc>
 8006caa:	2301      	movs	r3, #1
 8006cac:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8006cb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006cb4:	bfa4      	itt	ge
 8006cb6:	4623      	movge	r3, r4
 8006cb8:	462c      	movge	r4, r5
 8006cba:	4638      	mov	r0, r7
 8006cbc:	6861      	ldr	r1, [r4, #4]
 8006cbe:	bfa6      	itte	ge
 8006cc0:	461d      	movge	r5, r3
 8006cc2:	2600      	movge	r6, #0
 8006cc4:	2601      	movlt	r6, #1
 8006cc6:	f7ff fdb3 	bl	8006830 <_Balloc>
 8006cca:	f04f 0e00 	mov.w	lr, #0
 8006cce:	60c6      	str	r6, [r0, #12]
 8006cd0:	692b      	ldr	r3, [r5, #16]
 8006cd2:	6926      	ldr	r6, [r4, #16]
 8006cd4:	f104 0214 	add.w	r2, r4, #20
 8006cd8:	f105 0914 	add.w	r9, r5, #20
 8006cdc:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8006ce0:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8006ce4:	f100 0114 	add.w	r1, r0, #20
 8006ce8:	f852 ab04 	ldr.w	sl, [r2], #4
 8006cec:	f859 5b04 	ldr.w	r5, [r9], #4
 8006cf0:	fa1f f38a 	uxth.w	r3, sl
 8006cf4:	4473      	add	r3, lr
 8006cf6:	b2ac      	uxth	r4, r5
 8006cf8:	1b1b      	subs	r3, r3, r4
 8006cfa:	0c2c      	lsrs	r4, r5, #16
 8006cfc:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 8006d00:	eb04 4423 	add.w	r4, r4, r3, asr #16
 8006d04:	b29b      	uxth	r3, r3
 8006d06:	ea4f 4e24 	mov.w	lr, r4, asr #16
 8006d0a:	45c8      	cmp	r8, r9
 8006d0c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8006d10:	4694      	mov	ip, r2
 8006d12:	f841 4b04 	str.w	r4, [r1], #4
 8006d16:	d8e7      	bhi.n	8006ce8 <__mdiff+0x5c>
 8006d18:	45bc      	cmp	ip, r7
 8006d1a:	d304      	bcc.n	8006d26 <__mdiff+0x9a>
 8006d1c:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8006d20:	b183      	cbz	r3, 8006d44 <__mdiff+0xb8>
 8006d22:	6106      	str	r6, [r0, #16]
 8006d24:	e7c4      	b.n	8006cb0 <__mdiff+0x24>
 8006d26:	f85c 4b04 	ldr.w	r4, [ip], #4
 8006d2a:	b2a2      	uxth	r2, r4
 8006d2c:	4472      	add	r2, lr
 8006d2e:	1413      	asrs	r3, r2, #16
 8006d30:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8006d34:	b292      	uxth	r2, r2
 8006d36:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006d3a:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8006d3e:	f841 2b04 	str.w	r2, [r1], #4
 8006d42:	e7e9      	b.n	8006d18 <__mdiff+0x8c>
 8006d44:	3e01      	subs	r6, #1
 8006d46:	e7e9      	b.n	8006d1c <__mdiff+0x90>

08006d48 <__d2b>:
 8006d48:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8006d4c:	461c      	mov	r4, r3
 8006d4e:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 8006d52:	2101      	movs	r1, #1
 8006d54:	4690      	mov	r8, r2
 8006d56:	f7ff fd6b 	bl	8006830 <_Balloc>
 8006d5a:	f3c4 0213 	ubfx	r2, r4, #0, #20
 8006d5e:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8006d62:	4607      	mov	r7, r0
 8006d64:	bb34      	cbnz	r4, 8006db4 <__d2b+0x6c>
 8006d66:	9201      	str	r2, [sp, #4]
 8006d68:	f1b8 0200 	subs.w	r2, r8, #0
 8006d6c:	d027      	beq.n	8006dbe <__d2b+0x76>
 8006d6e:	a802      	add	r0, sp, #8
 8006d70:	f840 2d08 	str.w	r2, [r0, #-8]!
 8006d74:	f7ff fe01 	bl	800697a <__lo0bits>
 8006d78:	9900      	ldr	r1, [sp, #0]
 8006d7a:	b1f0      	cbz	r0, 8006dba <__d2b+0x72>
 8006d7c:	9a01      	ldr	r2, [sp, #4]
 8006d7e:	f1c0 0320 	rsb	r3, r0, #32
 8006d82:	fa02 f303 	lsl.w	r3, r2, r3
 8006d86:	430b      	orrs	r3, r1
 8006d88:	40c2      	lsrs	r2, r0
 8006d8a:	617b      	str	r3, [r7, #20]
 8006d8c:	9201      	str	r2, [sp, #4]
 8006d8e:	9b01      	ldr	r3, [sp, #4]
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	bf14      	ite	ne
 8006d94:	2102      	movne	r1, #2
 8006d96:	2101      	moveq	r1, #1
 8006d98:	61bb      	str	r3, [r7, #24]
 8006d9a:	6139      	str	r1, [r7, #16]
 8006d9c:	b1c4      	cbz	r4, 8006dd0 <__d2b+0x88>
 8006d9e:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8006da2:	4404      	add	r4, r0
 8006da4:	6034      	str	r4, [r6, #0]
 8006da6:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006daa:	6028      	str	r0, [r5, #0]
 8006dac:	4638      	mov	r0, r7
 8006dae:	b002      	add	sp, #8
 8006db0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006db4:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8006db8:	e7d5      	b.n	8006d66 <__d2b+0x1e>
 8006dba:	6179      	str	r1, [r7, #20]
 8006dbc:	e7e7      	b.n	8006d8e <__d2b+0x46>
 8006dbe:	a801      	add	r0, sp, #4
 8006dc0:	f7ff fddb 	bl	800697a <__lo0bits>
 8006dc4:	2101      	movs	r1, #1
 8006dc6:	9b01      	ldr	r3, [sp, #4]
 8006dc8:	6139      	str	r1, [r7, #16]
 8006dca:	617b      	str	r3, [r7, #20]
 8006dcc:	3020      	adds	r0, #32
 8006dce:	e7e5      	b.n	8006d9c <__d2b+0x54>
 8006dd0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006dd4:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8006dd8:	6030      	str	r0, [r6, #0]
 8006dda:	6918      	ldr	r0, [r3, #16]
 8006ddc:	f7ff fdae 	bl	800693c <__hi0bits>
 8006de0:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8006de4:	e7e1      	b.n	8006daa <__d2b+0x62>

08006de6 <_calloc_r>:
 8006de6:	b538      	push	{r3, r4, r5, lr}
 8006de8:	fb02 f401 	mul.w	r4, r2, r1
 8006dec:	4621      	mov	r1, r4
 8006dee:	f000 f855 	bl	8006e9c <_malloc_r>
 8006df2:	4605      	mov	r5, r0
 8006df4:	b118      	cbz	r0, 8006dfe <_calloc_r+0x18>
 8006df6:	4622      	mov	r2, r4
 8006df8:	2100      	movs	r1, #0
 8006dfa:	f7fe fa26 	bl	800524a <memset>
 8006dfe:	4628      	mov	r0, r5
 8006e00:	bd38      	pop	{r3, r4, r5, pc}
	...

08006e04 <_free_r>:
 8006e04:	b538      	push	{r3, r4, r5, lr}
 8006e06:	4605      	mov	r5, r0
 8006e08:	2900      	cmp	r1, #0
 8006e0a:	d043      	beq.n	8006e94 <_free_r+0x90>
 8006e0c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006e10:	1f0c      	subs	r4, r1, #4
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	bfb8      	it	lt
 8006e16:	18e4      	addlt	r4, r4, r3
 8006e18:	f000 fa27 	bl	800726a <__malloc_lock>
 8006e1c:	4a1e      	ldr	r2, [pc, #120]	; (8006e98 <_free_r+0x94>)
 8006e1e:	6813      	ldr	r3, [r2, #0]
 8006e20:	4610      	mov	r0, r2
 8006e22:	b933      	cbnz	r3, 8006e32 <_free_r+0x2e>
 8006e24:	6063      	str	r3, [r4, #4]
 8006e26:	6014      	str	r4, [r2, #0]
 8006e28:	4628      	mov	r0, r5
 8006e2a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006e2e:	f000 ba1d 	b.w	800726c <__malloc_unlock>
 8006e32:	42a3      	cmp	r3, r4
 8006e34:	d90b      	bls.n	8006e4e <_free_r+0x4a>
 8006e36:	6821      	ldr	r1, [r4, #0]
 8006e38:	1862      	adds	r2, r4, r1
 8006e3a:	4293      	cmp	r3, r2
 8006e3c:	bf01      	itttt	eq
 8006e3e:	681a      	ldreq	r2, [r3, #0]
 8006e40:	685b      	ldreq	r3, [r3, #4]
 8006e42:	1852      	addeq	r2, r2, r1
 8006e44:	6022      	streq	r2, [r4, #0]
 8006e46:	6063      	str	r3, [r4, #4]
 8006e48:	6004      	str	r4, [r0, #0]
 8006e4a:	e7ed      	b.n	8006e28 <_free_r+0x24>
 8006e4c:	4613      	mov	r3, r2
 8006e4e:	685a      	ldr	r2, [r3, #4]
 8006e50:	b10a      	cbz	r2, 8006e56 <_free_r+0x52>
 8006e52:	42a2      	cmp	r2, r4
 8006e54:	d9fa      	bls.n	8006e4c <_free_r+0x48>
 8006e56:	6819      	ldr	r1, [r3, #0]
 8006e58:	1858      	adds	r0, r3, r1
 8006e5a:	42a0      	cmp	r0, r4
 8006e5c:	d10b      	bne.n	8006e76 <_free_r+0x72>
 8006e5e:	6820      	ldr	r0, [r4, #0]
 8006e60:	4401      	add	r1, r0
 8006e62:	1858      	adds	r0, r3, r1
 8006e64:	4282      	cmp	r2, r0
 8006e66:	6019      	str	r1, [r3, #0]
 8006e68:	d1de      	bne.n	8006e28 <_free_r+0x24>
 8006e6a:	6810      	ldr	r0, [r2, #0]
 8006e6c:	6852      	ldr	r2, [r2, #4]
 8006e6e:	4401      	add	r1, r0
 8006e70:	6019      	str	r1, [r3, #0]
 8006e72:	605a      	str	r2, [r3, #4]
 8006e74:	e7d8      	b.n	8006e28 <_free_r+0x24>
 8006e76:	d902      	bls.n	8006e7e <_free_r+0x7a>
 8006e78:	230c      	movs	r3, #12
 8006e7a:	602b      	str	r3, [r5, #0]
 8006e7c:	e7d4      	b.n	8006e28 <_free_r+0x24>
 8006e7e:	6820      	ldr	r0, [r4, #0]
 8006e80:	1821      	adds	r1, r4, r0
 8006e82:	428a      	cmp	r2, r1
 8006e84:	bf01      	itttt	eq
 8006e86:	6811      	ldreq	r1, [r2, #0]
 8006e88:	6852      	ldreq	r2, [r2, #4]
 8006e8a:	1809      	addeq	r1, r1, r0
 8006e8c:	6021      	streq	r1, [r4, #0]
 8006e8e:	6062      	str	r2, [r4, #4]
 8006e90:	605c      	str	r4, [r3, #4]
 8006e92:	e7c9      	b.n	8006e28 <_free_r+0x24>
 8006e94:	bd38      	pop	{r3, r4, r5, pc}
 8006e96:	bf00      	nop
 8006e98:	20000234 	.word	0x20000234

08006e9c <_malloc_r>:
 8006e9c:	b570      	push	{r4, r5, r6, lr}
 8006e9e:	1ccd      	adds	r5, r1, #3
 8006ea0:	f025 0503 	bic.w	r5, r5, #3
 8006ea4:	3508      	adds	r5, #8
 8006ea6:	2d0c      	cmp	r5, #12
 8006ea8:	bf38      	it	cc
 8006eaa:	250c      	movcc	r5, #12
 8006eac:	2d00      	cmp	r5, #0
 8006eae:	4606      	mov	r6, r0
 8006eb0:	db01      	blt.n	8006eb6 <_malloc_r+0x1a>
 8006eb2:	42a9      	cmp	r1, r5
 8006eb4:	d903      	bls.n	8006ebe <_malloc_r+0x22>
 8006eb6:	230c      	movs	r3, #12
 8006eb8:	6033      	str	r3, [r6, #0]
 8006eba:	2000      	movs	r0, #0
 8006ebc:	bd70      	pop	{r4, r5, r6, pc}
 8006ebe:	f000 f9d4 	bl	800726a <__malloc_lock>
 8006ec2:	4a21      	ldr	r2, [pc, #132]	; (8006f48 <_malloc_r+0xac>)
 8006ec4:	6814      	ldr	r4, [r2, #0]
 8006ec6:	4621      	mov	r1, r4
 8006ec8:	b991      	cbnz	r1, 8006ef0 <_malloc_r+0x54>
 8006eca:	4c20      	ldr	r4, [pc, #128]	; (8006f4c <_malloc_r+0xb0>)
 8006ecc:	6823      	ldr	r3, [r4, #0]
 8006ece:	b91b      	cbnz	r3, 8006ed8 <_malloc_r+0x3c>
 8006ed0:	4630      	mov	r0, r6
 8006ed2:	f000 f98f 	bl	80071f4 <_sbrk_r>
 8006ed6:	6020      	str	r0, [r4, #0]
 8006ed8:	4629      	mov	r1, r5
 8006eda:	4630      	mov	r0, r6
 8006edc:	f000 f98a 	bl	80071f4 <_sbrk_r>
 8006ee0:	1c43      	adds	r3, r0, #1
 8006ee2:	d124      	bne.n	8006f2e <_malloc_r+0x92>
 8006ee4:	230c      	movs	r3, #12
 8006ee6:	4630      	mov	r0, r6
 8006ee8:	6033      	str	r3, [r6, #0]
 8006eea:	f000 f9bf 	bl	800726c <__malloc_unlock>
 8006eee:	e7e4      	b.n	8006eba <_malloc_r+0x1e>
 8006ef0:	680b      	ldr	r3, [r1, #0]
 8006ef2:	1b5b      	subs	r3, r3, r5
 8006ef4:	d418      	bmi.n	8006f28 <_malloc_r+0x8c>
 8006ef6:	2b0b      	cmp	r3, #11
 8006ef8:	d90f      	bls.n	8006f1a <_malloc_r+0x7e>
 8006efa:	600b      	str	r3, [r1, #0]
 8006efc:	18cc      	adds	r4, r1, r3
 8006efe:	50cd      	str	r5, [r1, r3]
 8006f00:	4630      	mov	r0, r6
 8006f02:	f000 f9b3 	bl	800726c <__malloc_unlock>
 8006f06:	f104 000b 	add.w	r0, r4, #11
 8006f0a:	1d23      	adds	r3, r4, #4
 8006f0c:	f020 0007 	bic.w	r0, r0, #7
 8006f10:	1ac3      	subs	r3, r0, r3
 8006f12:	d0d3      	beq.n	8006ebc <_malloc_r+0x20>
 8006f14:	425a      	negs	r2, r3
 8006f16:	50e2      	str	r2, [r4, r3]
 8006f18:	e7d0      	b.n	8006ebc <_malloc_r+0x20>
 8006f1a:	684b      	ldr	r3, [r1, #4]
 8006f1c:	428c      	cmp	r4, r1
 8006f1e:	bf16      	itet	ne
 8006f20:	6063      	strne	r3, [r4, #4]
 8006f22:	6013      	streq	r3, [r2, #0]
 8006f24:	460c      	movne	r4, r1
 8006f26:	e7eb      	b.n	8006f00 <_malloc_r+0x64>
 8006f28:	460c      	mov	r4, r1
 8006f2a:	6849      	ldr	r1, [r1, #4]
 8006f2c:	e7cc      	b.n	8006ec8 <_malloc_r+0x2c>
 8006f2e:	1cc4      	adds	r4, r0, #3
 8006f30:	f024 0403 	bic.w	r4, r4, #3
 8006f34:	42a0      	cmp	r0, r4
 8006f36:	d005      	beq.n	8006f44 <_malloc_r+0xa8>
 8006f38:	1a21      	subs	r1, r4, r0
 8006f3a:	4630      	mov	r0, r6
 8006f3c:	f000 f95a 	bl	80071f4 <_sbrk_r>
 8006f40:	3001      	adds	r0, #1
 8006f42:	d0cf      	beq.n	8006ee4 <_malloc_r+0x48>
 8006f44:	6025      	str	r5, [r4, #0]
 8006f46:	e7db      	b.n	8006f00 <_malloc_r+0x64>
 8006f48:	20000234 	.word	0x20000234
 8006f4c:	20000238 	.word	0x20000238

08006f50 <__ssputs_r>:
 8006f50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f54:	688e      	ldr	r6, [r1, #8]
 8006f56:	4682      	mov	sl, r0
 8006f58:	429e      	cmp	r6, r3
 8006f5a:	460c      	mov	r4, r1
 8006f5c:	4690      	mov	r8, r2
 8006f5e:	4699      	mov	r9, r3
 8006f60:	d837      	bhi.n	8006fd2 <__ssputs_r+0x82>
 8006f62:	898a      	ldrh	r2, [r1, #12]
 8006f64:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006f68:	d031      	beq.n	8006fce <__ssputs_r+0x7e>
 8006f6a:	2302      	movs	r3, #2
 8006f6c:	6825      	ldr	r5, [r4, #0]
 8006f6e:	6909      	ldr	r1, [r1, #16]
 8006f70:	1a6f      	subs	r7, r5, r1
 8006f72:	6965      	ldr	r5, [r4, #20]
 8006f74:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006f78:	fb95 f5f3 	sdiv	r5, r5, r3
 8006f7c:	f109 0301 	add.w	r3, r9, #1
 8006f80:	443b      	add	r3, r7
 8006f82:	429d      	cmp	r5, r3
 8006f84:	bf38      	it	cc
 8006f86:	461d      	movcc	r5, r3
 8006f88:	0553      	lsls	r3, r2, #21
 8006f8a:	d530      	bpl.n	8006fee <__ssputs_r+0x9e>
 8006f8c:	4629      	mov	r1, r5
 8006f8e:	f7ff ff85 	bl	8006e9c <_malloc_r>
 8006f92:	4606      	mov	r6, r0
 8006f94:	b950      	cbnz	r0, 8006fac <__ssputs_r+0x5c>
 8006f96:	230c      	movs	r3, #12
 8006f98:	f04f 30ff 	mov.w	r0, #4294967295
 8006f9c:	f8ca 3000 	str.w	r3, [sl]
 8006fa0:	89a3      	ldrh	r3, [r4, #12]
 8006fa2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006fa6:	81a3      	strh	r3, [r4, #12]
 8006fa8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006fac:	463a      	mov	r2, r7
 8006fae:	6921      	ldr	r1, [r4, #16]
 8006fb0:	f7fe f940 	bl	8005234 <memcpy>
 8006fb4:	89a3      	ldrh	r3, [r4, #12]
 8006fb6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006fba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006fbe:	81a3      	strh	r3, [r4, #12]
 8006fc0:	6126      	str	r6, [r4, #16]
 8006fc2:	443e      	add	r6, r7
 8006fc4:	6026      	str	r6, [r4, #0]
 8006fc6:	464e      	mov	r6, r9
 8006fc8:	6165      	str	r5, [r4, #20]
 8006fca:	1bed      	subs	r5, r5, r7
 8006fcc:	60a5      	str	r5, [r4, #8]
 8006fce:	454e      	cmp	r6, r9
 8006fd0:	d900      	bls.n	8006fd4 <__ssputs_r+0x84>
 8006fd2:	464e      	mov	r6, r9
 8006fd4:	4632      	mov	r2, r6
 8006fd6:	4641      	mov	r1, r8
 8006fd8:	6820      	ldr	r0, [r4, #0]
 8006fda:	f000 f92d 	bl	8007238 <memmove>
 8006fde:	68a3      	ldr	r3, [r4, #8]
 8006fe0:	2000      	movs	r0, #0
 8006fe2:	1b9b      	subs	r3, r3, r6
 8006fe4:	60a3      	str	r3, [r4, #8]
 8006fe6:	6823      	ldr	r3, [r4, #0]
 8006fe8:	441e      	add	r6, r3
 8006fea:	6026      	str	r6, [r4, #0]
 8006fec:	e7dc      	b.n	8006fa8 <__ssputs_r+0x58>
 8006fee:	462a      	mov	r2, r5
 8006ff0:	f000 f93d 	bl	800726e <_realloc_r>
 8006ff4:	4606      	mov	r6, r0
 8006ff6:	2800      	cmp	r0, #0
 8006ff8:	d1e2      	bne.n	8006fc0 <__ssputs_r+0x70>
 8006ffa:	6921      	ldr	r1, [r4, #16]
 8006ffc:	4650      	mov	r0, sl
 8006ffe:	f7ff ff01 	bl	8006e04 <_free_r>
 8007002:	e7c8      	b.n	8006f96 <__ssputs_r+0x46>

08007004 <_svfiprintf_r>:
 8007004:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007008:	461d      	mov	r5, r3
 800700a:	898b      	ldrh	r3, [r1, #12]
 800700c:	b09d      	sub	sp, #116	; 0x74
 800700e:	061f      	lsls	r7, r3, #24
 8007010:	4680      	mov	r8, r0
 8007012:	460c      	mov	r4, r1
 8007014:	4616      	mov	r6, r2
 8007016:	d50f      	bpl.n	8007038 <_svfiprintf_r+0x34>
 8007018:	690b      	ldr	r3, [r1, #16]
 800701a:	b96b      	cbnz	r3, 8007038 <_svfiprintf_r+0x34>
 800701c:	2140      	movs	r1, #64	; 0x40
 800701e:	f7ff ff3d 	bl	8006e9c <_malloc_r>
 8007022:	6020      	str	r0, [r4, #0]
 8007024:	6120      	str	r0, [r4, #16]
 8007026:	b928      	cbnz	r0, 8007034 <_svfiprintf_r+0x30>
 8007028:	230c      	movs	r3, #12
 800702a:	f8c8 3000 	str.w	r3, [r8]
 800702e:	f04f 30ff 	mov.w	r0, #4294967295
 8007032:	e0c8      	b.n	80071c6 <_svfiprintf_r+0x1c2>
 8007034:	2340      	movs	r3, #64	; 0x40
 8007036:	6163      	str	r3, [r4, #20]
 8007038:	2300      	movs	r3, #0
 800703a:	9309      	str	r3, [sp, #36]	; 0x24
 800703c:	2320      	movs	r3, #32
 800703e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007042:	2330      	movs	r3, #48	; 0x30
 8007044:	f04f 0b01 	mov.w	fp, #1
 8007048:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800704c:	9503      	str	r5, [sp, #12]
 800704e:	4637      	mov	r7, r6
 8007050:	463d      	mov	r5, r7
 8007052:	f815 3b01 	ldrb.w	r3, [r5], #1
 8007056:	b10b      	cbz	r3, 800705c <_svfiprintf_r+0x58>
 8007058:	2b25      	cmp	r3, #37	; 0x25
 800705a:	d13e      	bne.n	80070da <_svfiprintf_r+0xd6>
 800705c:	ebb7 0a06 	subs.w	sl, r7, r6
 8007060:	d00b      	beq.n	800707a <_svfiprintf_r+0x76>
 8007062:	4653      	mov	r3, sl
 8007064:	4632      	mov	r2, r6
 8007066:	4621      	mov	r1, r4
 8007068:	4640      	mov	r0, r8
 800706a:	f7ff ff71 	bl	8006f50 <__ssputs_r>
 800706e:	3001      	adds	r0, #1
 8007070:	f000 80a4 	beq.w	80071bc <_svfiprintf_r+0x1b8>
 8007074:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007076:	4453      	add	r3, sl
 8007078:	9309      	str	r3, [sp, #36]	; 0x24
 800707a:	783b      	ldrb	r3, [r7, #0]
 800707c:	2b00      	cmp	r3, #0
 800707e:	f000 809d 	beq.w	80071bc <_svfiprintf_r+0x1b8>
 8007082:	2300      	movs	r3, #0
 8007084:	f04f 32ff 	mov.w	r2, #4294967295
 8007088:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800708c:	9304      	str	r3, [sp, #16]
 800708e:	9307      	str	r3, [sp, #28]
 8007090:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007094:	931a      	str	r3, [sp, #104]	; 0x68
 8007096:	462f      	mov	r7, r5
 8007098:	2205      	movs	r2, #5
 800709a:	f817 1b01 	ldrb.w	r1, [r7], #1
 800709e:	4850      	ldr	r0, [pc, #320]	; (80071e0 <_svfiprintf_r+0x1dc>)
 80070a0:	f7ff fbb8 	bl	8006814 <memchr>
 80070a4:	9b04      	ldr	r3, [sp, #16]
 80070a6:	b9d0      	cbnz	r0, 80070de <_svfiprintf_r+0xda>
 80070a8:	06d9      	lsls	r1, r3, #27
 80070aa:	bf44      	itt	mi
 80070ac:	2220      	movmi	r2, #32
 80070ae:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80070b2:	071a      	lsls	r2, r3, #28
 80070b4:	bf44      	itt	mi
 80070b6:	222b      	movmi	r2, #43	; 0x2b
 80070b8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80070bc:	782a      	ldrb	r2, [r5, #0]
 80070be:	2a2a      	cmp	r2, #42	; 0x2a
 80070c0:	d015      	beq.n	80070ee <_svfiprintf_r+0xea>
 80070c2:	462f      	mov	r7, r5
 80070c4:	2000      	movs	r0, #0
 80070c6:	250a      	movs	r5, #10
 80070c8:	9a07      	ldr	r2, [sp, #28]
 80070ca:	4639      	mov	r1, r7
 80070cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80070d0:	3b30      	subs	r3, #48	; 0x30
 80070d2:	2b09      	cmp	r3, #9
 80070d4:	d94d      	bls.n	8007172 <_svfiprintf_r+0x16e>
 80070d6:	b1b8      	cbz	r0, 8007108 <_svfiprintf_r+0x104>
 80070d8:	e00f      	b.n	80070fa <_svfiprintf_r+0xf6>
 80070da:	462f      	mov	r7, r5
 80070dc:	e7b8      	b.n	8007050 <_svfiprintf_r+0x4c>
 80070de:	4a40      	ldr	r2, [pc, #256]	; (80071e0 <_svfiprintf_r+0x1dc>)
 80070e0:	463d      	mov	r5, r7
 80070e2:	1a80      	subs	r0, r0, r2
 80070e4:	fa0b f000 	lsl.w	r0, fp, r0
 80070e8:	4318      	orrs	r0, r3
 80070ea:	9004      	str	r0, [sp, #16]
 80070ec:	e7d3      	b.n	8007096 <_svfiprintf_r+0x92>
 80070ee:	9a03      	ldr	r2, [sp, #12]
 80070f0:	1d11      	adds	r1, r2, #4
 80070f2:	6812      	ldr	r2, [r2, #0]
 80070f4:	9103      	str	r1, [sp, #12]
 80070f6:	2a00      	cmp	r2, #0
 80070f8:	db01      	blt.n	80070fe <_svfiprintf_r+0xfa>
 80070fa:	9207      	str	r2, [sp, #28]
 80070fc:	e004      	b.n	8007108 <_svfiprintf_r+0x104>
 80070fe:	4252      	negs	r2, r2
 8007100:	f043 0302 	orr.w	r3, r3, #2
 8007104:	9207      	str	r2, [sp, #28]
 8007106:	9304      	str	r3, [sp, #16]
 8007108:	783b      	ldrb	r3, [r7, #0]
 800710a:	2b2e      	cmp	r3, #46	; 0x2e
 800710c:	d10c      	bne.n	8007128 <_svfiprintf_r+0x124>
 800710e:	787b      	ldrb	r3, [r7, #1]
 8007110:	2b2a      	cmp	r3, #42	; 0x2a
 8007112:	d133      	bne.n	800717c <_svfiprintf_r+0x178>
 8007114:	9b03      	ldr	r3, [sp, #12]
 8007116:	3702      	adds	r7, #2
 8007118:	1d1a      	adds	r2, r3, #4
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	9203      	str	r2, [sp, #12]
 800711e:	2b00      	cmp	r3, #0
 8007120:	bfb8      	it	lt
 8007122:	f04f 33ff 	movlt.w	r3, #4294967295
 8007126:	9305      	str	r3, [sp, #20]
 8007128:	4d2e      	ldr	r5, [pc, #184]	; (80071e4 <_svfiprintf_r+0x1e0>)
 800712a:	2203      	movs	r2, #3
 800712c:	7839      	ldrb	r1, [r7, #0]
 800712e:	4628      	mov	r0, r5
 8007130:	f7ff fb70 	bl	8006814 <memchr>
 8007134:	b138      	cbz	r0, 8007146 <_svfiprintf_r+0x142>
 8007136:	2340      	movs	r3, #64	; 0x40
 8007138:	1b40      	subs	r0, r0, r5
 800713a:	fa03 f000 	lsl.w	r0, r3, r0
 800713e:	9b04      	ldr	r3, [sp, #16]
 8007140:	3701      	adds	r7, #1
 8007142:	4303      	orrs	r3, r0
 8007144:	9304      	str	r3, [sp, #16]
 8007146:	7839      	ldrb	r1, [r7, #0]
 8007148:	2206      	movs	r2, #6
 800714a:	4827      	ldr	r0, [pc, #156]	; (80071e8 <_svfiprintf_r+0x1e4>)
 800714c:	1c7e      	adds	r6, r7, #1
 800714e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007152:	f7ff fb5f 	bl	8006814 <memchr>
 8007156:	2800      	cmp	r0, #0
 8007158:	d038      	beq.n	80071cc <_svfiprintf_r+0x1c8>
 800715a:	4b24      	ldr	r3, [pc, #144]	; (80071ec <_svfiprintf_r+0x1e8>)
 800715c:	bb13      	cbnz	r3, 80071a4 <_svfiprintf_r+0x1a0>
 800715e:	9b03      	ldr	r3, [sp, #12]
 8007160:	3307      	adds	r3, #7
 8007162:	f023 0307 	bic.w	r3, r3, #7
 8007166:	3308      	adds	r3, #8
 8007168:	9303      	str	r3, [sp, #12]
 800716a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800716c:	444b      	add	r3, r9
 800716e:	9309      	str	r3, [sp, #36]	; 0x24
 8007170:	e76d      	b.n	800704e <_svfiprintf_r+0x4a>
 8007172:	fb05 3202 	mla	r2, r5, r2, r3
 8007176:	2001      	movs	r0, #1
 8007178:	460f      	mov	r7, r1
 800717a:	e7a6      	b.n	80070ca <_svfiprintf_r+0xc6>
 800717c:	2300      	movs	r3, #0
 800717e:	250a      	movs	r5, #10
 8007180:	4619      	mov	r1, r3
 8007182:	3701      	adds	r7, #1
 8007184:	9305      	str	r3, [sp, #20]
 8007186:	4638      	mov	r0, r7
 8007188:	f810 2b01 	ldrb.w	r2, [r0], #1
 800718c:	3a30      	subs	r2, #48	; 0x30
 800718e:	2a09      	cmp	r2, #9
 8007190:	d903      	bls.n	800719a <_svfiprintf_r+0x196>
 8007192:	2b00      	cmp	r3, #0
 8007194:	d0c8      	beq.n	8007128 <_svfiprintf_r+0x124>
 8007196:	9105      	str	r1, [sp, #20]
 8007198:	e7c6      	b.n	8007128 <_svfiprintf_r+0x124>
 800719a:	fb05 2101 	mla	r1, r5, r1, r2
 800719e:	2301      	movs	r3, #1
 80071a0:	4607      	mov	r7, r0
 80071a2:	e7f0      	b.n	8007186 <_svfiprintf_r+0x182>
 80071a4:	ab03      	add	r3, sp, #12
 80071a6:	9300      	str	r3, [sp, #0]
 80071a8:	4622      	mov	r2, r4
 80071aa:	4b11      	ldr	r3, [pc, #68]	; (80071f0 <_svfiprintf_r+0x1ec>)
 80071ac:	a904      	add	r1, sp, #16
 80071ae:	4640      	mov	r0, r8
 80071b0:	f7fe f8e4 	bl	800537c <_printf_float>
 80071b4:	f1b0 3fff 	cmp.w	r0, #4294967295
 80071b8:	4681      	mov	r9, r0
 80071ba:	d1d6      	bne.n	800716a <_svfiprintf_r+0x166>
 80071bc:	89a3      	ldrh	r3, [r4, #12]
 80071be:	065b      	lsls	r3, r3, #25
 80071c0:	f53f af35 	bmi.w	800702e <_svfiprintf_r+0x2a>
 80071c4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80071c6:	b01d      	add	sp, #116	; 0x74
 80071c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071cc:	ab03      	add	r3, sp, #12
 80071ce:	9300      	str	r3, [sp, #0]
 80071d0:	4622      	mov	r2, r4
 80071d2:	4b07      	ldr	r3, [pc, #28]	; (80071f0 <_svfiprintf_r+0x1ec>)
 80071d4:	a904      	add	r1, sp, #16
 80071d6:	4640      	mov	r0, r8
 80071d8:	f7fe fb7c 	bl	80058d4 <_printf_i>
 80071dc:	e7ea      	b.n	80071b4 <_svfiprintf_r+0x1b0>
 80071de:	bf00      	nop
 80071e0:	08008554 	.word	0x08008554
 80071e4:	0800855a 	.word	0x0800855a
 80071e8:	0800855e 	.word	0x0800855e
 80071ec:	0800537d 	.word	0x0800537d
 80071f0:	08006f51 	.word	0x08006f51

080071f4 <_sbrk_r>:
 80071f4:	b538      	push	{r3, r4, r5, lr}
 80071f6:	2300      	movs	r3, #0
 80071f8:	4c05      	ldr	r4, [pc, #20]	; (8007210 <_sbrk_r+0x1c>)
 80071fa:	4605      	mov	r5, r0
 80071fc:	4608      	mov	r0, r1
 80071fe:	6023      	str	r3, [r4, #0]
 8007200:	f7fa ff9a 	bl	8002138 <_sbrk>
 8007204:	1c43      	adds	r3, r0, #1
 8007206:	d102      	bne.n	800720e <_sbrk_r+0x1a>
 8007208:	6823      	ldr	r3, [r4, #0]
 800720a:	b103      	cbz	r3, 800720e <_sbrk_r+0x1a>
 800720c:	602b      	str	r3, [r5, #0]
 800720e:	bd38      	pop	{r3, r4, r5, pc}
 8007210:	20000334 	.word	0x20000334

08007214 <__ascii_mbtowc>:
 8007214:	b082      	sub	sp, #8
 8007216:	b901      	cbnz	r1, 800721a <__ascii_mbtowc+0x6>
 8007218:	a901      	add	r1, sp, #4
 800721a:	b142      	cbz	r2, 800722e <__ascii_mbtowc+0x1a>
 800721c:	b14b      	cbz	r3, 8007232 <__ascii_mbtowc+0x1e>
 800721e:	7813      	ldrb	r3, [r2, #0]
 8007220:	600b      	str	r3, [r1, #0]
 8007222:	7812      	ldrb	r2, [r2, #0]
 8007224:	1c10      	adds	r0, r2, #0
 8007226:	bf18      	it	ne
 8007228:	2001      	movne	r0, #1
 800722a:	b002      	add	sp, #8
 800722c:	4770      	bx	lr
 800722e:	4610      	mov	r0, r2
 8007230:	e7fb      	b.n	800722a <__ascii_mbtowc+0x16>
 8007232:	f06f 0001 	mvn.w	r0, #1
 8007236:	e7f8      	b.n	800722a <__ascii_mbtowc+0x16>

08007238 <memmove>:
 8007238:	4288      	cmp	r0, r1
 800723a:	b510      	push	{r4, lr}
 800723c:	eb01 0302 	add.w	r3, r1, r2
 8007240:	d807      	bhi.n	8007252 <memmove+0x1a>
 8007242:	1e42      	subs	r2, r0, #1
 8007244:	4299      	cmp	r1, r3
 8007246:	d00a      	beq.n	800725e <memmove+0x26>
 8007248:	f811 4b01 	ldrb.w	r4, [r1], #1
 800724c:	f802 4f01 	strb.w	r4, [r2, #1]!
 8007250:	e7f8      	b.n	8007244 <memmove+0xc>
 8007252:	4283      	cmp	r3, r0
 8007254:	d9f5      	bls.n	8007242 <memmove+0xa>
 8007256:	1881      	adds	r1, r0, r2
 8007258:	1ad2      	subs	r2, r2, r3
 800725a:	42d3      	cmn	r3, r2
 800725c:	d100      	bne.n	8007260 <memmove+0x28>
 800725e:	bd10      	pop	{r4, pc}
 8007260:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007264:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8007268:	e7f7      	b.n	800725a <memmove+0x22>

0800726a <__malloc_lock>:
 800726a:	4770      	bx	lr

0800726c <__malloc_unlock>:
 800726c:	4770      	bx	lr

0800726e <_realloc_r>:
 800726e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007270:	4607      	mov	r7, r0
 8007272:	4614      	mov	r4, r2
 8007274:	460e      	mov	r6, r1
 8007276:	b921      	cbnz	r1, 8007282 <_realloc_r+0x14>
 8007278:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800727c:	4611      	mov	r1, r2
 800727e:	f7ff be0d 	b.w	8006e9c <_malloc_r>
 8007282:	b922      	cbnz	r2, 800728e <_realloc_r+0x20>
 8007284:	f7ff fdbe 	bl	8006e04 <_free_r>
 8007288:	4625      	mov	r5, r4
 800728a:	4628      	mov	r0, r5
 800728c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800728e:	f000 f821 	bl	80072d4 <_malloc_usable_size_r>
 8007292:	42a0      	cmp	r0, r4
 8007294:	d20f      	bcs.n	80072b6 <_realloc_r+0x48>
 8007296:	4621      	mov	r1, r4
 8007298:	4638      	mov	r0, r7
 800729a:	f7ff fdff 	bl	8006e9c <_malloc_r>
 800729e:	4605      	mov	r5, r0
 80072a0:	2800      	cmp	r0, #0
 80072a2:	d0f2      	beq.n	800728a <_realloc_r+0x1c>
 80072a4:	4631      	mov	r1, r6
 80072a6:	4622      	mov	r2, r4
 80072a8:	f7fd ffc4 	bl	8005234 <memcpy>
 80072ac:	4631      	mov	r1, r6
 80072ae:	4638      	mov	r0, r7
 80072b0:	f7ff fda8 	bl	8006e04 <_free_r>
 80072b4:	e7e9      	b.n	800728a <_realloc_r+0x1c>
 80072b6:	4635      	mov	r5, r6
 80072b8:	e7e7      	b.n	800728a <_realloc_r+0x1c>

080072ba <__ascii_wctomb>:
 80072ba:	b149      	cbz	r1, 80072d0 <__ascii_wctomb+0x16>
 80072bc:	2aff      	cmp	r2, #255	; 0xff
 80072be:	bf8b      	itete	hi
 80072c0:	238a      	movhi	r3, #138	; 0x8a
 80072c2:	700a      	strbls	r2, [r1, #0]
 80072c4:	6003      	strhi	r3, [r0, #0]
 80072c6:	2001      	movls	r0, #1
 80072c8:	bf88      	it	hi
 80072ca:	f04f 30ff 	movhi.w	r0, #4294967295
 80072ce:	4770      	bx	lr
 80072d0:	4608      	mov	r0, r1
 80072d2:	4770      	bx	lr

080072d4 <_malloc_usable_size_r>:
 80072d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80072d8:	1f18      	subs	r0, r3, #4
 80072da:	2b00      	cmp	r3, #0
 80072dc:	bfbc      	itt	lt
 80072de:	580b      	ldrlt	r3, [r1, r0]
 80072e0:	18c0      	addlt	r0, r0, r3
 80072e2:	4770      	bx	lr

080072e4 <pow>:
 80072e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072e8:	b08f      	sub	sp, #60	; 0x3c
 80072ea:	461d      	mov	r5, r3
 80072ec:	4680      	mov	r8, r0
 80072ee:	4689      	mov	r9, r1
 80072f0:	4614      	mov	r4, r2
 80072f2:	f000 f955 	bl	80075a0 <__ieee754_pow>
 80072f6:	4fa1      	ldr	r7, [pc, #644]	; (800757c <pow+0x298>)
 80072f8:	e9cd 0100 	strd	r0, r1, [sp]
 80072fc:	f997 3000 	ldrsb.w	r3, [r7]
 8007300:	463e      	mov	r6, r7
 8007302:	9302      	str	r3, [sp, #8]
 8007304:	3301      	adds	r3, #1
 8007306:	d05f      	beq.n	80073c8 <pow+0xe4>
 8007308:	4622      	mov	r2, r4
 800730a:	462b      	mov	r3, r5
 800730c:	4620      	mov	r0, r4
 800730e:	4629      	mov	r1, r5
 8007310:	f7f9 fb7c 	bl	8000a0c <__aeabi_dcmpun>
 8007314:	4682      	mov	sl, r0
 8007316:	2800      	cmp	r0, #0
 8007318:	d156      	bne.n	80073c8 <pow+0xe4>
 800731a:	4642      	mov	r2, r8
 800731c:	464b      	mov	r3, r9
 800731e:	4640      	mov	r0, r8
 8007320:	4649      	mov	r1, r9
 8007322:	f7f9 fb73 	bl	8000a0c <__aeabi_dcmpun>
 8007326:	9003      	str	r0, [sp, #12]
 8007328:	b1e8      	cbz	r0, 8007366 <pow+0x82>
 800732a:	2200      	movs	r2, #0
 800732c:	2300      	movs	r3, #0
 800732e:	4620      	mov	r0, r4
 8007330:	4629      	mov	r1, r5
 8007332:	f7f9 fb39 	bl	80009a8 <__aeabi_dcmpeq>
 8007336:	2800      	cmp	r0, #0
 8007338:	d046      	beq.n	80073c8 <pow+0xe4>
 800733a:	2301      	movs	r3, #1
 800733c:	2200      	movs	r2, #0
 800733e:	9304      	str	r3, [sp, #16]
 8007340:	4b8f      	ldr	r3, [pc, #572]	; (8007580 <pow+0x29c>)
 8007342:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8007346:	9305      	str	r3, [sp, #20]
 8007348:	4b8e      	ldr	r3, [pc, #568]	; (8007584 <pow+0x2a0>)
 800734a:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800734e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8007352:	9b02      	ldr	r3, [sp, #8]
 8007354:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8007358:	2b02      	cmp	r3, #2
 800735a:	d031      	beq.n	80073c0 <pow+0xdc>
 800735c:	a804      	add	r0, sp, #16
 800735e:	f000 fedf 	bl	8008120 <matherr>
 8007362:	bb38      	cbnz	r0, 80073b4 <pow+0xd0>
 8007364:	e058      	b.n	8007418 <pow+0x134>
 8007366:	f04f 0a00 	mov.w	sl, #0
 800736a:	f04f 0b00 	mov.w	fp, #0
 800736e:	4652      	mov	r2, sl
 8007370:	465b      	mov	r3, fp
 8007372:	4640      	mov	r0, r8
 8007374:	4649      	mov	r1, r9
 8007376:	f7f9 fb17 	bl	80009a8 <__aeabi_dcmpeq>
 800737a:	2800      	cmp	r0, #0
 800737c:	d051      	beq.n	8007422 <pow+0x13e>
 800737e:	4652      	mov	r2, sl
 8007380:	465b      	mov	r3, fp
 8007382:	4620      	mov	r0, r4
 8007384:	4629      	mov	r1, r5
 8007386:	f7f9 fb0f 	bl	80009a8 <__aeabi_dcmpeq>
 800738a:	4606      	mov	r6, r0
 800738c:	b308      	cbz	r0, 80073d2 <pow+0xee>
 800738e:	2301      	movs	r3, #1
 8007390:	9304      	str	r3, [sp, #16]
 8007392:	4b7b      	ldr	r3, [pc, #492]	; (8007580 <pow+0x29c>)
 8007394:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8007398:	9305      	str	r3, [sp, #20]
 800739a:	9b03      	ldr	r3, [sp, #12]
 800739c:	e9cd 4508 	strd	r4, r5, [sp, #32]
 80073a0:	930c      	str	r3, [sp, #48]	; 0x30
 80073a2:	9b02      	ldr	r3, [sp, #8]
 80073a4:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d0d7      	beq.n	800735c <pow+0x78>
 80073ac:	2200      	movs	r2, #0
 80073ae:	4b75      	ldr	r3, [pc, #468]	; (8007584 <pow+0x2a0>)
 80073b0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80073b4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80073b6:	b11b      	cbz	r3, 80073c0 <pow+0xdc>
 80073b8:	f7fd ff12 	bl	80051e0 <__errno>
 80073bc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80073be:	6003      	str	r3, [r0, #0]
 80073c0:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	; 0x28
 80073c4:	e9cd 3400 	strd	r3, r4, [sp]
 80073c8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80073cc:	b00f      	add	sp, #60	; 0x3c
 80073ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073d2:	4620      	mov	r0, r4
 80073d4:	4629      	mov	r1, r5
 80073d6:	f000 fe9d 	bl	8008114 <finite>
 80073da:	2800      	cmp	r0, #0
 80073dc:	d0f4      	beq.n	80073c8 <pow+0xe4>
 80073de:	4652      	mov	r2, sl
 80073e0:	465b      	mov	r3, fp
 80073e2:	4620      	mov	r0, r4
 80073e4:	4629      	mov	r1, r5
 80073e6:	f7f9 fae9 	bl	80009bc <__aeabi_dcmplt>
 80073ea:	2800      	cmp	r0, #0
 80073ec:	d0ec      	beq.n	80073c8 <pow+0xe4>
 80073ee:	2301      	movs	r3, #1
 80073f0:	9304      	str	r3, [sp, #16]
 80073f2:	4b63      	ldr	r3, [pc, #396]	; (8007580 <pow+0x29c>)
 80073f4:	960c      	str	r6, [sp, #48]	; 0x30
 80073f6:	9305      	str	r3, [sp, #20]
 80073f8:	f997 3000 	ldrsb.w	r3, [r7]
 80073fc:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8007400:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8007404:	b913      	cbnz	r3, 800740c <pow+0x128>
 8007406:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 800740a:	e7a7      	b.n	800735c <pow+0x78>
 800740c:	2000      	movs	r0, #0
 800740e:	495e      	ldr	r1, [pc, #376]	; (8007588 <pow+0x2a4>)
 8007410:	2b02      	cmp	r3, #2
 8007412:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8007416:	d1a1      	bne.n	800735c <pow+0x78>
 8007418:	f7fd fee2 	bl	80051e0 <__errno>
 800741c:	2321      	movs	r3, #33	; 0x21
 800741e:	6003      	str	r3, [r0, #0]
 8007420:	e7c8      	b.n	80073b4 <pow+0xd0>
 8007422:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007426:	f000 fe75 	bl	8008114 <finite>
 800742a:	9002      	str	r0, [sp, #8]
 800742c:	2800      	cmp	r0, #0
 800742e:	d177      	bne.n	8007520 <pow+0x23c>
 8007430:	4640      	mov	r0, r8
 8007432:	4649      	mov	r1, r9
 8007434:	f000 fe6e 	bl	8008114 <finite>
 8007438:	2800      	cmp	r0, #0
 800743a:	d071      	beq.n	8007520 <pow+0x23c>
 800743c:	4620      	mov	r0, r4
 800743e:	4629      	mov	r1, r5
 8007440:	f000 fe68 	bl	8008114 <finite>
 8007444:	2800      	cmp	r0, #0
 8007446:	d06b      	beq.n	8007520 <pow+0x23c>
 8007448:	e9dd 2300 	ldrd	r2, r3, [sp]
 800744c:	4619      	mov	r1, r3
 800744e:	4610      	mov	r0, r2
 8007450:	f7f9 fadc 	bl	8000a0c <__aeabi_dcmpun>
 8007454:	f997 7000 	ldrsb.w	r7, [r7]
 8007458:	4b49      	ldr	r3, [pc, #292]	; (8007580 <pow+0x29c>)
 800745a:	b1a0      	cbz	r0, 8007486 <pow+0x1a2>
 800745c:	2201      	movs	r2, #1
 800745e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007462:	9b02      	ldr	r3, [sp, #8]
 8007464:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8007468:	930c      	str	r3, [sp, #48]	; 0x30
 800746a:	e9cd 4508 	strd	r4, r5, [sp, #32]
 800746e:	2f00      	cmp	r7, #0
 8007470:	d0c9      	beq.n	8007406 <pow+0x122>
 8007472:	4652      	mov	r2, sl
 8007474:	465b      	mov	r3, fp
 8007476:	4650      	mov	r0, sl
 8007478:	4659      	mov	r1, fp
 800747a:	f7f9 f957 	bl	800072c <__aeabi_ddiv>
 800747e:	2f02      	cmp	r7, #2
 8007480:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8007484:	e7c7      	b.n	8007416 <pow+0x132>
 8007486:	2203      	movs	r2, #3
 8007488:	900c      	str	r0, [sp, #48]	; 0x30
 800748a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800748e:	4620      	mov	r0, r4
 8007490:	4629      	mov	r1, r5
 8007492:	2200      	movs	r2, #0
 8007494:	4b3d      	ldr	r3, [pc, #244]	; (800758c <pow+0x2a8>)
 8007496:	e9cd 4508 	strd	r4, r5, [sp, #32]
 800749a:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800749e:	f7f9 f81b 	bl	80004d8 <__aeabi_dmul>
 80074a2:	4604      	mov	r4, r0
 80074a4:	460d      	mov	r5, r1
 80074a6:	bb17      	cbnz	r7, 80074ee <pow+0x20a>
 80074a8:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80074ac:	4b38      	ldr	r3, [pc, #224]	; (8007590 <pow+0x2ac>)
 80074ae:	4640      	mov	r0, r8
 80074b0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80074b4:	4649      	mov	r1, r9
 80074b6:	4652      	mov	r2, sl
 80074b8:	465b      	mov	r3, fp
 80074ba:	f7f9 fa7f 	bl	80009bc <__aeabi_dcmplt>
 80074be:	2800      	cmp	r0, #0
 80074c0:	d054      	beq.n	800756c <pow+0x288>
 80074c2:	4620      	mov	r0, r4
 80074c4:	4629      	mov	r1, r5
 80074c6:	f000 fe33 	bl	8008130 <rint>
 80074ca:	4622      	mov	r2, r4
 80074cc:	462b      	mov	r3, r5
 80074ce:	f7f9 fa6b 	bl	80009a8 <__aeabi_dcmpeq>
 80074d2:	b920      	cbnz	r0, 80074de <pow+0x1fa>
 80074d4:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80074d8:	4b2e      	ldr	r3, [pc, #184]	; (8007594 <pow+0x2b0>)
 80074da:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80074de:	f996 3000 	ldrsb.w	r3, [r6]
 80074e2:	2b02      	cmp	r3, #2
 80074e4:	d142      	bne.n	800756c <pow+0x288>
 80074e6:	f7fd fe7b 	bl	80051e0 <__errno>
 80074ea:	2322      	movs	r3, #34	; 0x22
 80074ec:	e797      	b.n	800741e <pow+0x13a>
 80074ee:	2200      	movs	r2, #0
 80074f0:	4b29      	ldr	r3, [pc, #164]	; (8007598 <pow+0x2b4>)
 80074f2:	4640      	mov	r0, r8
 80074f4:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80074f8:	4649      	mov	r1, r9
 80074fa:	4652      	mov	r2, sl
 80074fc:	465b      	mov	r3, fp
 80074fe:	f7f9 fa5d 	bl	80009bc <__aeabi_dcmplt>
 8007502:	2800      	cmp	r0, #0
 8007504:	d0eb      	beq.n	80074de <pow+0x1fa>
 8007506:	4620      	mov	r0, r4
 8007508:	4629      	mov	r1, r5
 800750a:	f000 fe11 	bl	8008130 <rint>
 800750e:	4622      	mov	r2, r4
 8007510:	462b      	mov	r3, r5
 8007512:	f7f9 fa49 	bl	80009a8 <__aeabi_dcmpeq>
 8007516:	2800      	cmp	r0, #0
 8007518:	d1e1      	bne.n	80074de <pow+0x1fa>
 800751a:	2200      	movs	r2, #0
 800751c:	4b1a      	ldr	r3, [pc, #104]	; (8007588 <pow+0x2a4>)
 800751e:	e7dc      	b.n	80074da <pow+0x1f6>
 8007520:	2200      	movs	r2, #0
 8007522:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007526:	2300      	movs	r3, #0
 8007528:	f7f9 fa3e 	bl	80009a8 <__aeabi_dcmpeq>
 800752c:	2800      	cmp	r0, #0
 800752e:	f43f af4b 	beq.w	80073c8 <pow+0xe4>
 8007532:	4640      	mov	r0, r8
 8007534:	4649      	mov	r1, r9
 8007536:	f000 fded 	bl	8008114 <finite>
 800753a:	2800      	cmp	r0, #0
 800753c:	f43f af44 	beq.w	80073c8 <pow+0xe4>
 8007540:	4620      	mov	r0, r4
 8007542:	4629      	mov	r1, r5
 8007544:	f000 fde6 	bl	8008114 <finite>
 8007548:	2800      	cmp	r0, #0
 800754a:	f43f af3d 	beq.w	80073c8 <pow+0xe4>
 800754e:	2304      	movs	r3, #4
 8007550:	9304      	str	r3, [sp, #16]
 8007552:	4b0b      	ldr	r3, [pc, #44]	; (8007580 <pow+0x29c>)
 8007554:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8007558:	9305      	str	r3, [sp, #20]
 800755a:	2300      	movs	r3, #0
 800755c:	2400      	movs	r4, #0
 800755e:	930c      	str	r3, [sp, #48]	; 0x30
 8007560:	2300      	movs	r3, #0
 8007562:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8007566:	e9cd 340a 	strd	r3, r4, [sp, #40]	; 0x28
 800756a:	e7b8      	b.n	80074de <pow+0x1fa>
 800756c:	a804      	add	r0, sp, #16
 800756e:	f000 fdd7 	bl	8008120 <matherr>
 8007572:	2800      	cmp	r0, #0
 8007574:	f47f af1e 	bne.w	80073b4 <pow+0xd0>
 8007578:	e7b5      	b.n	80074e6 <pow+0x202>
 800757a:	bf00      	nop
 800757c:	200001e0 	.word	0x200001e0
 8007580:	08008670 	.word	0x08008670
 8007584:	3ff00000 	.word	0x3ff00000
 8007588:	fff00000 	.word	0xfff00000
 800758c:	3fe00000 	.word	0x3fe00000
 8007590:	47efffff 	.word	0x47efffff
 8007594:	c7efffff 	.word	0xc7efffff
 8007598:	7ff00000 	.word	0x7ff00000
 800759c:	00000000 	.word	0x00000000

080075a0 <__ieee754_pow>:
 80075a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075a4:	b091      	sub	sp, #68	; 0x44
 80075a6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80075aa:	e9dd 2602 	ldrd	r2, r6, [sp, #8]
 80075ae:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 80075b2:	ea55 0302 	orrs.w	r3, r5, r2
 80075b6:	4607      	mov	r7, r0
 80075b8:	4688      	mov	r8, r1
 80075ba:	f000 84b7 	beq.w	8007f2c <__ieee754_pow+0x98c>
 80075be:	4b80      	ldr	r3, [pc, #512]	; (80077c0 <__ieee754_pow+0x220>)
 80075c0:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 80075c4:	429c      	cmp	r4, r3
 80075c6:	4689      	mov	r9, r1
 80075c8:	4682      	mov	sl, r0
 80075ca:	dc09      	bgt.n	80075e0 <__ieee754_pow+0x40>
 80075cc:	d103      	bne.n	80075d6 <__ieee754_pow+0x36>
 80075ce:	b938      	cbnz	r0, 80075e0 <__ieee754_pow+0x40>
 80075d0:	42a5      	cmp	r5, r4
 80075d2:	dc0d      	bgt.n	80075f0 <__ieee754_pow+0x50>
 80075d4:	e001      	b.n	80075da <__ieee754_pow+0x3a>
 80075d6:	429d      	cmp	r5, r3
 80075d8:	dc02      	bgt.n	80075e0 <__ieee754_pow+0x40>
 80075da:	429d      	cmp	r5, r3
 80075dc:	d10e      	bne.n	80075fc <__ieee754_pow+0x5c>
 80075de:	b16a      	cbz	r2, 80075fc <__ieee754_pow+0x5c>
 80075e0:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80075e4:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80075e8:	ea54 030a 	orrs.w	r3, r4, sl
 80075ec:	f000 849e 	beq.w	8007f2c <__ieee754_pow+0x98c>
 80075f0:	4874      	ldr	r0, [pc, #464]	; (80077c4 <__ieee754_pow+0x224>)
 80075f2:	b011      	add	sp, #68	; 0x44
 80075f4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075f8:	f000 bd94 	b.w	8008124 <nan>
 80075fc:	f1b9 0f00 	cmp.w	r9, #0
 8007600:	da53      	bge.n	80076aa <__ieee754_pow+0x10a>
 8007602:	4b71      	ldr	r3, [pc, #452]	; (80077c8 <__ieee754_pow+0x228>)
 8007604:	429d      	cmp	r5, r3
 8007606:	dc4e      	bgt.n	80076a6 <__ieee754_pow+0x106>
 8007608:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800760c:	429d      	cmp	r5, r3
 800760e:	dd4c      	ble.n	80076aa <__ieee754_pow+0x10a>
 8007610:	152b      	asrs	r3, r5, #20
 8007612:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8007616:	2b14      	cmp	r3, #20
 8007618:	dd28      	ble.n	800766c <__ieee754_pow+0xcc>
 800761a:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800761e:	fa22 f103 	lsr.w	r1, r2, r3
 8007622:	fa01 f303 	lsl.w	r3, r1, r3
 8007626:	4293      	cmp	r3, r2
 8007628:	d13f      	bne.n	80076aa <__ieee754_pow+0x10a>
 800762a:	f001 0101 	and.w	r1, r1, #1
 800762e:	f1c1 0302 	rsb	r3, r1, #2
 8007632:	9300      	str	r3, [sp, #0]
 8007634:	2a00      	cmp	r2, #0
 8007636:	d15c      	bne.n	80076f2 <__ieee754_pow+0x152>
 8007638:	4b61      	ldr	r3, [pc, #388]	; (80077c0 <__ieee754_pow+0x220>)
 800763a:	429d      	cmp	r5, r3
 800763c:	d126      	bne.n	800768c <__ieee754_pow+0xec>
 800763e:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8007642:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8007646:	ea53 030a 	orrs.w	r3, r3, sl
 800764a:	f000 846f 	beq.w	8007f2c <__ieee754_pow+0x98c>
 800764e:	4b5f      	ldr	r3, [pc, #380]	; (80077cc <__ieee754_pow+0x22c>)
 8007650:	429c      	cmp	r4, r3
 8007652:	dd2c      	ble.n	80076ae <__ieee754_pow+0x10e>
 8007654:	2e00      	cmp	r6, #0
 8007656:	f280 846f 	bge.w	8007f38 <__ieee754_pow+0x998>
 800765a:	f04f 0b00 	mov.w	fp, #0
 800765e:	f04f 0c00 	mov.w	ip, #0
 8007662:	4658      	mov	r0, fp
 8007664:	4661      	mov	r1, ip
 8007666:	b011      	add	sp, #68	; 0x44
 8007668:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800766c:	2a00      	cmp	r2, #0
 800766e:	d13e      	bne.n	80076ee <__ieee754_pow+0x14e>
 8007670:	f1c3 0314 	rsb	r3, r3, #20
 8007674:	fa45 f103 	asr.w	r1, r5, r3
 8007678:	fa01 f303 	lsl.w	r3, r1, r3
 800767c:	42ab      	cmp	r3, r5
 800767e:	f040 8463 	bne.w	8007f48 <__ieee754_pow+0x9a8>
 8007682:	f001 0101 	and.w	r1, r1, #1
 8007686:	f1c1 0302 	rsb	r3, r1, #2
 800768a:	9300      	str	r3, [sp, #0]
 800768c:	4b50      	ldr	r3, [pc, #320]	; (80077d0 <__ieee754_pow+0x230>)
 800768e:	429d      	cmp	r5, r3
 8007690:	d114      	bne.n	80076bc <__ieee754_pow+0x11c>
 8007692:	2e00      	cmp	r6, #0
 8007694:	f280 8454 	bge.w	8007f40 <__ieee754_pow+0x9a0>
 8007698:	463a      	mov	r2, r7
 800769a:	4643      	mov	r3, r8
 800769c:	2000      	movs	r0, #0
 800769e:	494c      	ldr	r1, [pc, #304]	; (80077d0 <__ieee754_pow+0x230>)
 80076a0:	f7f9 f844 	bl	800072c <__aeabi_ddiv>
 80076a4:	e013      	b.n	80076ce <__ieee754_pow+0x12e>
 80076a6:	2302      	movs	r3, #2
 80076a8:	e7c3      	b.n	8007632 <__ieee754_pow+0x92>
 80076aa:	2300      	movs	r3, #0
 80076ac:	e7c1      	b.n	8007632 <__ieee754_pow+0x92>
 80076ae:	2e00      	cmp	r6, #0
 80076b0:	dad3      	bge.n	800765a <__ieee754_pow+0xba>
 80076b2:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 80076b6:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 80076ba:	e7d2      	b.n	8007662 <__ieee754_pow+0xc2>
 80076bc:	f1b6 4f80 	cmp.w	r6, #1073741824	; 0x40000000
 80076c0:	d108      	bne.n	80076d4 <__ieee754_pow+0x134>
 80076c2:	463a      	mov	r2, r7
 80076c4:	4643      	mov	r3, r8
 80076c6:	4638      	mov	r0, r7
 80076c8:	4641      	mov	r1, r8
 80076ca:	f7f8 ff05 	bl	80004d8 <__aeabi_dmul>
 80076ce:	4683      	mov	fp, r0
 80076d0:	468c      	mov	ip, r1
 80076d2:	e7c6      	b.n	8007662 <__ieee754_pow+0xc2>
 80076d4:	4b3f      	ldr	r3, [pc, #252]	; (80077d4 <__ieee754_pow+0x234>)
 80076d6:	429e      	cmp	r6, r3
 80076d8:	d10b      	bne.n	80076f2 <__ieee754_pow+0x152>
 80076da:	f1b9 0f00 	cmp.w	r9, #0
 80076de:	db08      	blt.n	80076f2 <__ieee754_pow+0x152>
 80076e0:	4638      	mov	r0, r7
 80076e2:	4641      	mov	r1, r8
 80076e4:	b011      	add	sp, #68	; 0x44
 80076e6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076ea:	f000 bc63 	b.w	8007fb4 <__ieee754_sqrt>
 80076ee:	2300      	movs	r3, #0
 80076f0:	9300      	str	r3, [sp, #0]
 80076f2:	4638      	mov	r0, r7
 80076f4:	4641      	mov	r1, r8
 80076f6:	f000 fd09 	bl	800810c <fabs>
 80076fa:	4683      	mov	fp, r0
 80076fc:	468c      	mov	ip, r1
 80076fe:	f1ba 0f00 	cmp.w	sl, #0
 8007702:	d12b      	bne.n	800775c <__ieee754_pow+0x1bc>
 8007704:	b124      	cbz	r4, 8007710 <__ieee754_pow+0x170>
 8007706:	4b32      	ldr	r3, [pc, #200]	; (80077d0 <__ieee754_pow+0x230>)
 8007708:	f029 4240 	bic.w	r2, r9, #3221225472	; 0xc0000000
 800770c:	429a      	cmp	r2, r3
 800770e:	d125      	bne.n	800775c <__ieee754_pow+0x1bc>
 8007710:	2e00      	cmp	r6, #0
 8007712:	da07      	bge.n	8007724 <__ieee754_pow+0x184>
 8007714:	465a      	mov	r2, fp
 8007716:	4663      	mov	r3, ip
 8007718:	2000      	movs	r0, #0
 800771a:	492d      	ldr	r1, [pc, #180]	; (80077d0 <__ieee754_pow+0x230>)
 800771c:	f7f9 f806 	bl	800072c <__aeabi_ddiv>
 8007720:	4683      	mov	fp, r0
 8007722:	468c      	mov	ip, r1
 8007724:	f1b9 0f00 	cmp.w	r9, #0
 8007728:	da9b      	bge.n	8007662 <__ieee754_pow+0xc2>
 800772a:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800772e:	9b00      	ldr	r3, [sp, #0]
 8007730:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8007734:	4323      	orrs	r3, r4
 8007736:	d108      	bne.n	800774a <__ieee754_pow+0x1aa>
 8007738:	465a      	mov	r2, fp
 800773a:	4663      	mov	r3, ip
 800773c:	4658      	mov	r0, fp
 800773e:	4661      	mov	r1, ip
 8007740:	f7f8 fd12 	bl	8000168 <__aeabi_dsub>
 8007744:	4602      	mov	r2, r0
 8007746:	460b      	mov	r3, r1
 8007748:	e7aa      	b.n	80076a0 <__ieee754_pow+0x100>
 800774a:	9b00      	ldr	r3, [sp, #0]
 800774c:	2b01      	cmp	r3, #1
 800774e:	d188      	bne.n	8007662 <__ieee754_pow+0xc2>
 8007750:	4658      	mov	r0, fp
 8007752:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 8007756:	4683      	mov	fp, r0
 8007758:	469c      	mov	ip, r3
 800775a:	e782      	b.n	8007662 <__ieee754_pow+0xc2>
 800775c:	ea4f 79d9 	mov.w	r9, r9, lsr #31
 8007760:	f109 33ff 	add.w	r3, r9, #4294967295
 8007764:	930d      	str	r3, [sp, #52]	; 0x34
 8007766:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007768:	9b00      	ldr	r3, [sp, #0]
 800776a:	4313      	orrs	r3, r2
 800776c:	d104      	bne.n	8007778 <__ieee754_pow+0x1d8>
 800776e:	463a      	mov	r2, r7
 8007770:	4643      	mov	r3, r8
 8007772:	4638      	mov	r0, r7
 8007774:	4641      	mov	r1, r8
 8007776:	e7e3      	b.n	8007740 <__ieee754_pow+0x1a0>
 8007778:	4b17      	ldr	r3, [pc, #92]	; (80077d8 <__ieee754_pow+0x238>)
 800777a:	429d      	cmp	r5, r3
 800777c:	f340 80fe 	ble.w	800797c <__ieee754_pow+0x3dc>
 8007780:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8007784:	429d      	cmp	r5, r3
 8007786:	dd0b      	ble.n	80077a0 <__ieee754_pow+0x200>
 8007788:	4b10      	ldr	r3, [pc, #64]	; (80077cc <__ieee754_pow+0x22c>)
 800778a:	429c      	cmp	r4, r3
 800778c:	dc0e      	bgt.n	80077ac <__ieee754_pow+0x20c>
 800778e:	2e00      	cmp	r6, #0
 8007790:	f6bf af63 	bge.w	800765a <__ieee754_pow+0xba>
 8007794:	a308      	add	r3, pc, #32	; (adr r3, 80077b8 <__ieee754_pow+0x218>)
 8007796:	e9d3 2300 	ldrd	r2, r3, [r3]
 800779a:	4610      	mov	r0, r2
 800779c:	4619      	mov	r1, r3
 800779e:	e794      	b.n	80076ca <__ieee754_pow+0x12a>
 80077a0:	4b0e      	ldr	r3, [pc, #56]	; (80077dc <__ieee754_pow+0x23c>)
 80077a2:	429c      	cmp	r4, r3
 80077a4:	ddf3      	ble.n	800778e <__ieee754_pow+0x1ee>
 80077a6:	4b0a      	ldr	r3, [pc, #40]	; (80077d0 <__ieee754_pow+0x230>)
 80077a8:	429c      	cmp	r4, r3
 80077aa:	dd19      	ble.n	80077e0 <__ieee754_pow+0x240>
 80077ac:	2e00      	cmp	r6, #0
 80077ae:	dcf1      	bgt.n	8007794 <__ieee754_pow+0x1f4>
 80077b0:	e753      	b.n	800765a <__ieee754_pow+0xba>
 80077b2:	bf00      	nop
 80077b4:	f3af 8000 	nop.w
 80077b8:	8800759c 	.word	0x8800759c
 80077bc:	7e37e43c 	.word	0x7e37e43c
 80077c0:	7ff00000 	.word	0x7ff00000
 80077c4:	08008559 	.word	0x08008559
 80077c8:	433fffff 	.word	0x433fffff
 80077cc:	3fefffff 	.word	0x3fefffff
 80077d0:	3ff00000 	.word	0x3ff00000
 80077d4:	3fe00000 	.word	0x3fe00000
 80077d8:	41e00000 	.word	0x41e00000
 80077dc:	3feffffe 	.word	0x3feffffe
 80077e0:	4661      	mov	r1, ip
 80077e2:	2200      	movs	r2, #0
 80077e4:	4b60      	ldr	r3, [pc, #384]	; (8007968 <__ieee754_pow+0x3c8>)
 80077e6:	4658      	mov	r0, fp
 80077e8:	f7f8 fcbe 	bl	8000168 <__aeabi_dsub>
 80077ec:	a354      	add	r3, pc, #336	; (adr r3, 8007940 <__ieee754_pow+0x3a0>)
 80077ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077f2:	4604      	mov	r4, r0
 80077f4:	460d      	mov	r5, r1
 80077f6:	f7f8 fe6f 	bl	80004d8 <__aeabi_dmul>
 80077fa:	a353      	add	r3, pc, #332	; (adr r3, 8007948 <__ieee754_pow+0x3a8>)
 80077fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007800:	4606      	mov	r6, r0
 8007802:	460f      	mov	r7, r1
 8007804:	4620      	mov	r0, r4
 8007806:	4629      	mov	r1, r5
 8007808:	f7f8 fe66 	bl	80004d8 <__aeabi_dmul>
 800780c:	2200      	movs	r2, #0
 800780e:	4682      	mov	sl, r0
 8007810:	468b      	mov	fp, r1
 8007812:	4b56      	ldr	r3, [pc, #344]	; (800796c <__ieee754_pow+0x3cc>)
 8007814:	4620      	mov	r0, r4
 8007816:	4629      	mov	r1, r5
 8007818:	f7f8 fe5e 	bl	80004d8 <__aeabi_dmul>
 800781c:	4602      	mov	r2, r0
 800781e:	460b      	mov	r3, r1
 8007820:	a14b      	add	r1, pc, #300	; (adr r1, 8007950 <__ieee754_pow+0x3b0>)
 8007822:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007826:	f7f8 fc9f 	bl	8000168 <__aeabi_dsub>
 800782a:	4622      	mov	r2, r4
 800782c:	462b      	mov	r3, r5
 800782e:	f7f8 fe53 	bl	80004d8 <__aeabi_dmul>
 8007832:	4602      	mov	r2, r0
 8007834:	460b      	mov	r3, r1
 8007836:	2000      	movs	r0, #0
 8007838:	494d      	ldr	r1, [pc, #308]	; (8007970 <__ieee754_pow+0x3d0>)
 800783a:	f7f8 fc95 	bl	8000168 <__aeabi_dsub>
 800783e:	4622      	mov	r2, r4
 8007840:	462b      	mov	r3, r5
 8007842:	4680      	mov	r8, r0
 8007844:	4689      	mov	r9, r1
 8007846:	4620      	mov	r0, r4
 8007848:	4629      	mov	r1, r5
 800784a:	f7f8 fe45 	bl	80004d8 <__aeabi_dmul>
 800784e:	4602      	mov	r2, r0
 8007850:	460b      	mov	r3, r1
 8007852:	4640      	mov	r0, r8
 8007854:	4649      	mov	r1, r9
 8007856:	f7f8 fe3f 	bl	80004d8 <__aeabi_dmul>
 800785a:	a33f      	add	r3, pc, #252	; (adr r3, 8007958 <__ieee754_pow+0x3b8>)
 800785c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007860:	f7f8 fe3a 	bl	80004d8 <__aeabi_dmul>
 8007864:	4602      	mov	r2, r0
 8007866:	460b      	mov	r3, r1
 8007868:	4650      	mov	r0, sl
 800786a:	4659      	mov	r1, fp
 800786c:	f7f8 fc7c 	bl	8000168 <__aeabi_dsub>
 8007870:	4602      	mov	r2, r0
 8007872:	460b      	mov	r3, r1
 8007874:	4604      	mov	r4, r0
 8007876:	460d      	mov	r5, r1
 8007878:	4630      	mov	r0, r6
 800787a:	4639      	mov	r1, r7
 800787c:	f7f8 fc76 	bl	800016c <__adddf3>
 8007880:	2000      	movs	r0, #0
 8007882:	468b      	mov	fp, r1
 8007884:	4682      	mov	sl, r0
 8007886:	4632      	mov	r2, r6
 8007888:	463b      	mov	r3, r7
 800788a:	f7f8 fc6d 	bl	8000168 <__aeabi_dsub>
 800788e:	4602      	mov	r2, r0
 8007890:	460b      	mov	r3, r1
 8007892:	4620      	mov	r0, r4
 8007894:	4629      	mov	r1, r5
 8007896:	f7f8 fc67 	bl	8000168 <__aeabi_dsub>
 800789a:	9b00      	ldr	r3, [sp, #0]
 800789c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800789e:	3b01      	subs	r3, #1
 80078a0:	4313      	orrs	r3, r2
 80078a2:	f04f 0300 	mov.w	r3, #0
 80078a6:	bf0c      	ite	eq
 80078a8:	4c32      	ldreq	r4, [pc, #200]	; (8007974 <__ieee754_pow+0x3d4>)
 80078aa:	4c2f      	ldrne	r4, [pc, #188]	; (8007968 <__ieee754_pow+0x3c8>)
 80078ac:	4606      	mov	r6, r0
 80078ae:	e9cd 3400 	strd	r3, r4, [sp]
 80078b2:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80078b6:	2400      	movs	r4, #0
 80078b8:	460f      	mov	r7, r1
 80078ba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80078be:	4622      	mov	r2, r4
 80078c0:	462b      	mov	r3, r5
 80078c2:	f7f8 fc51 	bl	8000168 <__aeabi_dsub>
 80078c6:	4652      	mov	r2, sl
 80078c8:	465b      	mov	r3, fp
 80078ca:	f7f8 fe05 	bl	80004d8 <__aeabi_dmul>
 80078ce:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80078d2:	4680      	mov	r8, r0
 80078d4:	4689      	mov	r9, r1
 80078d6:	4630      	mov	r0, r6
 80078d8:	4639      	mov	r1, r7
 80078da:	f7f8 fdfd 	bl	80004d8 <__aeabi_dmul>
 80078de:	4602      	mov	r2, r0
 80078e0:	460b      	mov	r3, r1
 80078e2:	4640      	mov	r0, r8
 80078e4:	4649      	mov	r1, r9
 80078e6:	f7f8 fc41 	bl	800016c <__adddf3>
 80078ea:	4622      	mov	r2, r4
 80078ec:	462b      	mov	r3, r5
 80078ee:	4680      	mov	r8, r0
 80078f0:	4689      	mov	r9, r1
 80078f2:	4650      	mov	r0, sl
 80078f4:	4659      	mov	r1, fp
 80078f6:	f7f8 fdef 	bl	80004d8 <__aeabi_dmul>
 80078fa:	4604      	mov	r4, r0
 80078fc:	460d      	mov	r5, r1
 80078fe:	460b      	mov	r3, r1
 8007900:	4602      	mov	r2, r0
 8007902:	4649      	mov	r1, r9
 8007904:	4640      	mov	r0, r8
 8007906:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800790a:	f7f8 fc2f 	bl	800016c <__adddf3>
 800790e:	4b1a      	ldr	r3, [pc, #104]	; (8007978 <__ieee754_pow+0x3d8>)
 8007910:	4682      	mov	sl, r0
 8007912:	4299      	cmp	r1, r3
 8007914:	460f      	mov	r7, r1
 8007916:	460e      	mov	r6, r1
 8007918:	f340 82e1 	ble.w	8007ede <__ieee754_pow+0x93e>
 800791c:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8007920:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8007924:	4303      	orrs	r3, r0
 8007926:	f000 81db 	beq.w	8007ce0 <__ieee754_pow+0x740>
 800792a:	a30d      	add	r3, pc, #52	; (adr r3, 8007960 <__ieee754_pow+0x3c0>)
 800792c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007930:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007934:	f7f8 fdd0 	bl	80004d8 <__aeabi_dmul>
 8007938:	a309      	add	r3, pc, #36	; (adr r3, 8007960 <__ieee754_pow+0x3c0>)
 800793a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800793e:	e6c4      	b.n	80076ca <__ieee754_pow+0x12a>
 8007940:	60000000 	.word	0x60000000
 8007944:	3ff71547 	.word	0x3ff71547
 8007948:	f85ddf44 	.word	0xf85ddf44
 800794c:	3e54ae0b 	.word	0x3e54ae0b
 8007950:	55555555 	.word	0x55555555
 8007954:	3fd55555 	.word	0x3fd55555
 8007958:	652b82fe 	.word	0x652b82fe
 800795c:	3ff71547 	.word	0x3ff71547
 8007960:	8800759c 	.word	0x8800759c
 8007964:	7e37e43c 	.word	0x7e37e43c
 8007968:	3ff00000 	.word	0x3ff00000
 800796c:	3fd00000 	.word	0x3fd00000
 8007970:	3fe00000 	.word	0x3fe00000
 8007974:	bff00000 	.word	0xbff00000
 8007978:	408fffff 	.word	0x408fffff
 800797c:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8007980:	f04f 0200 	mov.w	r2, #0
 8007984:	da08      	bge.n	8007998 <__ieee754_pow+0x3f8>
 8007986:	4658      	mov	r0, fp
 8007988:	4bcd      	ldr	r3, [pc, #820]	; (8007cc0 <__ieee754_pow+0x720>)
 800798a:	4661      	mov	r1, ip
 800798c:	f7f8 fda4 	bl	80004d8 <__aeabi_dmul>
 8007990:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8007994:	4683      	mov	fp, r0
 8007996:	460c      	mov	r4, r1
 8007998:	1523      	asrs	r3, r4, #20
 800799a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800799e:	4413      	add	r3, r2
 80079a0:	930c      	str	r3, [sp, #48]	; 0x30
 80079a2:	4bc8      	ldr	r3, [pc, #800]	; (8007cc4 <__ieee754_pow+0x724>)
 80079a4:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80079a8:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80079ac:	429c      	cmp	r4, r3
 80079ae:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80079b2:	dd08      	ble.n	80079c6 <__ieee754_pow+0x426>
 80079b4:	4bc4      	ldr	r3, [pc, #784]	; (8007cc8 <__ieee754_pow+0x728>)
 80079b6:	429c      	cmp	r4, r3
 80079b8:	f340 815b 	ble.w	8007c72 <__ieee754_pow+0x6d2>
 80079bc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80079be:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80079c2:	3301      	adds	r3, #1
 80079c4:	930c      	str	r3, [sp, #48]	; 0x30
 80079c6:	f04f 0800 	mov.w	r8, #0
 80079ca:	4658      	mov	r0, fp
 80079cc:	4629      	mov	r1, r5
 80079ce:	4bbf      	ldr	r3, [pc, #764]	; (8007ccc <__ieee754_pow+0x72c>)
 80079d0:	ea4f 09c8 	mov.w	r9, r8, lsl #3
 80079d4:	444b      	add	r3, r9
 80079d6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80079da:	e9cd 3408 	strd	r3, r4, [sp, #32]
 80079de:	461a      	mov	r2, r3
 80079e0:	4623      	mov	r3, r4
 80079e2:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80079e6:	f7f8 fbbf 	bl	8000168 <__aeabi_dsub>
 80079ea:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80079ee:	4606      	mov	r6, r0
 80079f0:	460f      	mov	r7, r1
 80079f2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80079f6:	f7f8 fbb9 	bl	800016c <__adddf3>
 80079fa:	4602      	mov	r2, r0
 80079fc:	460b      	mov	r3, r1
 80079fe:	2000      	movs	r0, #0
 8007a00:	49b3      	ldr	r1, [pc, #716]	; (8007cd0 <__ieee754_pow+0x730>)
 8007a02:	f7f8 fe93 	bl	800072c <__aeabi_ddiv>
 8007a06:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8007a0a:	4602      	mov	r2, r0
 8007a0c:	460b      	mov	r3, r1
 8007a0e:	4630      	mov	r0, r6
 8007a10:	4639      	mov	r1, r7
 8007a12:	f7f8 fd61 	bl	80004d8 <__aeabi_dmul>
 8007a16:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007a1a:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 8007a1e:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007a22:	2300      	movs	r3, #0
 8007a24:	2200      	movs	r2, #0
 8007a26:	106d      	asrs	r5, r5, #1
 8007a28:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8007a2c:	9304      	str	r3, [sp, #16]
 8007a2e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8007a32:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8007a36:	eb05 4388 	add.w	r3, r5, r8, lsl #18
 8007a3a:	4650      	mov	r0, sl
 8007a3c:	4659      	mov	r1, fp
 8007a3e:	4614      	mov	r4, r2
 8007a40:	461d      	mov	r5, r3
 8007a42:	f7f8 fd49 	bl	80004d8 <__aeabi_dmul>
 8007a46:	4602      	mov	r2, r0
 8007a48:	460b      	mov	r3, r1
 8007a4a:	4630      	mov	r0, r6
 8007a4c:	4639      	mov	r1, r7
 8007a4e:	f7f8 fb8b 	bl	8000168 <__aeabi_dsub>
 8007a52:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007a56:	4606      	mov	r6, r0
 8007a58:	460f      	mov	r7, r1
 8007a5a:	4620      	mov	r0, r4
 8007a5c:	4629      	mov	r1, r5
 8007a5e:	f7f8 fb83 	bl	8000168 <__aeabi_dsub>
 8007a62:	4602      	mov	r2, r0
 8007a64:	460b      	mov	r3, r1
 8007a66:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007a6a:	f7f8 fb7d 	bl	8000168 <__aeabi_dsub>
 8007a6e:	4652      	mov	r2, sl
 8007a70:	465b      	mov	r3, fp
 8007a72:	f7f8 fd31 	bl	80004d8 <__aeabi_dmul>
 8007a76:	4602      	mov	r2, r0
 8007a78:	460b      	mov	r3, r1
 8007a7a:	4630      	mov	r0, r6
 8007a7c:	4639      	mov	r1, r7
 8007a7e:	f7f8 fb73 	bl	8000168 <__aeabi_dsub>
 8007a82:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8007a86:	f7f8 fd27 	bl	80004d8 <__aeabi_dmul>
 8007a8a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007a8e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007a92:	4610      	mov	r0, r2
 8007a94:	4619      	mov	r1, r3
 8007a96:	f7f8 fd1f 	bl	80004d8 <__aeabi_dmul>
 8007a9a:	a377      	add	r3, pc, #476	; (adr r3, 8007c78 <__ieee754_pow+0x6d8>)
 8007a9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007aa0:	4604      	mov	r4, r0
 8007aa2:	460d      	mov	r5, r1
 8007aa4:	f7f8 fd18 	bl	80004d8 <__aeabi_dmul>
 8007aa8:	a375      	add	r3, pc, #468	; (adr r3, 8007c80 <__ieee754_pow+0x6e0>)
 8007aaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007aae:	f7f8 fb5d 	bl	800016c <__adddf3>
 8007ab2:	4622      	mov	r2, r4
 8007ab4:	462b      	mov	r3, r5
 8007ab6:	f7f8 fd0f 	bl	80004d8 <__aeabi_dmul>
 8007aba:	a373      	add	r3, pc, #460	; (adr r3, 8007c88 <__ieee754_pow+0x6e8>)
 8007abc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ac0:	f7f8 fb54 	bl	800016c <__adddf3>
 8007ac4:	4622      	mov	r2, r4
 8007ac6:	462b      	mov	r3, r5
 8007ac8:	f7f8 fd06 	bl	80004d8 <__aeabi_dmul>
 8007acc:	a370      	add	r3, pc, #448	; (adr r3, 8007c90 <__ieee754_pow+0x6f0>)
 8007ace:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ad2:	f7f8 fb4b 	bl	800016c <__adddf3>
 8007ad6:	4622      	mov	r2, r4
 8007ad8:	462b      	mov	r3, r5
 8007ada:	f7f8 fcfd 	bl	80004d8 <__aeabi_dmul>
 8007ade:	a36e      	add	r3, pc, #440	; (adr r3, 8007c98 <__ieee754_pow+0x6f8>)
 8007ae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ae4:	f7f8 fb42 	bl	800016c <__adddf3>
 8007ae8:	4622      	mov	r2, r4
 8007aea:	462b      	mov	r3, r5
 8007aec:	f7f8 fcf4 	bl	80004d8 <__aeabi_dmul>
 8007af0:	a36b      	add	r3, pc, #428	; (adr r3, 8007ca0 <__ieee754_pow+0x700>)
 8007af2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007af6:	f7f8 fb39 	bl	800016c <__adddf3>
 8007afa:	4622      	mov	r2, r4
 8007afc:	4606      	mov	r6, r0
 8007afe:	460f      	mov	r7, r1
 8007b00:	462b      	mov	r3, r5
 8007b02:	4620      	mov	r0, r4
 8007b04:	4629      	mov	r1, r5
 8007b06:	f7f8 fce7 	bl	80004d8 <__aeabi_dmul>
 8007b0a:	4602      	mov	r2, r0
 8007b0c:	460b      	mov	r3, r1
 8007b0e:	4630      	mov	r0, r6
 8007b10:	4639      	mov	r1, r7
 8007b12:	f7f8 fce1 	bl	80004d8 <__aeabi_dmul>
 8007b16:	4604      	mov	r4, r0
 8007b18:	460d      	mov	r5, r1
 8007b1a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007b1e:	4652      	mov	r2, sl
 8007b20:	465b      	mov	r3, fp
 8007b22:	f7f8 fb23 	bl	800016c <__adddf3>
 8007b26:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007b2a:	f7f8 fcd5 	bl	80004d8 <__aeabi_dmul>
 8007b2e:	4622      	mov	r2, r4
 8007b30:	462b      	mov	r3, r5
 8007b32:	f7f8 fb1b 	bl	800016c <__adddf3>
 8007b36:	4652      	mov	r2, sl
 8007b38:	4606      	mov	r6, r0
 8007b3a:	460f      	mov	r7, r1
 8007b3c:	465b      	mov	r3, fp
 8007b3e:	4650      	mov	r0, sl
 8007b40:	4659      	mov	r1, fp
 8007b42:	f7f8 fcc9 	bl	80004d8 <__aeabi_dmul>
 8007b46:	2200      	movs	r2, #0
 8007b48:	4b62      	ldr	r3, [pc, #392]	; (8007cd4 <__ieee754_pow+0x734>)
 8007b4a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8007b4e:	f7f8 fb0d 	bl	800016c <__adddf3>
 8007b52:	4632      	mov	r2, r6
 8007b54:	463b      	mov	r3, r7
 8007b56:	f7f8 fb09 	bl	800016c <__adddf3>
 8007b5a:	9804      	ldr	r0, [sp, #16]
 8007b5c:	460d      	mov	r5, r1
 8007b5e:	4604      	mov	r4, r0
 8007b60:	4602      	mov	r2, r0
 8007b62:	460b      	mov	r3, r1
 8007b64:	4650      	mov	r0, sl
 8007b66:	4659      	mov	r1, fp
 8007b68:	f7f8 fcb6 	bl	80004d8 <__aeabi_dmul>
 8007b6c:	2200      	movs	r2, #0
 8007b6e:	4682      	mov	sl, r0
 8007b70:	468b      	mov	fp, r1
 8007b72:	4b58      	ldr	r3, [pc, #352]	; (8007cd4 <__ieee754_pow+0x734>)
 8007b74:	4620      	mov	r0, r4
 8007b76:	4629      	mov	r1, r5
 8007b78:	f7f8 faf6 	bl	8000168 <__aeabi_dsub>
 8007b7c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007b80:	f7f8 faf2 	bl	8000168 <__aeabi_dsub>
 8007b84:	4602      	mov	r2, r0
 8007b86:	460b      	mov	r3, r1
 8007b88:	4630      	mov	r0, r6
 8007b8a:	4639      	mov	r1, r7
 8007b8c:	f7f8 faec 	bl	8000168 <__aeabi_dsub>
 8007b90:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007b94:	f7f8 fca0 	bl	80004d8 <__aeabi_dmul>
 8007b98:	4622      	mov	r2, r4
 8007b9a:	4606      	mov	r6, r0
 8007b9c:	460f      	mov	r7, r1
 8007b9e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007ba2:	462b      	mov	r3, r5
 8007ba4:	f7f8 fc98 	bl	80004d8 <__aeabi_dmul>
 8007ba8:	4602      	mov	r2, r0
 8007baa:	460b      	mov	r3, r1
 8007bac:	4630      	mov	r0, r6
 8007bae:	4639      	mov	r1, r7
 8007bb0:	f7f8 fadc 	bl	800016c <__adddf3>
 8007bb4:	4606      	mov	r6, r0
 8007bb6:	460f      	mov	r7, r1
 8007bb8:	4602      	mov	r2, r0
 8007bba:	460b      	mov	r3, r1
 8007bbc:	4650      	mov	r0, sl
 8007bbe:	4659      	mov	r1, fp
 8007bc0:	f7f8 fad4 	bl	800016c <__adddf3>
 8007bc4:	a338      	add	r3, pc, #224	; (adr r3, 8007ca8 <__ieee754_pow+0x708>)
 8007bc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bca:	9804      	ldr	r0, [sp, #16]
 8007bcc:	460d      	mov	r5, r1
 8007bce:	4604      	mov	r4, r0
 8007bd0:	f7f8 fc82 	bl	80004d8 <__aeabi_dmul>
 8007bd4:	4652      	mov	r2, sl
 8007bd6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007bda:	465b      	mov	r3, fp
 8007bdc:	4620      	mov	r0, r4
 8007bde:	4629      	mov	r1, r5
 8007be0:	f7f8 fac2 	bl	8000168 <__aeabi_dsub>
 8007be4:	4602      	mov	r2, r0
 8007be6:	460b      	mov	r3, r1
 8007be8:	4630      	mov	r0, r6
 8007bea:	4639      	mov	r1, r7
 8007bec:	f7f8 fabc 	bl	8000168 <__aeabi_dsub>
 8007bf0:	a32f      	add	r3, pc, #188	; (adr r3, 8007cb0 <__ieee754_pow+0x710>)
 8007bf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bf6:	f7f8 fc6f 	bl	80004d8 <__aeabi_dmul>
 8007bfa:	a32f      	add	r3, pc, #188	; (adr r3, 8007cb8 <__ieee754_pow+0x718>)
 8007bfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c00:	4606      	mov	r6, r0
 8007c02:	460f      	mov	r7, r1
 8007c04:	4620      	mov	r0, r4
 8007c06:	4629      	mov	r1, r5
 8007c08:	f7f8 fc66 	bl	80004d8 <__aeabi_dmul>
 8007c0c:	4602      	mov	r2, r0
 8007c0e:	460b      	mov	r3, r1
 8007c10:	4630      	mov	r0, r6
 8007c12:	4639      	mov	r1, r7
 8007c14:	f7f8 faaa 	bl	800016c <__adddf3>
 8007c18:	4b2f      	ldr	r3, [pc, #188]	; (8007cd8 <__ieee754_pow+0x738>)
 8007c1a:	444b      	add	r3, r9
 8007c1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c20:	f7f8 faa4 	bl	800016c <__adddf3>
 8007c24:	4604      	mov	r4, r0
 8007c26:	980c      	ldr	r0, [sp, #48]	; 0x30
 8007c28:	460d      	mov	r5, r1
 8007c2a:	f7f8 fbeb 	bl	8000404 <__aeabi_i2d>
 8007c2e:	4606      	mov	r6, r0
 8007c30:	460f      	mov	r7, r1
 8007c32:	4b2a      	ldr	r3, [pc, #168]	; (8007cdc <__ieee754_pow+0x73c>)
 8007c34:	4622      	mov	r2, r4
 8007c36:	444b      	add	r3, r9
 8007c38:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007c3c:	462b      	mov	r3, r5
 8007c3e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007c42:	f7f8 fa93 	bl	800016c <__adddf3>
 8007c46:	4642      	mov	r2, r8
 8007c48:	464b      	mov	r3, r9
 8007c4a:	f7f8 fa8f 	bl	800016c <__adddf3>
 8007c4e:	4632      	mov	r2, r6
 8007c50:	463b      	mov	r3, r7
 8007c52:	f7f8 fa8b 	bl	800016c <__adddf3>
 8007c56:	9804      	ldr	r0, [sp, #16]
 8007c58:	4632      	mov	r2, r6
 8007c5a:	463b      	mov	r3, r7
 8007c5c:	4682      	mov	sl, r0
 8007c5e:	468b      	mov	fp, r1
 8007c60:	f7f8 fa82 	bl	8000168 <__aeabi_dsub>
 8007c64:	4642      	mov	r2, r8
 8007c66:	464b      	mov	r3, r9
 8007c68:	f7f8 fa7e 	bl	8000168 <__aeabi_dsub>
 8007c6c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007c70:	e60b      	b.n	800788a <__ieee754_pow+0x2ea>
 8007c72:	f04f 0801 	mov.w	r8, #1
 8007c76:	e6a8      	b.n	80079ca <__ieee754_pow+0x42a>
 8007c78:	4a454eef 	.word	0x4a454eef
 8007c7c:	3fca7e28 	.word	0x3fca7e28
 8007c80:	93c9db65 	.word	0x93c9db65
 8007c84:	3fcd864a 	.word	0x3fcd864a
 8007c88:	a91d4101 	.word	0xa91d4101
 8007c8c:	3fd17460 	.word	0x3fd17460
 8007c90:	518f264d 	.word	0x518f264d
 8007c94:	3fd55555 	.word	0x3fd55555
 8007c98:	db6fabff 	.word	0xdb6fabff
 8007c9c:	3fdb6db6 	.word	0x3fdb6db6
 8007ca0:	33333303 	.word	0x33333303
 8007ca4:	3fe33333 	.word	0x3fe33333
 8007ca8:	e0000000 	.word	0xe0000000
 8007cac:	3feec709 	.word	0x3feec709
 8007cb0:	dc3a03fd 	.word	0xdc3a03fd
 8007cb4:	3feec709 	.word	0x3feec709
 8007cb8:	145b01f5 	.word	0x145b01f5
 8007cbc:	be3e2fe0 	.word	0xbe3e2fe0
 8007cc0:	43400000 	.word	0x43400000
 8007cc4:	0003988e 	.word	0x0003988e
 8007cc8:	000bb679 	.word	0x000bb679
 8007ccc:	08008678 	.word	0x08008678
 8007cd0:	3ff00000 	.word	0x3ff00000
 8007cd4:	40080000 	.word	0x40080000
 8007cd8:	08008698 	.word	0x08008698
 8007cdc:	08008688 	.word	0x08008688
 8007ce0:	a39b      	add	r3, pc, #620	; (adr r3, 8007f50 <__ieee754_pow+0x9b0>)
 8007ce2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ce6:	4640      	mov	r0, r8
 8007ce8:	4649      	mov	r1, r9
 8007cea:	f7f8 fa3f 	bl	800016c <__adddf3>
 8007cee:	4622      	mov	r2, r4
 8007cf0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007cf4:	462b      	mov	r3, r5
 8007cf6:	4650      	mov	r0, sl
 8007cf8:	4639      	mov	r1, r7
 8007cfa:	f7f8 fa35 	bl	8000168 <__aeabi_dsub>
 8007cfe:	4602      	mov	r2, r0
 8007d00:	460b      	mov	r3, r1
 8007d02:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007d06:	f7f8 fe77 	bl	80009f8 <__aeabi_dcmpgt>
 8007d0a:	2800      	cmp	r0, #0
 8007d0c:	f47f ae0d 	bne.w	800792a <__ieee754_pow+0x38a>
 8007d10:	4aa3      	ldr	r2, [pc, #652]	; (8007fa0 <__ieee754_pow+0xa00>)
 8007d12:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 8007d16:	4293      	cmp	r3, r2
 8007d18:	f340 8103 	ble.w	8007f22 <__ieee754_pow+0x982>
 8007d1c:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8007d20:	2000      	movs	r0, #0
 8007d22:	151b      	asrs	r3, r3, #20
 8007d24:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8007d28:	fa4a f303 	asr.w	r3, sl, r3
 8007d2c:	4433      	add	r3, r6
 8007d2e:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8007d32:	4f9c      	ldr	r7, [pc, #624]	; (8007fa4 <__ieee754_pow+0xa04>)
 8007d34:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8007d38:	4117      	asrs	r7, r2
 8007d3a:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8007d3e:	ea23 0107 	bic.w	r1, r3, r7
 8007d42:	f1c2 0214 	rsb	r2, r2, #20
 8007d46:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8007d4a:	fa4a fa02 	asr.w	sl, sl, r2
 8007d4e:	2e00      	cmp	r6, #0
 8007d50:	4602      	mov	r2, r0
 8007d52:	460b      	mov	r3, r1
 8007d54:	4620      	mov	r0, r4
 8007d56:	4629      	mov	r1, r5
 8007d58:	bfb8      	it	lt
 8007d5a:	f1ca 0a00 	rsblt	sl, sl, #0
 8007d5e:	f7f8 fa03 	bl	8000168 <__aeabi_dsub>
 8007d62:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007d66:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007d6a:	4642      	mov	r2, r8
 8007d6c:	464b      	mov	r3, r9
 8007d6e:	f7f8 f9fd 	bl	800016c <__adddf3>
 8007d72:	a379      	add	r3, pc, #484	; (adr r3, 8007f58 <__ieee754_pow+0x9b8>)
 8007d74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d78:	2000      	movs	r0, #0
 8007d7a:	460d      	mov	r5, r1
 8007d7c:	4604      	mov	r4, r0
 8007d7e:	f7f8 fbab 	bl	80004d8 <__aeabi_dmul>
 8007d82:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007d86:	4606      	mov	r6, r0
 8007d88:	460f      	mov	r7, r1
 8007d8a:	4620      	mov	r0, r4
 8007d8c:	4629      	mov	r1, r5
 8007d8e:	f7f8 f9eb 	bl	8000168 <__aeabi_dsub>
 8007d92:	4602      	mov	r2, r0
 8007d94:	460b      	mov	r3, r1
 8007d96:	4640      	mov	r0, r8
 8007d98:	4649      	mov	r1, r9
 8007d9a:	f7f8 f9e5 	bl	8000168 <__aeabi_dsub>
 8007d9e:	a370      	add	r3, pc, #448	; (adr r3, 8007f60 <__ieee754_pow+0x9c0>)
 8007da0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007da4:	f7f8 fb98 	bl	80004d8 <__aeabi_dmul>
 8007da8:	a36f      	add	r3, pc, #444	; (adr r3, 8007f68 <__ieee754_pow+0x9c8>)
 8007daa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dae:	4680      	mov	r8, r0
 8007db0:	4689      	mov	r9, r1
 8007db2:	4620      	mov	r0, r4
 8007db4:	4629      	mov	r1, r5
 8007db6:	f7f8 fb8f 	bl	80004d8 <__aeabi_dmul>
 8007dba:	4602      	mov	r2, r0
 8007dbc:	460b      	mov	r3, r1
 8007dbe:	4640      	mov	r0, r8
 8007dc0:	4649      	mov	r1, r9
 8007dc2:	f7f8 f9d3 	bl	800016c <__adddf3>
 8007dc6:	4604      	mov	r4, r0
 8007dc8:	460d      	mov	r5, r1
 8007dca:	4602      	mov	r2, r0
 8007dcc:	460b      	mov	r3, r1
 8007dce:	4630      	mov	r0, r6
 8007dd0:	4639      	mov	r1, r7
 8007dd2:	f7f8 f9cb 	bl	800016c <__adddf3>
 8007dd6:	4632      	mov	r2, r6
 8007dd8:	463b      	mov	r3, r7
 8007dda:	4680      	mov	r8, r0
 8007ddc:	4689      	mov	r9, r1
 8007dde:	f7f8 f9c3 	bl	8000168 <__aeabi_dsub>
 8007de2:	4602      	mov	r2, r0
 8007de4:	460b      	mov	r3, r1
 8007de6:	4620      	mov	r0, r4
 8007de8:	4629      	mov	r1, r5
 8007dea:	f7f8 f9bd 	bl	8000168 <__aeabi_dsub>
 8007dee:	4642      	mov	r2, r8
 8007df0:	4606      	mov	r6, r0
 8007df2:	460f      	mov	r7, r1
 8007df4:	464b      	mov	r3, r9
 8007df6:	4640      	mov	r0, r8
 8007df8:	4649      	mov	r1, r9
 8007dfa:	f7f8 fb6d 	bl	80004d8 <__aeabi_dmul>
 8007dfe:	a35c      	add	r3, pc, #368	; (adr r3, 8007f70 <__ieee754_pow+0x9d0>)
 8007e00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e04:	4604      	mov	r4, r0
 8007e06:	460d      	mov	r5, r1
 8007e08:	f7f8 fb66 	bl	80004d8 <__aeabi_dmul>
 8007e0c:	a35a      	add	r3, pc, #360	; (adr r3, 8007f78 <__ieee754_pow+0x9d8>)
 8007e0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e12:	f7f8 f9a9 	bl	8000168 <__aeabi_dsub>
 8007e16:	4622      	mov	r2, r4
 8007e18:	462b      	mov	r3, r5
 8007e1a:	f7f8 fb5d 	bl	80004d8 <__aeabi_dmul>
 8007e1e:	a358      	add	r3, pc, #352	; (adr r3, 8007f80 <__ieee754_pow+0x9e0>)
 8007e20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e24:	f7f8 f9a2 	bl	800016c <__adddf3>
 8007e28:	4622      	mov	r2, r4
 8007e2a:	462b      	mov	r3, r5
 8007e2c:	f7f8 fb54 	bl	80004d8 <__aeabi_dmul>
 8007e30:	a355      	add	r3, pc, #340	; (adr r3, 8007f88 <__ieee754_pow+0x9e8>)
 8007e32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e36:	f7f8 f997 	bl	8000168 <__aeabi_dsub>
 8007e3a:	4622      	mov	r2, r4
 8007e3c:	462b      	mov	r3, r5
 8007e3e:	f7f8 fb4b 	bl	80004d8 <__aeabi_dmul>
 8007e42:	a353      	add	r3, pc, #332	; (adr r3, 8007f90 <__ieee754_pow+0x9f0>)
 8007e44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e48:	f7f8 f990 	bl	800016c <__adddf3>
 8007e4c:	4622      	mov	r2, r4
 8007e4e:	462b      	mov	r3, r5
 8007e50:	f7f8 fb42 	bl	80004d8 <__aeabi_dmul>
 8007e54:	4602      	mov	r2, r0
 8007e56:	460b      	mov	r3, r1
 8007e58:	4640      	mov	r0, r8
 8007e5a:	4649      	mov	r1, r9
 8007e5c:	f7f8 f984 	bl	8000168 <__aeabi_dsub>
 8007e60:	4604      	mov	r4, r0
 8007e62:	460d      	mov	r5, r1
 8007e64:	4602      	mov	r2, r0
 8007e66:	460b      	mov	r3, r1
 8007e68:	4640      	mov	r0, r8
 8007e6a:	4649      	mov	r1, r9
 8007e6c:	f7f8 fb34 	bl	80004d8 <__aeabi_dmul>
 8007e70:	2200      	movs	r2, #0
 8007e72:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007e76:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007e7a:	4620      	mov	r0, r4
 8007e7c:	4629      	mov	r1, r5
 8007e7e:	f7f8 f973 	bl	8000168 <__aeabi_dsub>
 8007e82:	4602      	mov	r2, r0
 8007e84:	460b      	mov	r3, r1
 8007e86:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007e8a:	f7f8 fc4f 	bl	800072c <__aeabi_ddiv>
 8007e8e:	4632      	mov	r2, r6
 8007e90:	4604      	mov	r4, r0
 8007e92:	460d      	mov	r5, r1
 8007e94:	463b      	mov	r3, r7
 8007e96:	4640      	mov	r0, r8
 8007e98:	4649      	mov	r1, r9
 8007e9a:	f7f8 fb1d 	bl	80004d8 <__aeabi_dmul>
 8007e9e:	4632      	mov	r2, r6
 8007ea0:	463b      	mov	r3, r7
 8007ea2:	f7f8 f963 	bl	800016c <__adddf3>
 8007ea6:	4602      	mov	r2, r0
 8007ea8:	460b      	mov	r3, r1
 8007eaa:	4620      	mov	r0, r4
 8007eac:	4629      	mov	r1, r5
 8007eae:	f7f8 f95b 	bl	8000168 <__aeabi_dsub>
 8007eb2:	4642      	mov	r2, r8
 8007eb4:	464b      	mov	r3, r9
 8007eb6:	f7f8 f957 	bl	8000168 <__aeabi_dsub>
 8007eba:	4602      	mov	r2, r0
 8007ebc:	460b      	mov	r3, r1
 8007ebe:	2000      	movs	r0, #0
 8007ec0:	4939      	ldr	r1, [pc, #228]	; (8007fa8 <__ieee754_pow+0xa08>)
 8007ec2:	f7f8 f951 	bl	8000168 <__aeabi_dsub>
 8007ec6:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8007eca:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8007ece:	da2b      	bge.n	8007f28 <__ieee754_pow+0x988>
 8007ed0:	4652      	mov	r2, sl
 8007ed2:	f000 f9b9 	bl	8008248 <scalbn>
 8007ed6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007eda:	f7ff bbf6 	b.w	80076ca <__ieee754_pow+0x12a>
 8007ede:	4b33      	ldr	r3, [pc, #204]	; (8007fac <__ieee754_pow+0xa0c>)
 8007ee0:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 8007ee4:	429f      	cmp	r7, r3
 8007ee6:	f77f af13 	ble.w	8007d10 <__ieee754_pow+0x770>
 8007eea:	4b31      	ldr	r3, [pc, #196]	; (8007fb0 <__ieee754_pow+0xa10>)
 8007eec:	440b      	add	r3, r1
 8007eee:	4303      	orrs	r3, r0
 8007ef0:	d00b      	beq.n	8007f0a <__ieee754_pow+0x96a>
 8007ef2:	a329      	add	r3, pc, #164	; (adr r3, 8007f98 <__ieee754_pow+0x9f8>)
 8007ef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ef8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007efc:	f7f8 faec 	bl	80004d8 <__aeabi_dmul>
 8007f00:	a325      	add	r3, pc, #148	; (adr r3, 8007f98 <__ieee754_pow+0x9f8>)
 8007f02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f06:	f7ff bbe0 	b.w	80076ca <__ieee754_pow+0x12a>
 8007f0a:	4622      	mov	r2, r4
 8007f0c:	462b      	mov	r3, r5
 8007f0e:	f7f8 f92b 	bl	8000168 <__aeabi_dsub>
 8007f12:	4642      	mov	r2, r8
 8007f14:	464b      	mov	r3, r9
 8007f16:	f7f8 fd65 	bl	80009e4 <__aeabi_dcmpge>
 8007f1a:	2800      	cmp	r0, #0
 8007f1c:	f43f aef8 	beq.w	8007d10 <__ieee754_pow+0x770>
 8007f20:	e7e7      	b.n	8007ef2 <__ieee754_pow+0x952>
 8007f22:	f04f 0a00 	mov.w	sl, #0
 8007f26:	e71e      	b.n	8007d66 <__ieee754_pow+0x7c6>
 8007f28:	4621      	mov	r1, r4
 8007f2a:	e7d4      	b.n	8007ed6 <__ieee754_pow+0x936>
 8007f2c:	f04f 0b00 	mov.w	fp, #0
 8007f30:	f8df c074 	ldr.w	ip, [pc, #116]	; 8007fa8 <__ieee754_pow+0xa08>
 8007f34:	f7ff bb95 	b.w	8007662 <__ieee754_pow+0xc2>
 8007f38:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 8007f3c:	f7ff bb91 	b.w	8007662 <__ieee754_pow+0xc2>
 8007f40:	4638      	mov	r0, r7
 8007f42:	4641      	mov	r1, r8
 8007f44:	f7ff bbc3 	b.w	80076ce <__ieee754_pow+0x12e>
 8007f48:	9200      	str	r2, [sp, #0]
 8007f4a:	f7ff bb9f 	b.w	800768c <__ieee754_pow+0xec>
 8007f4e:	bf00      	nop
 8007f50:	652b82fe 	.word	0x652b82fe
 8007f54:	3c971547 	.word	0x3c971547
 8007f58:	00000000 	.word	0x00000000
 8007f5c:	3fe62e43 	.word	0x3fe62e43
 8007f60:	fefa39ef 	.word	0xfefa39ef
 8007f64:	3fe62e42 	.word	0x3fe62e42
 8007f68:	0ca86c39 	.word	0x0ca86c39
 8007f6c:	be205c61 	.word	0xbe205c61
 8007f70:	72bea4d0 	.word	0x72bea4d0
 8007f74:	3e663769 	.word	0x3e663769
 8007f78:	c5d26bf1 	.word	0xc5d26bf1
 8007f7c:	3ebbbd41 	.word	0x3ebbbd41
 8007f80:	af25de2c 	.word	0xaf25de2c
 8007f84:	3f11566a 	.word	0x3f11566a
 8007f88:	16bebd93 	.word	0x16bebd93
 8007f8c:	3f66c16c 	.word	0x3f66c16c
 8007f90:	5555553e 	.word	0x5555553e
 8007f94:	3fc55555 	.word	0x3fc55555
 8007f98:	c2f8f359 	.word	0xc2f8f359
 8007f9c:	01a56e1f 	.word	0x01a56e1f
 8007fa0:	3fe00000 	.word	0x3fe00000
 8007fa4:	000fffff 	.word	0x000fffff
 8007fa8:	3ff00000 	.word	0x3ff00000
 8007fac:	4090cbff 	.word	0x4090cbff
 8007fb0:	3f6f3400 	.word	0x3f6f3400

08007fb4 <__ieee754_sqrt>:
 8007fb4:	4b54      	ldr	r3, [pc, #336]	; (8008108 <__ieee754_sqrt+0x154>)
 8007fb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007fba:	438b      	bics	r3, r1
 8007fbc:	4606      	mov	r6, r0
 8007fbe:	460d      	mov	r5, r1
 8007fc0:	460a      	mov	r2, r1
 8007fc2:	460c      	mov	r4, r1
 8007fc4:	d10f      	bne.n	8007fe6 <__ieee754_sqrt+0x32>
 8007fc6:	4602      	mov	r2, r0
 8007fc8:	460b      	mov	r3, r1
 8007fca:	f7f8 fa85 	bl	80004d8 <__aeabi_dmul>
 8007fce:	4602      	mov	r2, r0
 8007fd0:	460b      	mov	r3, r1
 8007fd2:	4630      	mov	r0, r6
 8007fd4:	4629      	mov	r1, r5
 8007fd6:	f7f8 f8c9 	bl	800016c <__adddf3>
 8007fda:	4606      	mov	r6, r0
 8007fdc:	460d      	mov	r5, r1
 8007fde:	4630      	mov	r0, r6
 8007fe0:	4629      	mov	r1, r5
 8007fe2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007fe6:	2900      	cmp	r1, #0
 8007fe8:	4607      	mov	r7, r0
 8007fea:	4603      	mov	r3, r0
 8007fec:	dc0e      	bgt.n	800800c <__ieee754_sqrt+0x58>
 8007fee:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 8007ff2:	ea5c 0707 	orrs.w	r7, ip, r7
 8007ff6:	d0f2      	beq.n	8007fde <__ieee754_sqrt+0x2a>
 8007ff8:	b141      	cbz	r1, 800800c <__ieee754_sqrt+0x58>
 8007ffa:	4602      	mov	r2, r0
 8007ffc:	460b      	mov	r3, r1
 8007ffe:	f7f8 f8b3 	bl	8000168 <__aeabi_dsub>
 8008002:	4602      	mov	r2, r0
 8008004:	460b      	mov	r3, r1
 8008006:	f7f8 fb91 	bl	800072c <__aeabi_ddiv>
 800800a:	e7e6      	b.n	8007fda <__ieee754_sqrt+0x26>
 800800c:	1512      	asrs	r2, r2, #20
 800800e:	d074      	beq.n	80080fa <__ieee754_sqrt+0x146>
 8008010:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8008014:	07d5      	lsls	r5, r2, #31
 8008016:	f04f 0500 	mov.w	r5, #0
 800801a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800801e:	bf48      	it	mi
 8008020:	0fd9      	lsrmi	r1, r3, #31
 8008022:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
 8008026:	bf44      	itt	mi
 8008028:	005b      	lslmi	r3, r3, #1
 800802a:	eb01 0444 	addmi.w	r4, r1, r4, lsl #1
 800802e:	1051      	asrs	r1, r2, #1
 8008030:	0fda      	lsrs	r2, r3, #31
 8008032:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8008036:	4628      	mov	r0, r5
 8008038:	2216      	movs	r2, #22
 800803a:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 800803e:	005b      	lsls	r3, r3, #1
 8008040:	1987      	adds	r7, r0, r6
 8008042:	42a7      	cmp	r7, r4
 8008044:	bfde      	ittt	le
 8008046:	19b8      	addle	r0, r7, r6
 8008048:	1be4      	suble	r4, r4, r7
 800804a:	19ad      	addle	r5, r5, r6
 800804c:	0fdf      	lsrs	r7, r3, #31
 800804e:	3a01      	subs	r2, #1
 8008050:	eb07 0444 	add.w	r4, r7, r4, lsl #1
 8008054:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008058:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800805c:	d1f0      	bne.n	8008040 <__ieee754_sqrt+0x8c>
 800805e:	f04f 0c20 	mov.w	ip, #32
 8008062:	4696      	mov	lr, r2
 8008064:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8008068:	4284      	cmp	r4, r0
 800806a:	eb06 070e 	add.w	r7, r6, lr
 800806e:	dc02      	bgt.n	8008076 <__ieee754_sqrt+0xc2>
 8008070:	d112      	bne.n	8008098 <__ieee754_sqrt+0xe4>
 8008072:	429f      	cmp	r7, r3
 8008074:	d810      	bhi.n	8008098 <__ieee754_sqrt+0xe4>
 8008076:	2f00      	cmp	r7, #0
 8008078:	eb07 0e06 	add.w	lr, r7, r6
 800807c:	da42      	bge.n	8008104 <__ieee754_sqrt+0x150>
 800807e:	f1be 0f00 	cmp.w	lr, #0
 8008082:	db3f      	blt.n	8008104 <__ieee754_sqrt+0x150>
 8008084:	f100 0801 	add.w	r8, r0, #1
 8008088:	1a24      	subs	r4, r4, r0
 800808a:	4640      	mov	r0, r8
 800808c:	429f      	cmp	r7, r3
 800808e:	bf88      	it	hi
 8008090:	f104 34ff 	addhi.w	r4, r4, #4294967295
 8008094:	1bdb      	subs	r3, r3, r7
 8008096:	4432      	add	r2, r6
 8008098:	0064      	lsls	r4, r4, #1
 800809a:	f1bc 0c01 	subs.w	ip, ip, #1
 800809e:	eb04 74d3 	add.w	r4, r4, r3, lsr #31
 80080a2:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80080a6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80080aa:	d1dd      	bne.n	8008068 <__ieee754_sqrt+0xb4>
 80080ac:	4323      	orrs	r3, r4
 80080ae:	d006      	beq.n	80080be <__ieee754_sqrt+0x10a>
 80080b0:	1c54      	adds	r4, r2, #1
 80080b2:	bf0b      	itete	eq
 80080b4:	4662      	moveq	r2, ip
 80080b6:	3201      	addne	r2, #1
 80080b8:	3501      	addeq	r5, #1
 80080ba:	f022 0201 	bicne.w	r2, r2, #1
 80080be:	106b      	asrs	r3, r5, #1
 80080c0:	0852      	lsrs	r2, r2, #1
 80080c2:	07e8      	lsls	r0, r5, #31
 80080c4:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80080c8:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80080cc:	bf48      	it	mi
 80080ce:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 80080d2:	eb03 5501 	add.w	r5, r3, r1, lsl #20
 80080d6:	4616      	mov	r6, r2
 80080d8:	e781      	b.n	8007fde <__ieee754_sqrt+0x2a>
 80080da:	0adc      	lsrs	r4, r3, #11
 80080dc:	3915      	subs	r1, #21
 80080de:	055b      	lsls	r3, r3, #21
 80080e0:	2c00      	cmp	r4, #0
 80080e2:	d0fa      	beq.n	80080da <__ieee754_sqrt+0x126>
 80080e4:	02e6      	lsls	r6, r4, #11
 80080e6:	d50a      	bpl.n	80080fe <__ieee754_sqrt+0x14a>
 80080e8:	f1c2 0020 	rsb	r0, r2, #32
 80080ec:	fa23 f000 	lsr.w	r0, r3, r0
 80080f0:	1e55      	subs	r5, r2, #1
 80080f2:	4093      	lsls	r3, r2
 80080f4:	4304      	orrs	r4, r0
 80080f6:	1b4a      	subs	r2, r1, r5
 80080f8:	e78a      	b.n	8008010 <__ieee754_sqrt+0x5c>
 80080fa:	4611      	mov	r1, r2
 80080fc:	e7f0      	b.n	80080e0 <__ieee754_sqrt+0x12c>
 80080fe:	0064      	lsls	r4, r4, #1
 8008100:	3201      	adds	r2, #1
 8008102:	e7ef      	b.n	80080e4 <__ieee754_sqrt+0x130>
 8008104:	4680      	mov	r8, r0
 8008106:	e7bf      	b.n	8008088 <__ieee754_sqrt+0xd4>
 8008108:	7ff00000 	.word	0x7ff00000

0800810c <fabs>:
 800810c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008110:	4619      	mov	r1, r3
 8008112:	4770      	bx	lr

08008114 <finite>:
 8008114:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 8008118:	f501 1080 	add.w	r0, r1, #1048576	; 0x100000
 800811c:	0fc0      	lsrs	r0, r0, #31
 800811e:	4770      	bx	lr

08008120 <matherr>:
 8008120:	2000      	movs	r0, #0
 8008122:	4770      	bx	lr

08008124 <nan>:
 8008124:	2000      	movs	r0, #0
 8008126:	4901      	ldr	r1, [pc, #4]	; (800812c <nan+0x8>)
 8008128:	4770      	bx	lr
 800812a:	bf00      	nop
 800812c:	7ff80000 	.word	0x7ff80000

08008130 <rint>:
 8008130:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008132:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8008136:	f2a2 3cff 	subw	ip, r2, #1023	; 0x3ff
 800813a:	f1bc 0f13 	cmp.w	ip, #19
 800813e:	4604      	mov	r4, r0
 8008140:	460d      	mov	r5, r1
 8008142:	460b      	mov	r3, r1
 8008144:	4606      	mov	r6, r0
 8008146:	ea4f 77d1 	mov.w	r7, r1, lsr #31
 800814a:	dc5a      	bgt.n	8008202 <rint+0xd2>
 800814c:	f1bc 0f00 	cmp.w	ip, #0
 8008150:	da2b      	bge.n	80081aa <rint+0x7a>
 8008152:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8008156:	4302      	orrs	r2, r0
 8008158:	d023      	beq.n	80081a2 <rint+0x72>
 800815a:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800815e:	4302      	orrs	r2, r0
 8008160:	4256      	negs	r6, r2
 8008162:	4316      	orrs	r6, r2
 8008164:	0c4b      	lsrs	r3, r1, #17
 8008166:	0b36      	lsrs	r6, r6, #12
 8008168:	4934      	ldr	r1, [pc, #208]	; (800823c <rint+0x10c>)
 800816a:	045b      	lsls	r3, r3, #17
 800816c:	f406 2600 	and.w	r6, r6, #524288	; 0x80000
 8008170:	ea46 0503 	orr.w	r5, r6, r3
 8008174:	eb01 01c7 	add.w	r1, r1, r7, lsl #3
 8008178:	4602      	mov	r2, r0
 800817a:	462b      	mov	r3, r5
 800817c:	e9d1 4500 	ldrd	r4, r5, [r1]
 8008180:	4620      	mov	r0, r4
 8008182:	4629      	mov	r1, r5
 8008184:	f7f7 fff2 	bl	800016c <__adddf3>
 8008188:	e9cd 0100 	strd	r0, r1, [sp]
 800818c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008190:	462b      	mov	r3, r5
 8008192:	4622      	mov	r2, r4
 8008194:	f7f7 ffe8 	bl	8000168 <__aeabi_dsub>
 8008198:	4604      	mov	r4, r0
 800819a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800819e:	ea43 75c7 	orr.w	r5, r3, r7, lsl #31
 80081a2:	4620      	mov	r0, r4
 80081a4:	4629      	mov	r1, r5
 80081a6:	b003      	add	sp, #12
 80081a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80081aa:	4a25      	ldr	r2, [pc, #148]	; (8008240 <rint+0x110>)
 80081ac:	fa42 f20c 	asr.w	r2, r2, ip
 80081b0:	4011      	ands	r1, r2
 80081b2:	4301      	orrs	r1, r0
 80081b4:	d0f5      	beq.n	80081a2 <rint+0x72>
 80081b6:	0852      	lsrs	r2, r2, #1
 80081b8:	ea05 0102 	and.w	r1, r5, r2
 80081bc:	ea50 0601 	orrs.w	r6, r0, r1
 80081c0:	d00c      	beq.n	80081dc <rint+0xac>
 80081c2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80081c6:	f1bc 0f13 	cmp.w	ip, #19
 80081ca:	bf0c      	ite	eq
 80081cc:	f04f 4600 	moveq.w	r6, #2147483648	; 0x80000000
 80081d0:	2600      	movne	r6, #0
 80081d2:	ea25 0202 	bic.w	r2, r5, r2
 80081d6:	fa43 f30c 	asr.w	r3, r3, ip
 80081da:	4313      	orrs	r3, r2
 80081dc:	4917      	ldr	r1, [pc, #92]	; (800823c <rint+0x10c>)
 80081de:	4632      	mov	r2, r6
 80081e0:	eb01 07c7 	add.w	r7, r1, r7, lsl #3
 80081e4:	e9d7 4500 	ldrd	r4, r5, [r7]
 80081e8:	4620      	mov	r0, r4
 80081ea:	4629      	mov	r1, r5
 80081ec:	f7f7 ffbe 	bl	800016c <__adddf3>
 80081f0:	e9cd 0100 	strd	r0, r1, [sp]
 80081f4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80081f8:	4622      	mov	r2, r4
 80081fa:	462b      	mov	r3, r5
 80081fc:	f7f7 ffb4 	bl	8000168 <__aeabi_dsub>
 8008200:	e008      	b.n	8008214 <rint+0xe4>
 8008202:	f1bc 0f33 	cmp.w	ip, #51	; 0x33
 8008206:	dd08      	ble.n	800821a <rint+0xea>
 8008208:	f5bc 6f80 	cmp.w	ip, #1024	; 0x400
 800820c:	d1c9      	bne.n	80081a2 <rint+0x72>
 800820e:	4602      	mov	r2, r0
 8008210:	f7f7 ffac 	bl	800016c <__adddf3>
 8008214:	4604      	mov	r4, r0
 8008216:	460d      	mov	r5, r1
 8008218:	e7c3      	b.n	80081a2 <rint+0x72>
 800821a:	f2a2 4113 	subw	r1, r2, #1043	; 0x413
 800821e:	f04f 32ff 	mov.w	r2, #4294967295
 8008222:	40ca      	lsrs	r2, r1
 8008224:	4210      	tst	r0, r2
 8008226:	d0bc      	beq.n	80081a2 <rint+0x72>
 8008228:	0852      	lsrs	r2, r2, #1
 800822a:	4210      	tst	r0, r2
 800822c:	bf1f      	itttt	ne
 800822e:	f04f 4680 	movne.w	r6, #1073741824	; 0x40000000
 8008232:	ea20 0202 	bicne.w	r2, r0, r2
 8008236:	410e      	asrne	r6, r1
 8008238:	4316      	orrne	r6, r2
 800823a:	e7cf      	b.n	80081dc <rint+0xac>
 800823c:	080086a8 	.word	0x080086a8
 8008240:	000fffff 	.word	0x000fffff
 8008244:	00000000 	.word	0x00000000

08008248 <scalbn>:
 8008248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800824a:	4616      	mov	r6, r2
 800824c:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8008250:	4604      	mov	r4, r0
 8008252:	460d      	mov	r5, r1
 8008254:	460b      	mov	r3, r1
 8008256:	b982      	cbnz	r2, 800827a <scalbn+0x32>
 8008258:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800825c:	4303      	orrs	r3, r0
 800825e:	d034      	beq.n	80082ca <scalbn+0x82>
 8008260:	4b2d      	ldr	r3, [pc, #180]	; (8008318 <scalbn+0xd0>)
 8008262:	2200      	movs	r2, #0
 8008264:	f7f8 f938 	bl	80004d8 <__aeabi_dmul>
 8008268:	4b2c      	ldr	r3, [pc, #176]	; (800831c <scalbn+0xd4>)
 800826a:	4604      	mov	r4, r0
 800826c:	429e      	cmp	r6, r3
 800826e:	460d      	mov	r5, r1
 8008270:	da0d      	bge.n	800828e <scalbn+0x46>
 8008272:	a325      	add	r3, pc, #148	; (adr r3, 8008308 <scalbn+0xc0>)
 8008274:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008278:	e01c      	b.n	80082b4 <scalbn+0x6c>
 800827a:	f240 77ff 	movw	r7, #2047	; 0x7ff
 800827e:	42ba      	cmp	r2, r7
 8008280:	d109      	bne.n	8008296 <scalbn+0x4e>
 8008282:	4602      	mov	r2, r0
 8008284:	f7f7 ff72 	bl	800016c <__adddf3>
 8008288:	4604      	mov	r4, r0
 800828a:	460d      	mov	r5, r1
 800828c:	e01d      	b.n	80082ca <scalbn+0x82>
 800828e:	460b      	mov	r3, r1
 8008290:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8008294:	3a36      	subs	r2, #54	; 0x36
 8008296:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800829a:	4432      	add	r2, r6
 800829c:	428a      	cmp	r2, r1
 800829e:	dd0c      	ble.n	80082ba <scalbn+0x72>
 80082a0:	4622      	mov	r2, r4
 80082a2:	462b      	mov	r3, r5
 80082a4:	a11a      	add	r1, pc, #104	; (adr r1, 8008310 <scalbn+0xc8>)
 80082a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80082aa:	f000 f83b 	bl	8008324 <copysign>
 80082ae:	a318      	add	r3, pc, #96	; (adr r3, 8008310 <scalbn+0xc8>)
 80082b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082b4:	f7f8 f910 	bl	80004d8 <__aeabi_dmul>
 80082b8:	e7e6      	b.n	8008288 <scalbn+0x40>
 80082ba:	2a00      	cmp	r2, #0
 80082bc:	dd08      	ble.n	80082d0 <scalbn+0x88>
 80082be:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80082c2:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80082c6:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80082ca:	4620      	mov	r0, r4
 80082cc:	4629      	mov	r1, r5
 80082ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80082d0:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80082d4:	da0b      	bge.n	80082ee <scalbn+0xa6>
 80082d6:	f24c 3350 	movw	r3, #50000	; 0xc350
 80082da:	429e      	cmp	r6, r3
 80082dc:	4622      	mov	r2, r4
 80082de:	462b      	mov	r3, r5
 80082e0:	dce0      	bgt.n	80082a4 <scalbn+0x5c>
 80082e2:	a109      	add	r1, pc, #36	; (adr r1, 8008308 <scalbn+0xc0>)
 80082e4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80082e8:	f000 f81c 	bl	8008324 <copysign>
 80082ec:	e7c1      	b.n	8008272 <scalbn+0x2a>
 80082ee:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80082f2:	3236      	adds	r2, #54	; 0x36
 80082f4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80082f8:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80082fc:	4620      	mov	r0, r4
 80082fe:	4629      	mov	r1, r5
 8008300:	2200      	movs	r2, #0
 8008302:	4b07      	ldr	r3, [pc, #28]	; (8008320 <scalbn+0xd8>)
 8008304:	e7d6      	b.n	80082b4 <scalbn+0x6c>
 8008306:	bf00      	nop
 8008308:	c2f8f359 	.word	0xc2f8f359
 800830c:	01a56e1f 	.word	0x01a56e1f
 8008310:	8800759c 	.word	0x8800759c
 8008314:	7e37e43c 	.word	0x7e37e43c
 8008318:	43500000 	.word	0x43500000
 800831c:	ffff3cb0 	.word	0xffff3cb0
 8008320:	3c900000 	.word	0x3c900000

08008324 <copysign>:
 8008324:	b530      	push	{r4, r5, lr}
 8008326:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800832a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800832e:	ea42 0503 	orr.w	r5, r2, r3
 8008332:	4629      	mov	r1, r5
 8008334:	bd30      	pop	{r4, r5, pc}
	...

08008338 <_init>:
 8008338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800833a:	bf00      	nop
 800833c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800833e:	bc08      	pop	{r3}
 8008340:	469e      	mov	lr, r3
 8008342:	4770      	bx	lr

08008344 <_fini>:
 8008344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008346:	bf00      	nop
 8008348:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800834a:	bc08      	pop	{r3}
 800834c:	469e      	mov	lr, r3
 800834e:	4770      	bx	lr
